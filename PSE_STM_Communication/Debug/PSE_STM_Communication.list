
PSE_STM_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d1c  08004d1c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d24  08004d24  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000061c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000634  20000634  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e293  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed7  00000000  00000000  0002e2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  000301b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af0  00000000  00000000  00030d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020115  00000000  00000000  00031840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d285  00000000  00000000  00051955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c287d  00000000  00000000  0005ebda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121457  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030a4  00000000  00000000  001214a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cdc 	.word	0x08004cdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004cdc 	.word	0x08004cdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <checkBufEmpty>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static inline bool checkBufEmpty(int rcvIndex, int sendIndex)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	return sendIndex == rcvIndex;
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	429a      	cmp	r2, r3
 80004dc:	bf0c      	ite	eq
 80004de:	2301      	moveq	r3, #1
 80004e0:	2300      	movne	r3, #0
 80004e2:	b2db      	uxtb	r3, r3
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <increaseBufIndex>:

static void increaseBufIndex(int *pIndex, const int BUF_SIZE)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	(*pIndex)++;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	601a      	str	r2, [r3, #0]
	if (*pIndex >= BUF_SIZE)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	429a      	cmp	r2, r3
 800050c:	dc02      	bgt.n	8000514 <increaseBufIndex+0x24>
	{
		*pIndex = 0;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
	}
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <uartReceiveData>:

static void uartReceiveData(MsgBuffer_t *pBuf, UART_HandleTypeDef *pUart)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive_IT(pUart, (uint8_t *)pBuf, MSG_TOTAL_BYTES);
 800052a:	220d      	movs	r2, #13
 800052c:	6879      	ldr	r1, [r7, #4]
 800052e:	6838      	ldr	r0, [r7, #0]
 8000530:	f003 f8af 	bl	8003692 <HAL_UART_Receive_IT>
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <uartTransmitData>:

static void uartTransmitData(MsgBuffer_t *pBuf, UART_HandleTypeDef *pUart)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(pUart, (uint8_t *)pBuf, MSG_TOTAL_BYTES);
 8000546:	220d      	movs	r2, #13
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	6838      	ldr	r0, [r7, #0]
 800054c:	f003 f85c 	bl	8003608 <HAL_UART_Transmit_IT>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <transmitEvReqToEm>:

static void transmitEvReqToEm()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	if (!_emTxAvailable)
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <transmitEvReqToEm+0x44>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	f083 0301 	eor.w	r3, r3, #1
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d116      	bne.n	8000598 <transmitEvReqToEm+0x40>
		return;

	_emTxAvailable = false;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <transmitEvReqToEm+0x44>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	uartTransmitData(&_evMsgBuf[_evBufSendIndex], pEM_UART);
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <transmitEvReqToEm+0x48>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4613      	mov	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	4413      	add	r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <transmitEvReqToEm+0x4c>)
 8000580:	4413      	add	r3, r2
 8000582:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <transmitEvReqToEm+0x50>)
 8000584:	6812      	ldr	r2, [r2, #0]
 8000586:	4611      	mov	r1, r2
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ffd7 	bl	800053c <uartTransmitData>
	increaseBufIndex(&_evBufSendIndex, BUFFER_MSG_CAPACITY);
 800058e:	2114      	movs	r1, #20
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <transmitEvReqToEm+0x48>)
 8000592:	f7ff ffad 	bl	80004f0 <increaseBufIndex>
 8000596:	e000      	b.n	800059a <transmitEvReqToEm+0x42>
		return;
 8000598:	bf00      	nop
}
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	2000062c 	.word	0x2000062c
 80005a4:	2000051c 	.word	0x2000051c
 80005a8:	20000000 	.word	0x20000000

080005ac <transmitEmDataToEv>:

static void transmitEmDataToEv()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if (!_evTxAvailable)
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <transmitEmDataToEv+0x44>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f083 0301 	eor.w	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d116      	bne.n	80005ec <transmitEmDataToEv+0x40>
		return;

	_evTxAvailable = false;
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <transmitEmDataToEv+0x44>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	uartTransmitData(&_emMsgBuf[_emBufSendIndex], pEV_UART);
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <transmitEmDataToEv+0x48>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <transmitEmDataToEv+0x4c>)
 80005d4:	4413      	add	r3, r2
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <transmitEmDataToEv+0x50>)
 80005d8:	6812      	ldr	r2, [r2, #0]
 80005da:	4611      	mov	r1, r2
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffad 	bl	800053c <uartTransmitData>
	increaseBufIndex(&_emBufSendIndex, BUFFER_MSG_CAPACITY);
 80005e2:	2114      	movs	r1, #20
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <transmitEmDataToEv+0x48>)
 80005e6:	f7ff ff83 	bl	80004f0 <increaseBufIndex>
 80005ea:	e000      	b.n	80005ee <transmitEmDataToEv+0x42>
		return;
 80005ec:	bf00      	nop
}
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000009 	.word	0x20000009
 80005f4:	20000624 	.word	0x20000624
 80005f8:	20000418 	.word	0x20000418
 80005fc:	20000004 	.word	0x20000004

08000600 <handleDataRcv>:

static void handleDataRcv(UART_HandleTypeDef *pUart, MsgBuffer_t *pMsgBuf, int *pRcvIndex)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
	increaseBufIndex(pRcvIndex, BUFFER_MSG_CAPACITY);
 800060c:	2114      	movs	r1, #20
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ff6e 	bl	80004f0 <increaseBufIndex>
	uartReceiveData(pMsgBuf, pUart);
 8000614:	68f9      	ldr	r1, [r7, #12]
 8000616:	68b8      	ldr	r0, [r7, #8]
 8000618:	f7ff ff82 	bl	8000520 <uartReceiveData>
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	if (huart == pEM_UART)
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <HAL_UART_RxCpltCallback+0x44>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	d107      	bne.n	8000646 <HAL_UART_RxCpltCallback+0x22>
	{
		handleDataRcv(pEM_UART, _emMsgBuf, &_emBufRcvIndex);
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_UART_RxCpltCallback+0x44>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a0c      	ldr	r2, [pc, #48]	; (800066c <HAL_UART_RxCpltCallback+0x48>)
 800063c:	490c      	ldr	r1, [pc, #48]	; (8000670 <HAL_UART_RxCpltCallback+0x4c>)
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffde 	bl	8000600 <handleDataRcv>
	}
	else if (huart == pEV_UART)
	{
		handleDataRcv(pEV_UART, _evMsgBuf, &_evBufRcvIndex);
	}
}
 8000644:	e00b      	b.n	800065e <HAL_UART_RxCpltCallback+0x3a>
	else if (huart == pEV_UART)
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <HAL_UART_RxCpltCallback+0x50>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	d106      	bne.n	800065e <HAL_UART_RxCpltCallback+0x3a>
		handleDataRcv(pEV_UART, _evMsgBuf, &_evBufRcvIndex);
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_UART_RxCpltCallback+0x50>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a08      	ldr	r2, [pc, #32]	; (8000678 <HAL_UART_RxCpltCallback+0x54>)
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <HAL_UART_RxCpltCallback+0x58>)
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffd1 	bl	8000600 <handleDataRcv>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000000 	.word	0x20000000
 800066c:	20000620 	.word	0x20000620
 8000670:	20000418 	.word	0x20000418
 8000674:	20000004 	.word	0x20000004
 8000678:	20000628 	.word	0x20000628
 800067c:	2000051c 	.word	0x2000051c

08000680 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if (huart == pEM_UART)
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <HAL_UART_TxCpltCallback+0x38>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	d103      	bne.n	800069a <HAL_UART_TxCpltCallback+0x1a>
	{
		_emTxAvailable = true;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_UART_TxCpltCallback+0x3c>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
	}
	else if (huart == pEV_UART)
	{
		_evTxAvailable = true;
	}
}
 8000698:	e007      	b.n	80006aa <HAL_UART_TxCpltCallback+0x2a>
	else if (huart == pEV_UART)
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_UART_TxCpltCallback+0x40>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d102      	bne.n	80006aa <HAL_UART_TxCpltCallback+0x2a>
		_evTxAvailable = true;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_UART_TxCpltCallback+0x44>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20000004 	.word	0x20000004
 80006c4:	20000009 	.word	0x20000009

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fc8d 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f85d 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 f971 	bl	80009bc <MX_GPIO_Init>
  MX_SPI1_Init();
 80006da:	f000 f8c3 	bl	8000864 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 80006de:	f000 f94b 	bl	8000978 <MX_USB_OTG_FS_HCD_Init>
  MX_UART4_Init();
 80006e2:	f000 f8f5 	bl	80008d0 <MX_UART4_Init>
  MX_UART5_Init();
 80006e6:	f000 f91d 	bl	8000924 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

//	HAL_UART_Receive_IT(&huart4, _rcvBuf, 4);
//
	uartReceiveData(_evMsgBuf, pEV_UART);
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <main+0xa0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	481e      	ldr	r0, [pc, #120]	; (800076c <main+0xa4>)
 80006f2:	f7ff ff15 	bl	8000520 <uartReceiveData>
	uartReceiveData(_emMsgBuf, pEM_UART);
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <main+0xa8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	481d      	ldr	r0, [pc, #116]	; (8000774 <main+0xac>)
 80006fe:	f7ff ff0f 	bl	8000520 <uartReceiveData>

	uint8_t dummyData[13] = {0xAA, 0xBB, 0xCC, 0xDD};
 8000702:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <main+0xb0>)
 8000704:	463b      	mov	r3, r7
 8000706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800070a:	6018      	str	r0, [r3, #0]
 800070c:	3304      	adds	r3, #4
 800070e:	7019      	strb	r1, [r3, #0]
 8000710:	1d7b      	adds	r3, r7, #5
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
//	uint8_t dummyBuf[13];
	HAL_UART_Transmit_IT(&huart4, dummyData, 13);
 8000718:	463b      	mov	r3, r7
 800071a:	220d      	movs	r2, #13
 800071c:	4619      	mov	r1, r3
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <main+0xb4>)
 8000720:	f002 ff72 	bl	8003608 <HAL_UART_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (!checkBufEmpty(_emBufRcvIndex, _emBufSendIndex))
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <main+0xb8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a16      	ldr	r2, [pc, #88]	; (8000784 <main+0xbc>)
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fecc 	bl	80004cc <checkBufEmpty>
 8000734:	4603      	mov	r3, r0
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <main+0x7c>
		{
			transmitEmDataToEv();
 8000740:	f7ff ff34 	bl	80005ac <transmitEmDataToEv>
		}

		if (!checkBufEmpty(_evBufRcvIndex, _evBufSendIndex))
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <main+0xc0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <main+0xc4>)
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff febc 	bl	80004cc <checkBufEmpty>
 8000754:	4603      	mov	r3, r0
 8000756:	f083 0301 	eor.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0e1      	beq.n	8000724 <main+0x5c>
		{
			transmitEvReqToEm();
 8000760:	f7ff fefa 	bl	8000558 <transmitEvReqToEm>
		if (!checkBufEmpty(_emBufRcvIndex, _emBufSendIndex))
 8000764:	e7de      	b.n	8000724 <main+0x5c>
 8000766:	bf00      	nop
 8000768:	20000004 	.word	0x20000004
 800076c:	2000051c 	.word	0x2000051c
 8000770:	20000000 	.word	0x20000000
 8000774:	20000418 	.word	0x20000418
 8000778:	08004cf4 	.word	0x08004cf4
 800077c:	2000008c 	.word	0x2000008c
 8000780:	20000620 	.word	0x20000620
 8000784:	20000624 	.word	0x20000624
 8000788:	20000628 	.word	0x20000628
 800078c:	2000062c 	.word	0x2000062c

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	; 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 fa94 	bl	8004ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a27      	ldr	r2, [pc, #156]	; (800085c <SystemClock_Config+0xcc>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <SystemClock_Config+0xcc>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <SystemClock_Config+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SystemClock_Config+0xd0>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SystemClock_Config+0xd0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000800:	2308      	movs	r3, #8
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000804:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800080e:	2307      	movs	r3, #7
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	4618      	mov	r0, r3
 8000818:	f002 f988 	bl	8002b2c <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000822:	f000 f9b9 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2302      	movs	r3, #2
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000832:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2105      	movs	r1, #5
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fbe9 	bl	800301c <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000850:	f000 f9a2 	bl	8000b98 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3750      	adds	r7, #80	; 0x50
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_SPI1_Init+0x64>)
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <MX_SPI1_Init+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008b0:	220a      	movs	r2, #10
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_SPI1_Init+0x64>)
 80008b6:	f002 fdd1 	bl	800345c <HAL_SPI_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008c0:	f000 f96a 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000034 	.word	0x20000034
 80008cc:	40013000 	.word	0x40013000

080008d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_UART4_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_UART4_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_UART4_Init+0x4c>)
 80008dc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80008e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_UART4_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_UART4_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_UART4_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_UART4_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_UART4_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_UART4_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_UART4_Init+0x4c>)
 8000908:	f002 fe31 	bl	800356e <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 f941 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000008c 	.word	0x2000008c
 8000920:	40004c00 	.word	0x40004c00

08000924 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_UART5_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_UART5_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_UART5_Init+0x4c>)
 8000930:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000934:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_UART5_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_UART5_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_UART5_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_UART5_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_UART5_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_UART5_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_UART5_Init+0x4c>)
 800095c:	f002 fe07 	bl	800356e <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f917 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000d0 	.word	0x200000d0
 8000974:	40005000 	.word	0x40005000

08000978 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800097e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000982:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000986:	2208      	movs	r2, #8
 8000988:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000998:	2202      	movs	r2, #2
 800099a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80009a4:	f000 ff11 	bl	80017ca <HAL_HCD_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 80009ae:	f000 f8f3 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000114 	.word	0x20000114

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	4b6a      	ldr	r3, [pc, #424]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a69      	ldr	r2, [pc, #420]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b67      	ldr	r3, [pc, #412]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	4b63      	ldr	r3, [pc, #396]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a62      	ldr	r2, [pc, #392]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b60      	ldr	r3, [pc, #384]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b5c      	ldr	r3, [pc, #368]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a5b      	ldr	r2, [pc, #364]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b59      	ldr	r3, [pc, #356]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b55      	ldr	r3, [pc, #340]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a54      	ldr	r2, [pc, #336]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b52      	ldr	r3, [pc, #328]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b4e      	ldr	r3, [pc, #312]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a4d      	ldr	r2, [pc, #308]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b4b      	ldr	r3, [pc, #300]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a46      	ldr	r2, [pc, #280]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b44      	ldr	r3, [pc, #272]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	4841      	ldr	r0, [pc, #260]	; (8000b84 <MX_GPIO_Init+0x1c8>)
 8000a80:	f000 fe8a 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2101      	movs	r1, #1
 8000a88:	483f      	ldr	r0, [pc, #252]	; (8000b88 <MX_GPIO_Init+0x1cc>)
 8000a8a:	f000 fe85 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a94:	483d      	ldr	r0, [pc, #244]	; (8000b8c <MX_GPIO_Init+0x1d0>)
 8000a96:	f000 fe7f 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4834      	ldr	r0, [pc, #208]	; (8000b84 <MX_GPIO_Init+0x1c8>)
 8000ab2:	f000 fcd5 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	482e      	ldr	r0, [pc, #184]	; (8000b88 <MX_GPIO_Init+0x1cc>)
 8000ace:	f000 fcc7 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ad6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482a      	ldr	r0, [pc, #168]	; (8000b90 <MX_GPIO_Init+0x1d4>)
 8000ae8:	f000 fcba 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aec:	2304      	movs	r3, #4
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4825      	ldr	r0, [pc, #148]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000b00:	f000 fcae 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b16:	2305      	movs	r3, #5
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <MX_GPIO_Init+0x1d8>)
 8000b22:	f000 fc9d 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000b26:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4813      	ldr	r0, [pc, #76]	; (8000b8c <MX_GPIO_Init+0x1d0>)
 8000b40:	f000 fc8e 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b44:	2320      	movs	r3, #32
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_GPIO_Init+0x1d0>)
 8000b58:	f000 fc82 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b60:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_GPIO_Init+0x1c8>)
 8000b72:	f000 fc75 	bl	8001460 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b76:	bf00      	nop
 8000b78:	3730      	adds	r7, #48	; 0x30
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020400 	.word	0x40020400

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be2:	2007      	movs	r0, #7
 8000be4:	f000 fb68 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_SPI_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12b      	bne.n	8000c6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c4e:	23e0      	movs	r3, #224	; 0xe0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_SPI_MspInit+0x8c>)
 8000c6a:	f000 fbf9 	bl	8001460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	; 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40013000 	.word	0x40013000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08e      	sub	sp, #56	; 0x38
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a59      	ldr	r2, [pc, #356]	; (8000e08 <HAL_UART_MspInit+0x184>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d153      	bne.n	8000d4e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
 8000caa:	4b58      	ldr	r3, [pc, #352]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a57      	ldr	r2, [pc, #348]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000cb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b55      	ldr	r3, [pc, #340]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cbe:	623b      	str	r3, [r7, #32]
 8000cc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	4b51      	ldr	r3, [pc, #324]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a50      	ldr	r2, [pc, #320]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b4e      	ldr	r3, [pc, #312]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a49      	ldr	r2, [pc, #292]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	483e      	ldr	r0, [pc, #248]	; (8000e10 <HAL_UART_MspInit+0x18c>)
 8000d16:	f000 fba3 	bl	8001460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4837      	ldr	r0, [pc, #220]	; (8000e14 <HAL_UART_MspInit+0x190>)
 8000d38:	f000 fb92 	bl	8001460 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2034      	movs	r0, #52	; 0x34
 8000d42:	f000 fac4 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d46:	2034      	movs	r0, #52	; 0x34
 8000d48:	f000 fadd 	bl	8001306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d4c:	e057      	b.n	8000dfe <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==UART5)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a31      	ldr	r2, [pc, #196]	; (8000e18 <HAL_UART_MspInit+0x194>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d152      	bne.n	8000dfe <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a2a      	ldr	r2, [pc, #168]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a23      	ldr	r2, [pc, #140]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_UART_MspInit+0x188>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <HAL_UART_MspInit+0x190>)
 8000dca:	f000 fb49 	bl	8001460 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dde:	2308      	movs	r3, #8
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <HAL_UART_MspInit+0x198>)
 8000dea:	f000 fb39 	bl	8001460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2035      	movs	r0, #53	; 0x35
 8000df4:	f000 fa6b 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000df8:	2035      	movs	r0, #53	; 0x35
 8000dfa:	f000 fa84 	bl	8001306 <HAL_NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3738      	adds	r7, #56	; 0x38
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40004c00 	.word	0x40004c00
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40005000 	.word	0x40005000
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e40:	d147      	bne.n	8000ed2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b25      	ldr	r3, [pc, #148]	; (8000edc <HAL_HCD_MspInit+0xbc>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a24      	ldr	r2, [pc, #144]	; (8000edc <HAL_HCD_MspInit+0xbc>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <HAL_HCD_MspInit+0xbc>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	481b      	ldr	r0, [pc, #108]	; (8000ee0 <HAL_HCD_MspInit+0xc0>)
 8000e74:	f000 faf4 	bl	8001460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <HAL_HCD_MspInit+0xc0>)
 8000e96:	f000 fae3 	bl	8001460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_HCD_MspInit+0xbc>)
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_HCD_MspInit+0xbc>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_HCD_MspInit+0xbc>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_HCD_MspInit+0xbc>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_HCD_MspInit+0xbc>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2043      	movs	r0, #67	; 0x43
 8000ec8:	f000 fa01 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000ecc:	2043      	movs	r0, #67	; 0x43
 8000ece:	f000 fa1a 	bl	8001306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f8ae 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <UART4_IRQHandler+0x10>)
 8000f3e:	f002 fbd9 	bl	80036f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000008c 	.word	0x2000008c

08000f4c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <UART5_IRQHandler+0x10>)
 8000f52:	f002 fbcf 	bl	80036f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000d0 	.word	0x200000d0

08000f60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <OTG_FS_IRQHandler+0x10>)
 8000f66:	f000 fc92 	bl	800188e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000114 	.word	0x20000114

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9e:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb4:	4c0b      	ldr	r4, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc2:	f7ff ffd7 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f003 fe5d 	bl	8004c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff fb7d 	bl	80006c8 <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000fdc:	08004d2c 	.word	0x08004d2c
  ldr r2, =_sbss
 8000fe0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000fe4:	20000634 	.word	0x20000634

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <HAL_Init+0x40>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_Init+0x40>)
 8001002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_Init+0x40>)
 800100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f94f 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	2000      	movs	r0, #0
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fdc0 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f967 	bl	8001322 <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 f92f 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000000c 	.word	0x2000000c
 8001088:	20000014 	.word	0x20000014
 800108c:	20000010 	.word	0x20000010

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000014 	.word	0x20000014
 80010b4:	20000630 	.word	0x20000630

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000630 	.word	0x20000630

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000014 	.word	0x20000014

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff29 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff3e 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff31 	bl	800117c <__NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffa2 	bl	8001274 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff feb6 	bl	80010b8 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d008      	beq.n	800136c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e052      	b.n	8001412 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0216 	bic.w	r2, r2, #22
 800137a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800138a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <HAL_DMA_Abort+0x62>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001398:	2b00      	cmp	r3, #0
 800139a:	d007      	beq.n	80013ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0208 	bic.w	r2, r2, #8
 80013aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013bc:	e013      	b.n	80013e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013be:	f7ff fe7b 	bl	80010b8 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d90c      	bls.n	80013e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2220      	movs	r2, #32
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2203      	movs	r2, #3
 80013d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e015      	b.n	8001412 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e4      	bne.n	80013be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f8:	223f      	movs	r2, #63	; 0x3f
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d004      	beq.n	8001438 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e00c      	b.n	8001452 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2205      	movs	r2, #5
 800143c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e16b      	b.n	8001754 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	f040 815a 	bne.w	800174e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d005      	beq.n	80014b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d130      	bne.n	8001514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e8:	2201      	movs	r2, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 0201 	and.w	r2, r3, #1
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b03      	cmp	r3, #3
 800151e:	d017      	beq.n	8001550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d123      	bne.n	80015a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	69b9      	ldr	r1, [r7, #24]
 80015a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0203 	and.w	r2, r3, #3
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80b4 	beq.w	800174e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b60      	ldr	r3, [pc, #384]	; (800176c <HAL_GPIO_Init+0x30c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a5f      	ldr	r2, [pc, #380]	; (800176c <HAL_GPIO_Init+0x30c>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b5d      	ldr	r3, [pc, #372]	; (800176c <HAL_GPIO_Init+0x30c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001602:	4a5b      	ldr	r2, [pc, #364]	; (8001770 <HAL_GPIO_Init+0x310>)
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a52      	ldr	r2, [pc, #328]	; (8001774 <HAL_GPIO_Init+0x314>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d02b      	beq.n	8001686 <HAL_GPIO_Init+0x226>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a51      	ldr	r2, [pc, #324]	; (8001778 <HAL_GPIO_Init+0x318>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d025      	beq.n	8001682 <HAL_GPIO_Init+0x222>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a50      	ldr	r2, [pc, #320]	; (800177c <HAL_GPIO_Init+0x31c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01f      	beq.n	800167e <HAL_GPIO_Init+0x21e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <HAL_GPIO_Init+0x320>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d019      	beq.n	800167a <HAL_GPIO_Init+0x21a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4e      	ldr	r2, [pc, #312]	; (8001784 <HAL_GPIO_Init+0x324>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0x216>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4d      	ldr	r2, [pc, #308]	; (8001788 <HAL_GPIO_Init+0x328>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00d      	beq.n	8001672 <HAL_GPIO_Init+0x212>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_GPIO_Init+0x32c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x20e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4b      	ldr	r2, [pc, #300]	; (8001790 <HAL_GPIO_Init+0x330>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_GPIO_Init+0x20a>
 8001666:	2307      	movs	r3, #7
 8001668:	e00e      	b.n	8001688 <HAL_GPIO_Init+0x228>
 800166a:	2308      	movs	r3, #8
 800166c:	e00c      	b.n	8001688 <HAL_GPIO_Init+0x228>
 800166e:	2306      	movs	r3, #6
 8001670:	e00a      	b.n	8001688 <HAL_GPIO_Init+0x228>
 8001672:	2305      	movs	r3, #5
 8001674:	e008      	b.n	8001688 <HAL_GPIO_Init+0x228>
 8001676:	2304      	movs	r3, #4
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x228>
 800167a:	2303      	movs	r3, #3
 800167c:	e004      	b.n	8001688 <HAL_GPIO_Init+0x228>
 800167e:	2302      	movs	r3, #2
 8001680:	e002      	b.n	8001688 <HAL_GPIO_Init+0x228>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x228>
 8001686:	2300      	movs	r3, #0
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4093      	lsls	r3, r2
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001698:	4935      	ldr	r1, [pc, #212]	; (8001770 <HAL_GPIO_Init+0x310>)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a6:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <HAL_GPIO_Init+0x334>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ca:	4a32      	ldr	r2, [pc, #200]	; (8001794 <HAL_GPIO_Init+0x334>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_GPIO_Init+0x334>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f4:	4a27      	ldr	r2, [pc, #156]	; (8001794 <HAL_GPIO_Init+0x334>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_GPIO_Init+0x334>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_GPIO_Init+0x334>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_GPIO_Init+0x334>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <HAL_GPIO_Init+0x334>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3301      	adds	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	f67f ae90 	bls.w	800147c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40013800 	.word	0x40013800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40021c00 	.word	0x40021c00
 8001794:	40013c00 	.word	0x40013c00

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a8:	787b      	ldrb	r3, [r7, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b4:	e003      	b.n	80017be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	041a      	lsls	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	619a      	str	r2, [r3, #24]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017cc:	b08f      	sub	sp, #60	; 0x3c
 80017ce:	af0a      	add	r7, sp, #40	; 0x28
 80017d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e054      	b.n	8001886 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fb12 	bl	8000e20 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2203      	movs	r2, #3
 8001800:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f002 febb 	bl	8004596 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	687e      	ldr	r6, [r7, #4]
 8001828:	466d      	mov	r5, sp
 800182a:	f106 0410 	add.w	r4, r6, #16
 800182e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001836:	e894 0003 	ldmia.w	r4, {r0, r1}
 800183a:	e885 0003 	stmia.w	r5, {r0, r1}
 800183e:	1d33      	adds	r3, r6, #4
 8001840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001842:	6838      	ldr	r0, [r7, #0]
 8001844:	f002 fe46 	bl	80044d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	4618      	mov	r0, r3
 8001850:	f002 feb2 	bl	80045b8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	687e      	ldr	r6, [r7, #4]
 800185c:	466d      	mov	r5, sp
 800185e:	f106 0410 	add.w	r4, r6, #16
 8001862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800186e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001872:	1d33      	adds	r3, r6, #4
 8001874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001876:	6838      	ldr	r0, [r7, #0]
 8001878:	f002 fffc 	bl	8004874 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800188e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f002 ffa2 	bl	80047ee <USB_GetMode>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	f040 80f6 	bne.w	8001a9e <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 ff86 	bl	80047c8 <USB_ReadInterrupts>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80ec 	beq.w	8001a9c <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 ff7d 	bl	80047c8 <USB_ReadInterrupts>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018d8:	d104      	bne.n	80018e4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018e2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 ff6d 	bl	80047c8 <USB_ReadInterrupts>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018f8:	d104      	bne.n	8001904 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001902:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 ff5d 	bl	80047c8 <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001918:	d104      	bne.n	8001924 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001922:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f002 ff4d 	bl	80047c8 <USB_ReadInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b02      	cmp	r3, #2
 8001936:	d103      	bne.n	8001940 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2202      	movs	r2, #2
 800193e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f002 ff3f 	bl	80047c8 <USB_ReadInterrupts>
 800194a:	4603      	mov	r3, r0
 800194c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001954:	d11c      	bne.n	8001990 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800195e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10f      	bne.n	8001990 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001970:	2110      	movs	r1, #16
 8001972:	6938      	ldr	r0, [r7, #16]
 8001974:	f002 fe6c 	bl	8004650 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001978:	6938      	ldr	r0, [r7, #16]
 800197a:	f002 fe9d 	bl	80046b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2101      	movs	r1, #1
 8001984:	4618      	mov	r0, r3
 8001986:	f003 f835 	bl	80049f4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f89e 	bl	8001acc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ff17 	bl	80047c8 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d102      	bne.n	80019ac <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f001 f84c 	bl	8002a44 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 ff09 	bl	80047c8 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d106      	bne.n	80019ce <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f86f 	bl	8001aa4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2208      	movs	r2, #8
 80019cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fef8 	bl	80047c8 <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b10      	cmp	r3, #16
 80019e0:	d101      	bne.n	80019e6 <HAL_HCD_IRQHandler+0x158>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_HCD_IRQHandler+0x15a>
 80019e6:	2300      	movs	r3, #0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d012      	beq.n	8001a12 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0210 	bic.w	r2, r2, #16
 80019fa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 ff4f 	bl	80028a0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0210 	orr.w	r2, r2, #16
 8001a10:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fed6 	bl	80047c8 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a26:	d13a      	bne.n	8001a9e <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 f81b 	bl	8004a68 <USB_HC_ReadInterrupt>
 8001a32:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e025      	b.n	8001a86 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d018      	beq.n	8001a80 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a64:	d106      	bne.n	8001a74 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f859 	bl	8001b24 <HCD_HC_IN_IRQHandler>
 8001a72:	e005      	b.n	8001a80 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fba7 	bl	80021ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d3d4      	bcc.n	8001a3a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	e000      	b.n	8001a9e <HAL_HCD_IRQHandler+0x210>
      return;
 8001a9c:	bf00      	nop
    }
  }
}
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
 8001b14:	4613      	mov	r3, r2
 8001b16:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d11a      	bne.n	8001b8a <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b60:	461a      	mov	r2, r3
 8001b62:	2304      	movs	r3, #4
 8001b64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3361      	adds	r3, #97	; 0x61
 8001b74:	2206      	movs	r2, #6
 8001b76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 ff81 	bl	8004a8a <USB_HC_Halt>
 8001b88:	e0af      	b.n	8001cea <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba0:	d11b      	bne.n	8001bda <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	212c      	movs	r1, #44	; 0x2c
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3361      	adds	r3, #97	; 0x61
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 ff59 	bl	8004a8a <USB_HC_Halt>
 8001bd8:	e087      	b.n	8001cea <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d109      	bne.n	8001c04 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	015a      	lsls	r2, r3, #5
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2320      	movs	r3, #32
 8001c00:	6093      	str	r3, [r2, #8]
 8001c02:	e072      	b.n	8001cea <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11a      	bne.n	8001c50 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c26:	461a      	mov	r2, r3
 8001c28:	2308      	movs	r3, #8
 8001c2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	212c      	movs	r1, #44	; 0x2c
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	3361      	adds	r3, #97	; 0x61
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 ff1e 	bl	8004a8a <USB_HC_Halt>
 8001c4e:	e04c      	b.n	8001cea <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c66:	d11b      	bne.n	8001ca0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	461a      	mov	r2, r3
 8001c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	3361      	adds	r3, #97	; 0x61
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fef6 	bl	8004a8a <USB_HC_Halt>
 8001c9e:	e024      	b.n	8001cea <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb2:	2b80      	cmp	r3, #128	; 0x80
 8001cb4:	d119      	bne.n	8001cea <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3361      	adds	r3, #97	; 0x61
 8001cd6:	2206      	movs	r2, #6
 8001cd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fed0 	bl	8004a8a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d00:	d112      	bne.n	8001d28 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 febc 	bl	8004a8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d24:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d26:	e24e      	b.n	80021c6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	f040 80df 	bne.w	8001efe <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d019      	beq.n	8001d7c <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3348      	adds	r3, #72	; 0x48
 8001d56:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	0159      	lsls	r1, r3, #5
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	202c      	movs	r0, #44	; 0x2c
 8001d72:	fb00 f303 	mul.w	r3, r0, r3
 8001d76:	440b      	add	r3, r1
 8001d78:	3350      	adds	r3, #80	; 0x50
 8001d7a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3361      	adds	r3, #97	; 0x61
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	212c      	movs	r1, #44	; 0x2c
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	335c      	adds	r3, #92	; 0x5c
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	461a      	mov	r2, r3
 8001dae:	2301      	movs	r3, #1
 8001db0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	333f      	adds	r3, #63	; 0x3f
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	333f      	adds	r3, #63	; 0x3f
 8001dd4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d111      	bne.n	8001dfe <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 fe50 	bl	8004a8a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	461a      	mov	r2, r3
 8001df8:	2310      	movs	r3, #16
 8001dfa:	6093      	str	r3, [r2, #8]
 8001dfc:	e03a      	b.n	8001e74 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	212c      	movs	r1, #44	; 0x2c
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	333f      	adds	r3, #63	; 0x3f
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d009      	beq.n	8001e26 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	212c      	movs	r1, #44	; 0x2c
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	333f      	adds	r3, #63	; 0x3f
 8001e20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d126      	bne.n	8001e74 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	0151      	lsls	r1, r2, #5
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	440a      	add	r2, r1
 8001e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e44:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	3360      	adds	r3, #96	; 0x60
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	b2d9      	uxtb	r1, r3
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	202c      	movs	r0, #44	; 0x2c
 8001e62:	fb00 f303 	mul.w	r3, r0, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	3360      	adds	r3, #96	; 0x60
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fe4a 	bl	8001b08 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d12b      	bne.n	8001ed4 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3348      	adds	r3, #72	; 0x48
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	202c      	movs	r0, #44	; 0x2c
 8001e92:	fb00 f202 	mul.w	r2, r0, r2
 8001e96:	440a      	add	r2, r1
 8001e98:	3240      	adds	r2, #64	; 0x40
 8001e9a:	8812      	ldrh	r2, [r2, #0]
 8001e9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 818e 	beq.w	80021c6 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3354      	adds	r3, #84	; 0x54
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2d8      	uxtb	r0, r3
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	212c      	movs	r1, #44	; 0x2c
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	3354      	adds	r3, #84	; 0x54
 8001ece:	4602      	mov	r2, r0
 8001ed0:	701a      	strb	r2, [r3, #0]
}
 8001ed2:	e178      	b.n	80021c6 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	3354      	adds	r3, #84	; 0x54
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2d8      	uxtb	r0, r3
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	212c      	movs	r1, #44	; 0x2c
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3354      	adds	r3, #84	; 0x54
 8001ef8:	4602      	mov	r2, r0
 8001efa:	701a      	strb	r2, [r3, #0]
}
 8001efc:	e163      	b.n	80021c6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	f040 80f6 	bne.w	8002102 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	212c      	movs	r1, #44	; 0x2c
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	3361      	adds	r3, #97	; 0x61
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d109      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	212c      	movs	r1, #44	; 0x2c
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	3360      	adds	r3, #96	; 0x60
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e0c9      	b.n	80020d2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3361      	adds	r3, #97	; 0x61
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d109      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3360      	adds	r3, #96	; 0x60
 8001f60:	2205      	movs	r2, #5
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e0b5      	b.n	80020d2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	3361      	adds	r3, #97	; 0x61
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d009      	beq.n	8001f8e <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3361      	adds	r3, #97	; 0x61
 8001f88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d150      	bne.n	8002030 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	212c      	movs	r1, #44	; 0x2c
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	335c      	adds	r3, #92	; 0x5c
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	202c      	movs	r0, #44	; 0x2c
 8001fa6:	fb00 f303 	mul.w	r3, r0, r3
 8001faa:	440b      	add	r3, r1
 8001fac:	335c      	adds	r3, #92	; 0x5c
 8001fae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	212c      	movs	r1, #44	; 0x2c
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	335c      	adds	r3, #92	; 0x5c
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d912      	bls.n	8001fea <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	212c      	movs	r1, #44	; 0x2c
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	335c      	adds	r3, #92	; 0x5c
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3360      	adds	r3, #96	; 0x60
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001fe8:	e073      	b.n	80020d2 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3360      	adds	r3, #96	; 0x60
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002012:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800201a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4413      	add	r3, r2
 8002024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002028:	461a      	mov	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800202e:	e050      	b.n	80020d2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3361      	adds	r3, #97	; 0x61
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d122      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3360      	adds	r3, #96	; 0x60
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800206c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002074:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e023      	b.n	80020d2 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	3361      	adds	r3, #97	; 0x61
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b07      	cmp	r3, #7
 800209c:	d119      	bne.n	80020d2 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	335c      	adds	r3, #92	; 0x5c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	202c      	movs	r0, #44	; 0x2c
 80020b6:	fb00 f303 	mul.w	r3, r0, r3
 80020ba:	440b      	add	r3, r1
 80020bc:	335c      	adds	r3, #92	; 0x5c
 80020be:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3360      	adds	r3, #96	; 0x60
 80020ce:	2204      	movs	r2, #4
 80020d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	461a      	mov	r2, r3
 80020e0:	2302      	movs	r3, #2
 80020e2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	b2d9      	uxtb	r1, r3
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	202c      	movs	r0, #44	; 0x2c
 80020ee:	fb00 f303 	mul.w	r3, r0, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3360      	adds	r3, #96	; 0x60
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fd04 	bl	8001b08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002100:	e061      	b.n	80021c6 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b10      	cmp	r3, #16
 8002116:	d156      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	212c      	movs	r1, #44	; 0x2c
 800211e:	fb01 f303 	mul.w	r3, r1, r3
 8002122:	4413      	add	r3, r2
 8002124:	333f      	adds	r3, #63	; 0x3f
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d111      	bne.n	8002150 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	335c      	adds	r3, #92	; 0x5c
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f002 fc9e 	bl	8004a8a <USB_HC_Halt>
 800214e:	e031      	b.n	80021b4 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	333f      	adds	r3, #63	; 0x3f
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	333f      	adds	r3, #63	; 0x3f
 8002172:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002174:	2b02      	cmp	r3, #2
 8002176:	d11d      	bne.n	80021b4 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	335c      	adds	r3, #92	; 0x5c
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d110      	bne.n	80021b4 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3361      	adds	r3, #97	; 0x61
 80021a0:	2203      	movs	r2, #3
 80021a2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 fc6b 	bl	8004a8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	2310      	movs	r3, #16
 80021c4:	6093      	str	r3, [r2, #8]
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b088      	sub	sp, #32
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d11a      	bne.n	8002234 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	461a      	mov	r2, r3
 800220c:	2304      	movs	r3, #4
 800220e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3361      	adds	r3, #97	; 0x61
 800221e:	2206      	movs	r2, #6
 8002220:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f002 fc2c 	bl	8004a8a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002232:	e331      	b.n	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b20      	cmp	r3, #32
 8002248:	d12e      	bne.n	80022a8 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	015a      	lsls	r2, r3, #5
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4413      	add	r3, r2
 8002252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002256:	461a      	mov	r2, r3
 8002258:	2320      	movs	r3, #32
 800225a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	333d      	adds	r3, #61	; 0x3d
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	f040 8313 	bne.w	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	333d      	adds	r3, #61	; 0x3d
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3360      	adds	r3, #96	; 0x60
 8002292:	2202      	movs	r2, #2
 8002294:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fbf2 	bl	8004a8a <USB_HC_Halt>
}
 80022a6:	e2f7      	b.n	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022be:	d112      	bne.n	80022e6 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 fbd3 	bl	8004a8a <USB_HC_Halt>
}
 80022e4:	e2d8      	b.n	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d140      	bne.n	800237e <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	335c      	adds	r3, #92	; 0x5c
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4413      	add	r3, r2
 8002316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d111      	bne.n	8002348 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	333d      	adds	r3, #61	; 0x3d
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	461a      	mov	r2, r3
 8002344:	2340      	movs	r3, #64	; 0x40
 8002346:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2301      	movs	r3, #1
 8002358:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3361      	adds	r3, #97	; 0x61
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f002 fb87 	bl	8004a8a <USB_HC_Halt>
}
 800237c:	e28c      	b.n	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d12c      	bne.n	80023ee <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3361      	adds	r3, #97	; 0x61
 80023a2:	2204      	movs	r2, #4
 80023a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	333d      	adds	r3, #61	; 0x3d
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	335c      	adds	r3, #92	; 0x5c
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fb58 	bl	8004a8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	461a      	mov	r2, r3
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	6093      	str	r3, [r2, #8]
}
 80023ec:	e254      	b.n	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b08      	cmp	r3, #8
 8002402:	d11a      	bne.n	800243a <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	461a      	mov	r2, r3
 8002412:	2308      	movs	r3, #8
 8002414:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3361      	adds	r3, #97	; 0x61
 8002424:	2205      	movs	r2, #5
 8002426:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fb29 	bl	8004a8a <USB_HC_Halt>
}
 8002438:	e22e      	b.n	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b10      	cmp	r3, #16
 800244e:	d140      	bne.n	80024d2 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	335c      	adds	r3, #92	; 0x5c
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3361      	adds	r3, #97	; 0x61
 8002470:	2203      	movs	r2, #3
 8002472:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	333d      	adds	r3, #61	; 0x3d
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d112      	bne.n	80024ae <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	333c      	adds	r3, #60	; 0x3c
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	333d      	adds	r3, #61	; 0x3d
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fae6 	bl	8004a8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2310      	movs	r3, #16
 80024ce:	6093      	str	r3, [r2, #8]
}
 80024d0:	e1e2      	b.n	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d164      	bne.n	80025b2 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	2206      	movs	r2, #6
 8002500:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fabc 	bl	8004a8a <USB_HC_Halt>
 8002512:	e044      	b.n	800259e <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	335c      	adds	r3, #92	; 0x5c
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	202c      	movs	r0, #44	; 0x2c
 800252c:	fb00 f303 	mul.w	r3, r0, r3
 8002530:	440b      	add	r3, r1
 8002532:	335c      	adds	r3, #92	; 0x5c
 8002534:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	335c      	adds	r3, #92	; 0x5c
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d920      	bls.n	800258c <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	335c      	adds	r3, #92	; 0x5c
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3360      	adds	r3, #96	; 0x60
 800256a:	2204      	movs	r2, #4
 800256c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	b2d9      	uxtb	r1, r3
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	202c      	movs	r0, #44	; 0x2c
 8002578:	fb00 f303 	mul.w	r3, r0, r3
 800257c:	4413      	add	r3, r2
 800257e:	3360      	adds	r3, #96	; 0x60
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff fabf 	bl	8001b08 <HAL_HCD_HC_NotifyURBChange_Callback>
 800258a:	e008      	b.n	800259e <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3360      	adds	r3, #96	; 0x60
 800259a:	2202      	movs	r2, #2
 800259c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	6093      	str	r3, [r2, #8]
}
 80025b0:	e172      	b.n	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c8:	d11b      	bne.n	8002602 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3361      	adds	r3, #97	; 0x61
 80025d8:	2208      	movs	r2, #8
 80025da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fa4f 	bl	8004a8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	461a      	mov	r2, r3
 80025fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fe:	6093      	str	r3, [r2, #8]
}
 8002600:	e14a      	b.n	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b02      	cmp	r3, #2
 8002616:	f040 813f 	bne.w	8002898 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3361      	adds	r3, #97	; 0x61
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d17d      	bne.n	800272a <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3360      	adds	r3, #96	; 0x60
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	333f      	adds	r3, #63	; 0x3f
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d00a      	beq.n	800266a <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	333f      	adds	r3, #63	; 0x3f
 8002662:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002664:	2b03      	cmp	r3, #3
 8002666:	f040 8100 	bne.w	800286a <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d113      	bne.n	800269a <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3355      	adds	r3, #85	; 0x55
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	f083 0301 	eor.w	r3, r3, #1
 8002686:	b2d8      	uxtb	r0, r3
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3355      	adds	r3, #85	; 0x55
 8002696:	4602      	mov	r2, r0
 8002698:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	f040 80e3 	bne.w	800286a <HCD_HC_OUT_IRQHandler+0x69c>
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	334c      	adds	r3, #76	; 0x4c
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80d8 	beq.w	800286a <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	334c      	adds	r3, #76	; 0x4c
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	202c      	movs	r0, #44	; 0x2c
 80026d0:	fb00 f202 	mul.w	r2, r0, r2
 80026d4:	440a      	add	r2, r1
 80026d6:	3240      	adds	r2, #64	; 0x40
 80026d8:	8812      	ldrh	r2, [r2, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	3b01      	subs	r3, #1
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	202c      	movs	r0, #44	; 0x2c
 80026e4:	fb00 f202 	mul.w	r2, r0, r2
 80026e8:	440a      	add	r2, r1
 80026ea:	3240      	adds	r2, #64	; 0x40
 80026ec:	8812      	ldrh	r2, [r2, #0]
 80026ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80b5 	beq.w	800286a <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3355      	adds	r3, #85	; 0x55
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f083 0301 	eor.w	r3, r3, #1
 8002714:	b2d8      	uxtb	r0, r3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3355      	adds	r3, #85	; 0x55
 8002724:	4602      	mov	r2, r0
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e09f      	b.n	800286a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	3361      	adds	r3, #97	; 0x61
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d109      	bne.n	8002752 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3360      	adds	r3, #96	; 0x60
 800274c:	2202      	movs	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e08b      	b.n	800286a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3361      	adds	r3, #97	; 0x61
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b04      	cmp	r3, #4
 8002764:	d109      	bne.n	800277a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3360      	adds	r3, #96	; 0x60
 8002774:	2202      	movs	r2, #2
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e077      	b.n	800286a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3361      	adds	r3, #97	; 0x61
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d109      	bne.n	80027a2 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3360      	adds	r3, #96	; 0x60
 800279c:	2205      	movs	r2, #5
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e063      	b.n	800286a <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3361      	adds	r3, #97	; 0x61
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d009      	beq.n	80027ca <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3361      	adds	r3, #97	; 0x61
 80027c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d14f      	bne.n	800286a <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	335c      	adds	r3, #92	; 0x5c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	202c      	movs	r0, #44	; 0x2c
 80027e2:	fb00 f303 	mul.w	r3, r0, r3
 80027e6:	440b      	add	r3, r1
 80027e8:	335c      	adds	r3, #92	; 0x5c
 80027ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	212c      	movs	r1, #44	; 0x2c
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	335c      	adds	r3, #92	; 0x5c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d912      	bls.n	8002826 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	335c      	adds	r3, #92	; 0x5c
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3360      	adds	r3, #96	; 0x60
 8002820:	2204      	movs	r2, #4
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e021      	b.n	800286a <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3360      	adds	r3, #96	; 0x60
 8002834:	2202      	movs	r2, #2
 8002836:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800284e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002856:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	461a      	mov	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	461a      	mov	r2, r3
 8002878:	2302      	movs	r3, #2
 800287a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	b2d9      	uxtb	r1, r3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	202c      	movs	r0, #44	; 0x2c
 8002886:	fb00 f303 	mul.w	r3, r0, r3
 800288a:	4413      	add	r3, r2
 800288c:	3360      	adds	r3, #96	; 0x60
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff f938 	bl	8001b08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	0c5b      	lsrs	r3, r3, #17
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d004      	beq.n	80028e6 <HCD_RXQLVL_IRQHandler+0x46>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	f000 80a9 	beq.w	8002a36 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028e4:	e0aa      	b.n	8002a3c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a6 	beq.w	8002a3a <HCD_RXQLVL_IRQHandler+0x19a>
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3344      	adds	r3, #68	; 0x44
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 809b 	beq.w	8002a3a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3350      	adds	r3, #80	; 0x50
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	441a      	add	r2, r3
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	202c      	movs	r0, #44	; 0x2c
 800291e:	fb00 f303 	mul.w	r3, r0, r3
 8002922:	440b      	add	r3, r1
 8002924:	334c      	adds	r3, #76	; 0x4c
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d87a      	bhi.n	8002a22 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3344      	adds	r3, #68	; 0x44
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	b292      	uxth	r2, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f001 fee7 	bl	8004718 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3344      	adds	r3, #68	; 0x44
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	441a      	add	r2, r3
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	202c      	movs	r0, #44	; 0x2c
 8002964:	fb00 f303 	mul.w	r3, r0, r3
 8002968:	440b      	add	r3, r1
 800296a:	3344      	adds	r3, #68	; 0x44
 800296c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3350      	adds	r3, #80	; 0x50
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	441a      	add	r2, r3
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	202c      	movs	r0, #44	; 0x2c
 8002988:	fb00 f303 	mul.w	r3, r0, r3
 800298c:	440b      	add	r3, r1
 800298e:	3350      	adds	r3, #80	; 0x50
 8002990:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	0cdb      	lsrs	r3, r3, #19
 80029a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029a6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3340      	adds	r3, #64	; 0x40
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4293      	cmp	r3, r2
 80029be:	d13c      	bne.n	8002a3a <HCD_RXQLVL_IRQHandler+0x19a>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d039      	beq.n	8002a3a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029dc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029e4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3354      	adds	r3, #84	; 0x54
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f083 0301 	eor.w	r3, r3, #1
 8002a0c:	b2d8      	uxtb	r0, r3
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3354      	adds	r3, #84	; 0x54
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	701a      	strb	r2, [r3, #0]
      break;
 8002a20:	e00b      	b.n	8002a3a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3360      	adds	r3, #96	; 0x60
 8002a30:	2204      	movs	r2, #4
 8002a32:	701a      	strb	r2, [r3, #0]
      break;
 8002a34:	e001      	b.n	8002a3a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002a36:	bf00      	nop
 8002a38:	e000      	b.n	8002a3c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002a3a:	bf00      	nop
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a70:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d10b      	bne.n	8002a94 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d102      	bne.n	8002a8c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff f816 	bl	8001ab8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d132      	bne.n	8002b04 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d126      	bne.n	8002afe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d113      	bne.n	8002ae0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ac2:	d106      	bne.n	8002ad2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 ff92 	bl	80049f4 <USB_InitFSLSPClkSel>
 8002ad0:	e011      	b.n	8002af6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 ff8b 	bl	80049f4 <USB_InitFSLSPClkSel>
 8002ade:	e00a      	b.n	8002af6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aee:	461a      	mov	r2, r3
 8002af0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002af4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fff2 	bl	8001ae0 <HAL_HCD_PortEnabled_Callback>
 8002afc:	e002      	b.n	8002b04 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fff8 	bl	8001af4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d103      	bne.n	8002b16 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f043 0320 	orr.w	r3, r3, #32
 8002b14:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6013      	str	r3, [r2, #0]
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e267      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d075      	beq.n	8002c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b4a:	4b88      	ldr	r3, [pc, #544]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d00c      	beq.n	8002b70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b85      	ldr	r3, [pc, #532]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d112      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4b82      	ldr	r3, [pc, #520]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6e:	d10b      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	4b7e      	ldr	r3, [pc, #504]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d05b      	beq.n	8002c34 <HAL_RCC_OscConfig+0x108>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d157      	bne.n	8002c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e242      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x74>
 8002b92:	4b76      	ldr	r3, [pc, #472]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a75      	ldr	r2, [pc, #468]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0xb0>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x98>
 8002baa:	4b70      	ldr	r3, [pc, #448]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a6f      	ldr	r2, [pc, #444]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b6d      	ldr	r3, [pc, #436]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a6c      	ldr	r2, [pc, #432]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0xb0>
 8002bc4:	4b69      	ldr	r3, [pc, #420]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a68      	ldr	r2, [pc, #416]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b66      	ldr	r3, [pc, #408]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a65      	ldr	r2, [pc, #404]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fa68 	bl	80010b8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe fa64 	bl	80010b8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e207      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b5b      	ldr	r3, [pc, #364]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0xc0>
 8002c0a:	e014      	b.n	8002c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fa54 	bl	80010b8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fa50 	bl	80010b8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e1f3      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	4b51      	ldr	r3, [pc, #324]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0xe8>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d063      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c42:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4e:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d11c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d116      	bne.n	8002c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_RCC_OscConfig+0x152>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e1c7      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4937      	ldr	r1, [pc, #220]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	e03a      	b.n	8002d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9c:	4b34      	ldr	r3, [pc, #208]	; (8002d70 <HAL_RCC_OscConfig+0x244>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fa09 	bl	80010b8 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002caa:	f7fe fa05 	bl	80010b8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1a8      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4925      	ldr	r1, [pc, #148]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
 8002cdc:	e015      	b.n	8002d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_RCC_OscConfig+0x244>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f9e8 	bl	80010b8 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe f9e4 	bl	80010b8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e187      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d036      	beq.n	8002d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_RCC_OscConfig+0x248>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe f9c8 	bl	80010b8 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe f9c4 	bl	80010b8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e167      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_OscConfig+0x240>)
 8002d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x200>
 8002d4a:	e01b      	b.n	8002d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_OscConfig+0x248>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d52:	f7fe f9b1 	bl	80010b8 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d58:	e00e      	b.n	8002d78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe f9ad 	bl	80010b8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d907      	bls.n	8002d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e150      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	42470000 	.word	0x42470000
 8002d74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ea      	bne.n	8002d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8097 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d96:	4b81      	ldr	r3, [pc, #516]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4b7d      	ldr	r3, [pc, #500]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a7c      	ldr	r2, [pc, #496]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b7a      	ldr	r3, [pc, #488]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b77      	ldr	r3, [pc, #476]	; (8002fa0 <HAL_RCC_OscConfig+0x474>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b74      	ldr	r3, [pc, #464]	; (8002fa0 <HAL_RCC_OscConfig+0x474>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a73      	ldr	r2, [pc, #460]	; (8002fa0 <HAL_RCC_OscConfig+0x474>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fe f96d 	bl	80010b8 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fe f969 	bl	80010b8 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e10c      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_OscConfig+0x474>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2ea>
 8002e08:	4b64      	ldr	r3, [pc, #400]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	4a63      	ldr	r2, [pc, #396]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6713      	str	r3, [r2, #112]	; 0x70
 8002e14:	e01c      	b.n	8002e50 <HAL_RCC_OscConfig+0x324>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x30c>
 8002e1e:	4b5f      	ldr	r3, [pc, #380]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a5e      	ldr	r2, [pc, #376]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	4b5c      	ldr	r3, [pc, #368]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a5b      	ldr	r2, [pc, #364]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0x324>
 8002e38:	4b58      	ldr	r3, [pc, #352]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a57      	ldr	r2, [pc, #348]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
 8002e44:	4b55      	ldr	r3, [pc, #340]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4a54      	ldr	r2, [pc, #336]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e4a:	f023 0304 	bic.w	r3, r3, #4
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d015      	beq.n	8002e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe f92e 	bl	80010b8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fe f92a 	bl	80010b8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0cb      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	4b49      	ldr	r3, [pc, #292]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0ee      	beq.n	8002e60 <HAL_RCC_OscConfig+0x334>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fe f918 	bl	80010b8 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe f914 	bl	80010b8 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0b5      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea2:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ee      	bne.n	8002e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb4:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	4a38      	ldr	r2, [pc, #224]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a1 	beq.w	800300c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eca:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d05c      	beq.n	8002f90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d141      	bne.n	8002f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x478>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe f8e8 	bl	80010b8 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe f8e4 	bl	80010b8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e087      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	3b01      	subs	r3, #1
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	491b      	ldr	r1, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x478>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fe f8bd 	bl	80010b8 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe f8b9 	bl	80010b8 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e05c      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x416>
 8002f60:	e054      	b.n	800300c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCC_OscConfig+0x478>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe f8a6 	bl	80010b8 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe f8a2 	bl	80010b8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e045      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RCC_OscConfig+0x470>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x444>
 8002f8e:	e03d      	b.n	800300c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e038      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_RCC_OscConfig+0x4ec>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d028      	beq.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d121      	bne.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d11a      	bne.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d111      	bne.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0cc      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003030:	4b68      	ldr	r3, [pc, #416]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d90c      	bls.n	8003058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b65      	ldr	r3, [pc, #404]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0b8      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003070:	4b59      	ldr	r3, [pc, #356]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a58      	ldr	r2, [pc, #352]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800307a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003088:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	494d      	ldr	r1, [pc, #308]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d044      	beq.n	800313c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d119      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e07f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d003      	beq.n	80030da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030da:	4b3f      	ldr	r3, [pc, #252]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e06f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ea:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e067      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fa:	4b37      	ldr	r3, [pc, #220]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f023 0203 	bic.w	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4934      	ldr	r1, [pc, #208]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800310c:	f7fd ffd4 	bl	80010b8 <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	e00a      	b.n	800312a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003114:	f7fd ffd0 	bl	80010b8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e04f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 020c 	and.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	429a      	cmp	r2, r3
 800313a:	d1eb      	bne.n	8003114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d20c      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e032      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4916      	ldr	r1, [pc, #88]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	490e      	ldr	r1, [pc, #56]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031a2:	f000 f821 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80031a6:	4602      	mov	r2, r0
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	490a      	ldr	r1, [pc, #40]	; (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	5ccb      	ldrb	r3, [r1, r3]
 80031b6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ba:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd ff34 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023c00 	.word	0x40023c00
 80031d8:	40023800 	.word	0x40023800
 80031dc:	08004d04 	.word	0x08004d04
 80031e0:	2000000c 	.word	0x2000000c
 80031e4:	20000010 	.word	0x20000010

080031e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ec:	b094      	sub	sp, #80	; 0x50
 80031ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
 80031f4:	2300      	movs	r3, #0
 80031f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f8:	2300      	movs	r3, #0
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003200:	4b79      	ldr	r3, [pc, #484]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b08      	cmp	r3, #8
 800320a:	d00d      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x40>
 800320c:	2b08      	cmp	r3, #8
 800320e:	f200 80e1 	bhi.w	80033d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x34>
 8003216:	2b04      	cmp	r3, #4
 8003218:	d003      	beq.n	8003222 <HAL_RCC_GetSysClockFreq+0x3a>
 800321a:	e0db      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b73      	ldr	r3, [pc, #460]	; (80033ec <HAL_RCC_GetSysClockFreq+0x204>)
 800321e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003220:	e0db      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003222:	4b73      	ldr	r3, [pc, #460]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003224:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003226:	e0d8      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003228:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003230:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003232:	4b6d      	ldr	r3, [pc, #436]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d063      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800323e:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	2200      	movs	r2, #0
 8003246:	63bb      	str	r3, [r7, #56]	; 0x38
 8003248:	63fa      	str	r2, [r7, #60]	; 0x3c
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003250:	633b      	str	r3, [r7, #48]	; 0x30
 8003252:	2300      	movs	r3, #0
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
 8003256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800325a:	4622      	mov	r2, r4
 800325c:	462b      	mov	r3, r5
 800325e:	f04f 0000 	mov.w	r0, #0
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	0159      	lsls	r1, r3, #5
 8003268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800326c:	0150      	lsls	r0, r2, #5
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4621      	mov	r1, r4
 8003274:	1a51      	subs	r1, r2, r1
 8003276:	6139      	str	r1, [r7, #16]
 8003278:	4629      	mov	r1, r5
 800327a:	eb63 0301 	sbc.w	r3, r3, r1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800328c:	4659      	mov	r1, fp
 800328e:	018b      	lsls	r3, r1, #6
 8003290:	4651      	mov	r1, sl
 8003292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003296:	4651      	mov	r1, sl
 8003298:	018a      	lsls	r2, r1, #6
 800329a:	4651      	mov	r1, sl
 800329c:	ebb2 0801 	subs.w	r8, r2, r1
 80032a0:	4659      	mov	r1, fp
 80032a2:	eb63 0901 	sbc.w	r9, r3, r1
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ba:	4690      	mov	r8, r2
 80032bc:	4699      	mov	r9, r3
 80032be:	4623      	mov	r3, r4
 80032c0:	eb18 0303 	adds.w	r3, r8, r3
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	462b      	mov	r3, r5
 80032c8:	eb49 0303 	adc.w	r3, r9, r3
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032da:	4629      	mov	r1, r5
 80032dc:	024b      	lsls	r3, r1, #9
 80032de:	4621      	mov	r1, r4
 80032e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032e4:	4621      	mov	r1, r4
 80032e6:	024a      	lsls	r2, r1, #9
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ee:	2200      	movs	r2, #0
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032f8:	f7fc ff66 	bl	80001c8 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4613      	mov	r3, r2
 8003302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003304:	e058      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003306:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	099b      	lsrs	r3, r3, #6
 800330c:	2200      	movs	r2, #0
 800330e:	4618      	mov	r0, r3
 8003310:	4611      	mov	r1, r2
 8003312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
 800331c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003320:	4642      	mov	r2, r8
 8003322:	464b      	mov	r3, r9
 8003324:	f04f 0000 	mov.w	r0, #0
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	0159      	lsls	r1, r3, #5
 800332e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003332:	0150      	lsls	r0, r2, #5
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4641      	mov	r1, r8
 800333a:	ebb2 0a01 	subs.w	sl, r2, r1
 800333e:	4649      	mov	r1, r9
 8003340:	eb63 0b01 	sbc.w	fp, r3, r1
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003358:	ebb2 040a 	subs.w	r4, r2, sl
 800335c:	eb63 050b 	sbc.w	r5, r3, fp
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	00eb      	lsls	r3, r5, #3
 800336a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800336e:	00e2      	lsls	r2, r4, #3
 8003370:	4614      	mov	r4, r2
 8003372:	461d      	mov	r5, r3
 8003374:	4643      	mov	r3, r8
 8003376:	18e3      	adds	r3, r4, r3
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	464b      	mov	r3, r9
 800337c:	eb45 0303 	adc.w	r3, r5, r3
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800338e:	4629      	mov	r1, r5
 8003390:	028b      	lsls	r3, r1, #10
 8003392:	4621      	mov	r1, r4
 8003394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003398:	4621      	mov	r1, r4
 800339a:	028a      	lsls	r2, r1, #10
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a2:	2200      	movs	r2, #0
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	61fa      	str	r2, [r7, #28]
 80033a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ac:	f7fc ff0c 	bl	80001c8 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	3301      	adds	r3, #1
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033d2:	e002      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCC_GetSysClockFreq+0x204>)
 80033d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3750      	adds	r7, #80	; 0x50
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	007a1200 	.word	0x007a1200

080033f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <HAL_RCC_GetHCLKFreq+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	2000000c 	.word	0x2000000c

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003410:	f7ff fff0 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0a9b      	lsrs	r3, r3, #10
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	08004d14 	.word	0x08004d14

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003438:	f7ff ffdc 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0b5b      	lsrs	r3, r3, #13
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	08004d14 	.word	0x08004d14

0800345c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07b      	b.n	8003566 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347e:	d009      	beq.n	8003494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
 8003486:	e005      	b.n	8003494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fba0 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	ea42 0103 	orr.w	r1, r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0104 	and.w	r1, r3, #4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f003 0210 	and.w	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e03f      	b.n	8003600 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fd fb75 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2224      	movs	r2, #36	; 0x24
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fd1a 	bl	8003fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b20      	cmp	r3, #32
 8003620:	d130      	bne.n	8003684 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <HAL_UART_Transmit_IT+0x26>
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e029      	b.n	8003686 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_UART_Transmit_IT+0x38>
 800363c:	2302      	movs	r3, #2
 800363e:	e022      	b.n	8003686 <HAL_UART_Transmit_IT+0x7e>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2221      	movs	r2, #33	; 0x21
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800367e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	4613      	mov	r3, r2
 800369e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d11d      	bne.n	80036e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Receive_IT+0x26>
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e016      	b.n	80036ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Receive_IT+0x38>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e00f      	b.n	80036ea <HAL_UART_Receive_IT+0x58>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	461a      	mov	r2, r3
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 faac 	bl	8003c3c <UART_Start_Receive_IT>
 80036e4:	4603      	mov	r3, r0
 80036e6:	e000      	b.n	80036ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b0ba      	sub	sp, #232	; 0xe8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d009      	beq.n	800375a <HAL_UART_IRQHandler+0x66>
 8003746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fb8f 	bl	8003e76 <UART_Receive_IT>
      return;
 8003758:	e256      	b.n	8003c08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800375a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80de 	beq.w	8003920 <HAL_UART_IRQHandler+0x22c>
 8003764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003774:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80d1 	beq.w	8003920 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_UART_IRQHandler+0xae>
 800378a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0201 	orr.w	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_UART_IRQHandler+0xd2>
 80037ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0202 	orr.w	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_UART_IRQHandler+0xf6>
 80037d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f043 0204 	orr.w	r2, r3, #4
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d011      	beq.n	800381a <HAL_UART_IRQHandler+0x126>
 80037f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d105      	bne.n	800380e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f043 0208 	orr.w	r2, r3, #8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 81ed 	beq.w	8003bfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_UART_IRQHandler+0x14e>
 8003830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fb1a 	bl	8003e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <HAL_UART_IRQHandler+0x17a>
 8003866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d04f      	beq.n	800390e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa22 	bl	8003cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d141      	bne.n	8003906 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3314      	adds	r3, #20
 8003888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800389c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3314      	adds	r3, #20
 80038aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1d9      	bne.n	8003882 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d013      	beq.n	80038fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	4a7d      	ldr	r2, [pc, #500]	; (8003ad0 <HAL_UART_IRQHandler+0x3dc>)
 80038dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd fd99 	bl	800141a <HAL_DMA_Abort_IT>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038f8:	4610      	mov	r0, r2
 80038fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	e00e      	b.n	800391c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f986 	bl	8003c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	e00a      	b.n	800391c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f982 	bl	8003c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	e006      	b.n	800391c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f97e 	bl	8003c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800391a:	e170      	b.n	8003bfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	bf00      	nop
    return;
 800391e:	e16e      	b.n	8003bfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	2b01      	cmp	r3, #1
 8003926:	f040 814a 	bne.w	8003bbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8143 	beq.w	8003bbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 813c 	beq.w	8003bbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	f040 80b4 	bne.w	8003ad4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003978:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8140 	beq.w	8003c02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800398a:	429a      	cmp	r2, r3
 800398c:	f080 8139 	bcs.w	8003c02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003996:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a2:	f000 8088 	beq.w	8003ab6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	330c      	adds	r3, #12
 80039ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1d9      	bne.n	80039a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3314      	adds	r3, #20
 8003a12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e1      	bne.n	80039f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3314      	adds	r3, #20
 8003a34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3314      	adds	r3, #20
 8003a4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e3      	bne.n	8003a2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a86:	f023 0310 	bic.w	r3, r3, #16
 8003a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a98:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e3      	bne.n	8003a74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fd fc42 	bl	800133a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8ac 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003acc:	e099      	b.n	8003c02 <HAL_UART_IRQHandler+0x50e>
 8003ace:	bf00      	nop
 8003ad0:	08003d7f 	.word	0x08003d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 808b 	beq.w	8003c06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003af0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8086 	beq.w	8003c06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b1e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e3      	bne.n	8003afa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	623b      	str	r3, [r7, #32]
   return(result);
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b56:	633a      	str	r2, [r7, #48]	; 0x30
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e3      	bne.n	8003b32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0310 	bic.w	r3, r3, #16
 8003b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	330c      	adds	r3, #12
 8003b98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b9c:	61fa      	str	r2, [r7, #28]
 8003b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e3      	bne.n	8003b78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f834 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bbc:	e023      	b.n	8003c06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_UART_IRQHandler+0x4ea>
 8003bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8e5 	bl	8003da6 <UART_Transmit_IT>
    return;
 8003bdc:	e014      	b.n	8003c08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00e      	beq.n	8003c08 <HAL_UART_IRQHandler+0x514>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f925 	bl	8003e46 <UART_EndTransmit_IT>
    return;
 8003bfc:	e004      	b.n	8003c08 <HAL_UART_IRQHandler+0x514>
    return;
 8003bfe:	bf00      	nop
 8003c00:	e002      	b.n	8003c08 <HAL_UART_IRQHandler+0x514>
      return;
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <HAL_UART_IRQHandler+0x514>
      return;
 8003c06:	bf00      	nop
  }
}
 8003c08:	37e8      	adds	r7, #232	; 0xe8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop

08003c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2222      	movs	r2, #34	; 0x22
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0220 	orr.w	r2, r2, #32
 8003ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b095      	sub	sp, #84	; 0x54
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ce0:	643a      	str	r2, [r7, #64]	; 0x40
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e5      	bne.n	8003cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e5      	bne.n	8003cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d119      	bne.n	8003d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f023 0310 	bic.w	r3, r3, #16
 8003d46:	647b      	str	r3, [r7, #68]	; 0x44
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d50:	61ba      	str	r2, [r7, #24]
 8003d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6979      	ldr	r1, [r7, #20]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d72:	bf00      	nop
 8003d74:	3754      	adds	r7, #84	; 0x54
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff ff39 	bl	8003c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b21      	cmp	r3, #33	; 0x21
 8003db8:	d13e      	bne.n	8003e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc2:	d114      	bne.n	8003dee <UART_Transmit_IT+0x48>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d110      	bne.n	8003dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	1c9a      	adds	r2, r3, #2
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]
 8003dec:	e008      	b.n	8003e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	1c59      	adds	r1, r3, #1
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6211      	str	r1, [r2, #32]
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fc fc0a 	bl	8000680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b08c      	sub	sp, #48	; 0x30
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b22      	cmp	r3, #34	; 0x22
 8003e88:	f040 80ab 	bne.w	8003fe2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e94:	d117      	bne.n	8003ec6 <UART_Receive_IT+0x50>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d113      	bne.n	8003ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec4:	e026      	b.n	8003f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed8:	d007      	beq.n	8003eea <UART_Receive_IT+0x74>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <UART_Receive_IT+0x82>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e008      	b.n	8003f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4619      	mov	r1, r3
 8003f22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d15a      	bne.n	8003fde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0220 	bic.w	r2, r2, #32
 8003f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d135      	bne.n	8003fd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f023 0310 	bic.w	r3, r3, #16
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8e:	623a      	str	r2, [r7, #32]
 8003f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	69f9      	ldr	r1, [r7, #28]
 8003f94:	6a3a      	ldr	r2, [r7, #32]
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d10a      	bne.n	8003fc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fe29 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
 8003fd2:	e002      	b.n	8003fda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7fc fb25 	bl	8000624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e002      	b.n	8003fe4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e000      	b.n	8003fe4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
  }
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3730      	adds	r7, #48	; 0x30
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff0:	b0c0      	sub	sp, #256	; 0x100
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	68d9      	ldr	r1, [r3, #12]
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	ea40 0301 	orr.w	r3, r0, r1
 8004014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	431a      	orrs	r2, r3
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	431a      	orrs	r2, r3
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004044:	f021 010c 	bic.w	r1, r1, #12
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004052:	430b      	orrs	r3, r1
 8004054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	6999      	ldr	r1, [r3, #24]
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	ea40 0301 	orr.w	r3, r0, r1
 8004072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b8f      	ldr	r3, [pc, #572]	; (80042b8 <UART_SetConfig+0x2cc>)
 800407c:	429a      	cmp	r2, r3
 800407e:	d005      	beq.n	800408c <UART_SetConfig+0xa0>
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b8d      	ldr	r3, [pc, #564]	; (80042bc <UART_SetConfig+0x2d0>)
 8004088:	429a      	cmp	r2, r3
 800408a:	d104      	bne.n	8004096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800408c:	f7ff f9d2 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004094:	e003      	b.n	800409e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004096:	f7ff f9b9 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 800409a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a8:	f040 810c 	bne.w	80042c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040be:	4622      	mov	r2, r4
 80040c0:	462b      	mov	r3, r5
 80040c2:	1891      	adds	r1, r2, r2
 80040c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80040c6:	415b      	adcs	r3, r3
 80040c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040ce:	4621      	mov	r1, r4
 80040d0:	eb12 0801 	adds.w	r8, r2, r1
 80040d4:	4629      	mov	r1, r5
 80040d6:	eb43 0901 	adc.w	r9, r3, r1
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ee:	4690      	mov	r8, r2
 80040f0:	4699      	mov	r9, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	eb18 0303 	adds.w	r3, r8, r3
 80040f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040fc:	462b      	mov	r3, r5
 80040fe:	eb49 0303 	adc.w	r3, r9, r3
 8004102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800411a:	460b      	mov	r3, r1
 800411c:	18db      	adds	r3, r3, r3
 800411e:	653b      	str	r3, [r7, #80]	; 0x50
 8004120:	4613      	mov	r3, r2
 8004122:	eb42 0303 	adc.w	r3, r2, r3
 8004126:	657b      	str	r3, [r7, #84]	; 0x54
 8004128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800412c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004130:	f7fc f84a 	bl	80001c8 <__aeabi_uldivmod>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <UART_SetConfig+0x2d4>)
 800413a:	fba3 2302 	umull	r2, r3, r3, r2
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	011c      	lsls	r4, r3, #4
 8004142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004146:	2200      	movs	r2, #0
 8004148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800414c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	1891      	adds	r1, r2, r2
 800415a:	64b9      	str	r1, [r7, #72]	; 0x48
 800415c:	415b      	adcs	r3, r3
 800415e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004164:	4641      	mov	r1, r8
 8004166:	eb12 0a01 	adds.w	sl, r2, r1
 800416a:	4649      	mov	r1, r9
 800416c:	eb43 0b01 	adc.w	fp, r3, r1
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800417c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004184:	4692      	mov	sl, r2
 8004186:	469b      	mov	fp, r3
 8004188:	4643      	mov	r3, r8
 800418a:	eb1a 0303 	adds.w	r3, sl, r3
 800418e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004192:	464b      	mov	r3, r9
 8004194:	eb4b 0303 	adc.w	r3, fp, r3
 8004198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041b0:	460b      	mov	r3, r1
 80041b2:	18db      	adds	r3, r3, r3
 80041b4:	643b      	str	r3, [r7, #64]	; 0x40
 80041b6:	4613      	mov	r3, r2
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	647b      	str	r3, [r7, #68]	; 0x44
 80041be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041c6:	f7fb ffff 	bl	80001c8 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <UART_SetConfig+0x2d4>)
 80041d2:	fba3 2301 	umull	r2, r3, r3, r1
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2264      	movs	r2, #100	; 0x64
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	1acb      	subs	r3, r1, r3
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041e6:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <UART_SetConfig+0x2d4>)
 80041e8:	fba3 2302 	umull	r2, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041f4:	441c      	add	r4, r3
 80041f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004210:	415b      	adcs	r3, r3
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004218:	4641      	mov	r1, r8
 800421a:	1851      	adds	r1, r2, r1
 800421c:	6339      	str	r1, [r7, #48]	; 0x30
 800421e:	4649      	mov	r1, r9
 8004220:	414b      	adcs	r3, r1
 8004222:	637b      	str	r3, [r7, #52]	; 0x34
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004230:	4659      	mov	r1, fp
 8004232:	00cb      	lsls	r3, r1, #3
 8004234:	4651      	mov	r1, sl
 8004236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423a:	4651      	mov	r1, sl
 800423c:	00ca      	lsls	r2, r1, #3
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4603      	mov	r3, r0
 8004244:	4642      	mov	r2, r8
 8004246:	189b      	adds	r3, r3, r2
 8004248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800424c:	464b      	mov	r3, r9
 800424e:	460a      	mov	r2, r1
 8004250:	eb42 0303 	adc.w	r3, r2, r3
 8004254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800426c:	460b      	mov	r3, r1
 800426e:	18db      	adds	r3, r3, r3
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
 8004272:	4613      	mov	r3, r2
 8004274:	eb42 0303 	adc.w	r3, r2, r3
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800427e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004282:	f7fb ffa1 	bl	80001c8 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <UART_SetConfig+0x2d4>)
 800428c:	fba3 1302 	umull	r1, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	2164      	movs	r1, #100	; 0x64
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	3332      	adds	r3, #50	; 0x32
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <UART_SetConfig+0x2d4>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	f003 0207 	and.w	r2, r3, #7
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4422      	add	r2, r4
 80042b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042b4:	e105      	b.n	80044c2 <UART_SetConfig+0x4d6>
 80042b6:	bf00      	nop
 80042b8:	40011000 	.word	0x40011000
 80042bc:	40011400 	.word	0x40011400
 80042c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042d6:	4642      	mov	r2, r8
 80042d8:	464b      	mov	r3, r9
 80042da:	1891      	adds	r1, r2, r2
 80042dc:	6239      	str	r1, [r7, #32]
 80042de:	415b      	adcs	r3, r3
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
 80042e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042e6:	4641      	mov	r1, r8
 80042e8:	1854      	adds	r4, r2, r1
 80042ea:	4649      	mov	r1, r9
 80042ec:	eb43 0501 	adc.w	r5, r3, r1
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	00eb      	lsls	r3, r5, #3
 80042fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042fe:	00e2      	lsls	r2, r4, #3
 8004300:	4614      	mov	r4, r2
 8004302:	461d      	mov	r5, r3
 8004304:	4643      	mov	r3, r8
 8004306:	18e3      	adds	r3, r4, r3
 8004308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800430c:	464b      	mov	r3, r9
 800430e:	eb45 0303 	adc.w	r3, r5, r3
 8004312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004332:	4629      	mov	r1, r5
 8004334:	008b      	lsls	r3, r1, #2
 8004336:	4621      	mov	r1, r4
 8004338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800433c:	4621      	mov	r1, r4
 800433e:	008a      	lsls	r2, r1, #2
 8004340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004344:	f7fb ff40 	bl	80001c8 <__aeabi_uldivmod>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4b60      	ldr	r3, [pc, #384]	; (80044d0 <UART_SetConfig+0x4e4>)
 800434e:	fba3 2302 	umull	r2, r3, r3, r2
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	011c      	lsls	r4, r3, #4
 8004356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	1891      	adds	r1, r2, r2
 800436e:	61b9      	str	r1, [r7, #24]
 8004370:	415b      	adcs	r3, r3
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004378:	4641      	mov	r1, r8
 800437a:	1851      	adds	r1, r2, r1
 800437c:	6139      	str	r1, [r7, #16]
 800437e:	4649      	mov	r1, r9
 8004380:	414b      	adcs	r3, r1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004390:	4659      	mov	r1, fp
 8004392:	00cb      	lsls	r3, r1, #3
 8004394:	4651      	mov	r1, sl
 8004396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439a:	4651      	mov	r1, sl
 800439c:	00ca      	lsls	r2, r1, #3
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	4642      	mov	r2, r8
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043ac:	464b      	mov	r3, r9
 80043ae:	460a      	mov	r2, r1
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80043c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043d0:	4649      	mov	r1, r9
 80043d2:	008b      	lsls	r3, r1, #2
 80043d4:	4641      	mov	r1, r8
 80043d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043da:	4641      	mov	r1, r8
 80043dc:	008a      	lsls	r2, r1, #2
 80043de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043e2:	f7fb fef1 	bl	80001c8 <__aeabi_uldivmod>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <UART_SetConfig+0x4e4>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a34      	ldr	r2, [pc, #208]	; (80044d0 <UART_SetConfig+0x4e4>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440a:	441c      	add	r4, r3
 800440c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004410:	2200      	movs	r2, #0
 8004412:	673b      	str	r3, [r7, #112]	; 0x70
 8004414:	677a      	str	r2, [r7, #116]	; 0x74
 8004416:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800441a:	4642      	mov	r2, r8
 800441c:	464b      	mov	r3, r9
 800441e:	1891      	adds	r1, r2, r2
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	415b      	adcs	r3, r3
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800442a:	4641      	mov	r1, r8
 800442c:	1851      	adds	r1, r2, r1
 800442e:	6039      	str	r1, [r7, #0]
 8004430:	4649      	mov	r1, r9
 8004432:	414b      	adcs	r3, r1
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004442:	4659      	mov	r1, fp
 8004444:	00cb      	lsls	r3, r1, #3
 8004446:	4651      	mov	r1, sl
 8004448:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800444c:	4651      	mov	r1, sl
 800444e:	00ca      	lsls	r2, r1, #3
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	4603      	mov	r3, r0
 8004456:	4642      	mov	r2, r8
 8004458:	189b      	adds	r3, r3, r2
 800445a:	66bb      	str	r3, [r7, #104]	; 0x68
 800445c:	464b      	mov	r3, r9
 800445e:	460a      	mov	r2, r1
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	663b      	str	r3, [r7, #96]	; 0x60
 8004470:	667a      	str	r2, [r7, #100]	; 0x64
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800447e:	4649      	mov	r1, r9
 8004480:	008b      	lsls	r3, r1, #2
 8004482:	4641      	mov	r1, r8
 8004484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004488:	4641      	mov	r1, r8
 800448a:	008a      	lsls	r2, r1, #2
 800448c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004490:	f7fb fe9a 	bl	80001c8 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <UART_SetConfig+0x4e4>)
 800449a:	fba3 1302 	umull	r1, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2164      	movs	r1, #100	; 0x64
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	3332      	adds	r3, #50	; 0x32
 80044ac:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <UART_SetConfig+0x4e4>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4422      	add	r2, r4
 80044c0:	609a      	str	r2, [r3, #8]
}
 80044c2:	bf00      	nop
 80044c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044c8:	46bd      	mov	sp, r7
 80044ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ce:	bf00      	nop
 80044d0:	51eb851f 	.word	0x51eb851f

080044d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d4:	b084      	sub	sp, #16
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	f107 001c 	add.w	r0, r7, #28
 80044e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d122      	bne.n	8004532 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d105      	bne.n	8004526 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f970 	bl	800480c <USB_CoreReset>
 800452c:	4603      	mov	r3, r0
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e01a      	b.n	8004568 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f964 	bl	800480c <USB_CoreReset>
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
 800455a:	e005      	b.n	8004568 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10b      	bne.n	8004586 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f043 0206 	orr.w	r2, r3, #6
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004592:	b004      	add	sp, #16
 8004594:	4770      	bx	lr

08004596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d115      	bne.n	8004606 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045e6:	2001      	movs	r0, #1
 80045e8:	f7fc fd72 	bl	80010d0 <HAL_Delay>
      ms++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3301      	adds	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8fb 	bl	80047ee <USB_GetMode>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d01e      	beq.n	800463c <USB_SetCurrentMode+0x84>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b31      	cmp	r3, #49	; 0x31
 8004602:	d9f0      	bls.n	80045e6 <USB_SetCurrentMode+0x2e>
 8004604:	e01a      	b.n	800463c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d115      	bne.n	8004638 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004618:	2001      	movs	r0, #1
 800461a:	f7fc fd59 	bl	80010d0 <HAL_Delay>
      ms++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f8e2 	bl	80047ee <USB_GetMode>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <USB_SetCurrentMode+0x84>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b31      	cmp	r3, #49	; 0x31
 8004634:	d9f0      	bls.n	8004618 <USB_SetCurrentMode+0x60>
 8004636:	e001      	b.n	800463c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e005      	b.n	8004648 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b32      	cmp	r3, #50	; 0x32
 8004640:	d101      	bne.n	8004646 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <USB_FlushTxFifo+0x64>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e01b      	b.n	80046a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	daf2      	bge.n	800465e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	019b      	lsls	r3, r3, #6
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4a08      	ldr	r2, [pc, #32]	; (80046b4 <USB_FlushTxFifo+0x64>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e006      	b.n	80046a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d0f0      	beq.n	8004688 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	00030d40 	.word	0x00030d40

080046b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a11      	ldr	r2, [pc, #68]	; (8004714 <USB_FlushRxFifo+0x5c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e018      	b.n	8004708 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	daf2      	bge.n	80046c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2210      	movs	r2, #16
 80046e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <USB_FlushRxFifo+0x5c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e006      	b.n	8004708 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b10      	cmp	r3, #16
 8004704:	d0f0      	beq.n	80046e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	00030d40 	.word	0x00030d40

08004718 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004718:	b480      	push	{r7}
 800471a:	b08b      	sub	sp, #44	; 0x2c
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	b29b      	uxth	r3, r3
 8004734:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	623b      	str	r3, [r7, #32]
 8004742:	e014      	b.n	800476e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	3301      	adds	r3, #1
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	3301      	adds	r3, #1
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	3301      	adds	r3, #1
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	3301      	adds	r3, #1
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	3301      	adds	r3, #1
 800476c:	623b      	str	r3, [r7, #32]
 800476e:	6a3a      	ldr	r2, [r7, #32]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	429a      	cmp	r2, r3
 8004774:	d3e6      	bcc.n	8004744 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004776:	8bfb      	ldrh	r3, [r7, #30]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01e      	beq.n	80047ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004786:	461a      	mov	r2, r3
 8004788:	f107 0310 	add.w	r3, r7, #16
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	b2da      	uxtb	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	701a      	strb	r2, [r3, #0]
      i++;
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	3301      	adds	r3, #1
 80047a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	3301      	adds	r3, #1
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047ae:	8bfb      	ldrh	r3, [r7, #30]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047b4:	8bfb      	ldrh	r3, [r7, #30]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1ea      	bne.n	8004790 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047bc:	4618      	mov	r0, r3
 80047be:	372c      	adds	r7, #44	; 0x2c
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047e0:	68fb      	ldr	r3, [r7, #12]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0301 	and.w	r3, r3, #1
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3301      	adds	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a13      	ldr	r2, [pc, #76]	; (8004870 <USB_CoreReset+0x64>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e01b      	b.n	8004862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	daf2      	bge.n	8004818 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f043 0201 	orr.w	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3301      	adds	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <USB_CoreReset+0x64>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e006      	b.n	8004862 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d0f0      	beq.n	8004842 <USB_CoreReset+0x36>

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	00030d40 	.word	0x00030d40

08004874 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004874:	b084      	sub	sp, #16
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004894:	461a      	mov	r2, r3
 8004896:	2300      	movs	r3, #0
 8004898:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d018      	beq.n	80048fc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10a      	bne.n	80048e6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048de:	f043 0304 	orr.w	r3, r3, #4
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	e014      	b.n	8004910 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048f4:	f023 0304 	bic.w	r3, r3, #4
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e009      	b.n	8004910 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800490a:	f023 0304 	bic.w	r3, r3, #4
 800490e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004910:	2110      	movs	r1, #16
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fe9c 	bl	8004650 <USB_FlushTxFifo>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fec8 	bl	80046b8 <USB_FlushRxFifo>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	e015      	b.n	8004964 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	461a      	mov	r2, r3
 8004946:	f04f 33ff 	mov.w	r3, #4294967295
 800494a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004958:	461a      	mov	r2, r3
 800495a:	2300      	movs	r3, #0
 800495c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3301      	adds	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	429a      	cmp	r2, r3
 800496a:	d3e5      	bcc.n	8004938 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f04f 32ff 	mov.w	r2, #4294967295
 8004978:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <USB_HostInit+0x16c>)
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <USB_HostInit+0x170>)
 8004998:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800499c:	e009      	b.n	80049b2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2280      	movs	r2, #128	; 0x80
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <USB_HostInit+0x174>)
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <USB_HostInit+0x178>)
 80049ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d105      	bne.n	80049c4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f043 0210 	orr.w	r2, r3, #16
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699a      	ldr	r2, [r3, #24]
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <USB_HostInit+0x17c>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049dc:	b004      	add	sp, #16
 80049de:	4770      	bx	lr
 80049e0:	01000200 	.word	0x01000200
 80049e4:	00e00300 	.word	0x00e00300
 80049e8:	00600080 	.word	0x00600080
 80049ec:	004000e0 	.word	0x004000e0
 80049f0:	a3200008 	.word	0xa3200008

080049f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	68f9      	ldr	r1, [r7, #12]
 8004a28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a42:	6053      	str	r3, [r2, #4]
 8004a44:	e009      	b.n	8004a5a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d106      	bne.n	8004a5a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a52:	461a      	mov	r2, r3
 8004a54:	f241 7370 	movw	r3, #6000	; 0x1770
 8004a58:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	b29b      	uxth	r3, r3
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b089      	sub	sp, #36	; 0x24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0c9b      	lsrs	r3, r3, #18
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	0fdb      	lsrs	r3, r3, #31
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d104      	bne.n	8004ae4 <USB_HC_Halt+0x5a>
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e0c8      	b.n	8004c76 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <USB_HC_Halt+0x66>
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d163      	bne.n	8004bb8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b0e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f040 80ab 	bne.w	8004c74 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d133      	bne.n	8004b92 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b48:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b68:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b76:	d81d      	bhi.n	8004bb4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b8e:	d0ec      	beq.n	8004b6a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b90:	e070      	b.n	8004c74 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bb0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004bb2:	e05f      	b.n	8004c74 <USB_HC_Halt+0x1ea>
            break;
 8004bb4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004bb6:	e05d      	b.n	8004c74 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bd6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d133      	bne.n	8004c50 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c26:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c34:	d81d      	bhi.n	8004c72 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c4c:	d0ec      	beq.n	8004c28 <USB_HC_Halt+0x19e>
 8004c4e:	e011      	b.n	8004c74 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	0151      	lsls	r1, r2, #5
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	440a      	add	r2, r1
 8004c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	e000      	b.n	8004c74 <USB_HC_Halt+0x1ea>
          break;
 8004c72:	bf00      	nop
    }
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	; 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <__libc_init_array>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	4d0d      	ldr	r5, [pc, #52]	; (8004cbc <__libc_init_array+0x38>)
 8004c88:	4c0d      	ldr	r4, [pc, #52]	; (8004cc0 <__libc_init_array+0x3c>)
 8004c8a:	1b64      	subs	r4, r4, r5
 8004c8c:	10a4      	asrs	r4, r4, #2
 8004c8e:	2600      	movs	r6, #0
 8004c90:	42a6      	cmp	r6, r4
 8004c92:	d109      	bne.n	8004ca8 <__libc_init_array+0x24>
 8004c94:	4d0b      	ldr	r5, [pc, #44]	; (8004cc4 <__libc_init_array+0x40>)
 8004c96:	4c0c      	ldr	r4, [pc, #48]	; (8004cc8 <__libc_init_array+0x44>)
 8004c98:	f000 f820 	bl	8004cdc <_init>
 8004c9c:	1b64      	subs	r4, r4, r5
 8004c9e:	10a4      	asrs	r4, r4, #2
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	42a6      	cmp	r6, r4
 8004ca4:	d105      	bne.n	8004cb2 <__libc_init_array+0x2e>
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cac:	4798      	blx	r3
 8004cae:	3601      	adds	r6, #1
 8004cb0:	e7ee      	b.n	8004c90 <__libc_init_array+0xc>
 8004cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb6:	4798      	blx	r3
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7f2      	b.n	8004ca2 <__libc_init_array+0x1e>
 8004cbc:	08004d24 	.word	0x08004d24
 8004cc0:	08004d24 	.word	0x08004d24
 8004cc4:	08004d24 	.word	0x08004d24
 8004cc8:	08004d28 	.word	0x08004d28

08004ccc <memset>:
 8004ccc:	4402      	add	r2, r0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d100      	bne.n	8004cd6 <memset+0xa>
 8004cd4:	4770      	bx	lr
 8004cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cda:	e7f9      	b.n	8004cd0 <memset+0x4>

08004cdc <_init>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr

08004ce8 <_fini>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	bf00      	nop
 8004cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cee:	bc08      	pop	{r3}
 8004cf0:	469e      	mov	lr, r3
 8004cf2:	4770      	bx	lr
