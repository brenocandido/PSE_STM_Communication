
PSE_STM_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005558  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f8  080056f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005700  08005700  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005700  08005700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000488  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000494  20000494  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de31  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd6  00000000  00000000  0002de6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a78  00000000  00000000  00030768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b10  00000000  00000000  000311e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdf7  00000000  00000000  00051cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a01  00000000  00000000  0005eae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001244e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fd0  00000000  00000000  00124538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080056c8 	.word	0x080056c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080056c8 	.word	0x080056c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <MEMS_WriteReg>:
MEMS_Calibration_T calibration;

/* Private functions ---------------------------------------------------------*/

void MEMS_WriteReg(uint8_t addr, uint8_t *data, uint8_t size)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	4613      	mov	r3, r2
 8000d16:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = addr;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	73fb      	strb	r3, [r7, #15]

	MEMS_CS_ENABLE;
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2108      	movs	r1, #8
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <MEMS_WriteReg+0x4c>)
 8000d22:	f001 f9f3 	bl	800210c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_Handle, &spiReg, 1, 10);
 8000d26:	f107 010f 	add.w	r1, r7, #15
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	480a      	ldr	r0, [pc, #40]	; (8000d58 <MEMS_WriteReg+0x50>)
 8000d30:	f003 f8d7 	bl	8003ee2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI_Handle, data, size, 10);
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	230a      	movs	r3, #10
 8000d3a:	6839      	ldr	r1, [r7, #0]
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MEMS_WriteReg+0x50>)
 8000d3e:	f003 f8d0 	bl	8003ee2 <HAL_SPI_Transmit>
	MEMS_CS_DISABLE;
 8000d42:	2201      	movs	r2, #1
 8000d44:	2108      	movs	r1, #8
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <MEMS_WriteReg+0x4c>)
 8000d48:	f001 f9e0 	bl	800210c <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	20000028 	.word	0x20000028

08000d5c <MEMS_ReadReg>:

void MEMS_ReadReg(uint8_t addr, uint8_t *data, uint8_t size)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = addr | 0x80;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	723b      	strb	r3, [r7, #8]

	MEMS_CS_ENABLE;
 8000d76:	2200      	movs	r2, #0
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4818      	ldr	r0, [pc, #96]	; (8000ddc <MEMS_ReadReg+0x80>)
 8000d7c:	f001 f9c6 	bl	800210c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_Handle, spiBuf, 1, 10);
 8000d80:	f107 0108 	add.w	r1, r7, #8
 8000d84:	230a      	movs	r3, #10
 8000d86:	2201      	movs	r2, #1
 8000d88:	4815      	ldr	r0, [pc, #84]	; (8000de0 <MEMS_ReadReg+0x84>)
 8000d8a:	f003 f8aa 	bl	8003ee2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_Handle, spiBuf, size, 10);
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	f107 0108 	add.w	r1, r7, #8
 8000d96:	230a      	movs	r3, #10
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <MEMS_ReadReg+0x84>)
 8000d9a:	f003 f9de 	bl	800415a <HAL_SPI_Receive>
	MEMS_CS_DISABLE;
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2108      	movs	r1, #8
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <MEMS_ReadReg+0x80>)
 8000da4:	f001 f9b2 	bl	800210c <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e00b      	b.n	8000dc6 <MEMS_ReadReg+0x6a>
	{
		data[i] = spiBuf[i];
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	440b      	add	r3, r1
 8000db6:	3210      	adds	r2, #16
 8000db8:	443a      	add	r2, r7
 8000dba:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000dbe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	dbed      	blt.n	8000dae <MEMS_ReadReg+0x52>
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	20000028 	.word	0x20000028

08000de4 <selectSensitivity>:

void selectSensitivity(uint8_t fullScale)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	switch(fullScale)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d859      	bhi.n	8000ea8 <selectSensitivity+0xc4>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <selectSensitivity+0x18>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000e81 	.word	0x08000e81
 8000e00:	08000ea9 	.word	0x08000ea9
 8000e04:	08000ea9 	.word	0x08000ea9
 8000e08:	08000ea9 	.word	0x08000ea9
 8000e0c:	08000ea9 	.word	0x08000ea9
 8000e10:	08000ea9 	.word	0x08000ea9
 8000e14:	08000ea9 	.word	0x08000ea9
 8000e18:	08000ea9 	.word	0x08000ea9
 8000e1c:	08000e89 	.word	0x08000e89
 8000e20:	08000ea9 	.word	0x08000ea9
 8000e24:	08000ea9 	.word	0x08000ea9
 8000e28:	08000ea9 	.word	0x08000ea9
 8000e2c:	08000ea9 	.word	0x08000ea9
 8000e30:	08000ea9 	.word	0x08000ea9
 8000e34:	08000ea9 	.word	0x08000ea9
 8000e38:	08000ea9 	.word	0x08000ea9
 8000e3c:	08000e91 	.word	0x08000e91
 8000e40:	08000ea9 	.word	0x08000ea9
 8000e44:	08000ea9 	.word	0x08000ea9
 8000e48:	08000ea9 	.word	0x08000ea9
 8000e4c:	08000ea9 	.word	0x08000ea9
 8000e50:	08000ea9 	.word	0x08000ea9
 8000e54:	08000ea9 	.word	0x08000ea9
 8000e58:	08000ea9 	.word	0x08000ea9
 8000e5c:	08000e99 	.word	0x08000e99
 8000e60:	08000ea9 	.word	0x08000ea9
 8000e64:	08000ea9 	.word	0x08000ea9
 8000e68:	08000ea9 	.word	0x08000ea9
 8000e6c:	08000ea9 	.word	0x08000ea9
 8000e70:	08000ea9 	.word	0x08000ea9
 8000e74:	08000ea9 	.word	0x08000ea9
 8000e78:	08000ea9 	.word	0x08000ea9
 8000e7c:	08000ea1 	.word	0x08000ea1
	{
		case LIS3DSH_FSCALE_2:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <selectSensitivity+0xd0>)
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <selectSensitivity+0xd4>)
 8000e84:	601a      	str	r2, [r3, #0]
			break;
 8000e86:	e00f      	b.n	8000ea8 <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_4:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <selectSensitivity+0xd0>)
 8000e8a:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <selectSensitivity+0xd8>)
 8000e8c:	601a      	str	r2, [r3, #0]
			break;
 8000e8e:	e00b      	b.n	8000ea8 <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_6:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <selectSensitivity+0xd0>)
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <selectSensitivity+0xdc>)
 8000e94:	601a      	str	r2, [r3, #0]
			break;
 8000e96:	e007      	b.n	8000ea8 <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_8:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <selectSensitivity+0xd0>)
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <selectSensitivity+0xe0>)
 8000e9c:	601a      	str	r2, [r3, #0]
			break;
 8000e9e:	e003      	b.n	8000ea8 <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_16:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <selectSensitivity+0xd0>)
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <selectSensitivity+0xe4>)
 8000ea4:	601a      	str	r2, [r3, #0]
			break;
 8000ea6:	bf00      	nop
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	20000080 	.word	0x20000080
 8000eb8:	3d75c28f 	.word	0x3d75c28f
 8000ebc:	3df5c28f 	.word	0x3df5c28f
 8000ec0:	3e3851ec 	.word	0x3e3851ec
 8000ec4:	3e75c28f 	.word	0x3e75c28f
 8000ec8:	3f3ae148 	.word	0x3f3ae148

08000ecc <MEMS_Init>:

void MEMS_Init(SPI_HandleTypeDef *extSPI_Handle, MEMS_Config_T *memsConfig)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
	
	// Copy Handle from principal application
	memcpy(&SPI_Handle, extSPI_Handle, sizeof(*extSPI_Handle));
 8000eda:	2258      	movs	r2, #88	; 0x58
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	482c      	ldr	r0, [pc, #176]	; (8000f90 <MEMS_Init+0xc4>)
 8000ee0:	f004 fbdc 	bl	800569c <memcpy>

	// Init Configuration (Control Register 4)
		// Enable Axes
	spiData |= (memsConfig->enableAxes & LIS3DSH_AXES_MASK);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	789b      	ldrb	r3, [r3, #2]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	b25a      	sxtb	r2, r3
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
		// Output Data Rate
	spiData |= (memsConfig->dataRate & LIS3DSH_ODR_MASK);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	f023 030f 	bic.w	r3, r3, #15
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
	MEMS_WriteReg(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000f14:	f107 030f 	add.w	r3, r7, #15
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2020      	movs	r0, #32
 8000f1e:	f7ff fef3 	bl	8000d08 <MEMS_WriteReg>
	
	// Init Configuration (Control Register 5)
	spiData = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
		// Full Scale
	spiData |= (memsConfig->fullScale & LIS3DSH_FSCALE_MASK);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f30:	b25a      	sxtb	r2, r3
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
	MEMS_WriteReg(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000f3e:	f107 030f 	add.w	r3, r7, #15
 8000f42:	2201      	movs	r2, #1
 8000f44:	4619      	mov	r1, r3
 8000f46:	2024      	movs	r0, #36	; 0x24
 8000f48:	f7ff fede 	bl	8000d08 <MEMS_WriteReg>
		// Select Sensitivity based in Full Scale
	selectSensitivity(memsConfig->fullScale);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff47 	bl	8000de4 <selectSensitivity>

	// Default Calibration
	calibration.x.Scale = 1.0f;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MEMS_Init+0xc8>)
 8000f58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f5c:	605a      	str	r2, [r3, #4]
	calibration.y.Scale = 1.0f;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MEMS_Init+0xc8>)
 8000f60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f64:	60da      	str	r2, [r3, #12]
	calibration.z.Scale = 1.0f;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MEMS_Init+0xc8>)
 8000f68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f6c:	615a      	str	r2, [r3, #20]

	calibration.x.Bias = 0.0f;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MEMS_Init+0xc8>)
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
	calibration.x.Bias = 0.0f;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MEMS_Init+0xc8>)
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
	calibration.x.Bias = 0.0f;
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <MEMS_Init+0xc8>)
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000028 	.word	0x20000028
 8000f94:	20000084 	.word	0x20000084

08000f98 <MEMS_GetAxesData>:

int16_t MEMS_GetAxesData(uint8_t addr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[2]; // Measure have MSB and LSB
	int16_t DataRaw;

	MEMS_ReadReg(addr, spiBuf, 2);
 8000fa2:	f107 010c 	add.w	r1, r7, #12
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fed6 	bl	8000d5c <MEMS_ReadReg>
	DataRaw = ((spiBuf[1] << 8) + spiBuf[0]);
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	7b3b      	ldrb	r3, [r7, #12]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	81fb      	strh	r3, [r7, #14]

	return DataRaw;
 8000fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <MEMS_GetDataRaw>:

MEMS_DataRaw_T MEMS_GetDataRaw(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	MEMS_DataRaw_T tempDataRaw;
	
	// Get XYZ data
	tempDataRaw.x = MEMS_GetAxesData(LIS3DSH_OUT_X_L_ADDR);
 8000fd6:	2028      	movs	r0, #40	; 0x28
 8000fd8:	f7ff ffde 	bl	8000f98 <MEMS_GetAxesData>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	813b      	strh	r3, [r7, #8]
	tempDataRaw.y = MEMS_GetAxesData(LIS3DSH_OUT_Y_L_ADDR);
 8000fe0:	202a      	movs	r0, #42	; 0x2a
 8000fe2:	f7ff ffd9 	bl	8000f98 <MEMS_GetAxesData>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	817b      	strh	r3, [r7, #10]
	tempDataRaw.z = MEMS_GetAxesData(LIS3DSH_OUT_Z_L_ADDR);
 8000fea:	202c      	movs	r0, #44	; 0x2c
 8000fec:	f7ff ffd4 	bl	8000f98 <MEMS_GetAxesData>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	81bb      	strh	r3, [r7, #12]

	return tempDataRaw;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	6010      	str	r0, [r2, #0]
 8001000:	889b      	ldrh	r3, [r3, #4]
 8001002:	8093      	strh	r3, [r2, #4]
}
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <MEMS_GetDataScaled>:

MEMS_DataScaled_T MEMS_GetDataScaled(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
	// Read raw data
	MEMS_DataRaw_T tempRawData = MEMS_GetDataRaw();
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffd9 	bl	8000fce <MEMS_GetDataRaw>
	
	// Scale
	MEMS_DataScaled_T tempScaledData;
	tempScaledData.x = (tempRawData.x * mems_Sensitivity * calibration.x.Scale) + 0.0f - calibration.x.Bias;
 800101c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001028:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <MEMS_GetDataScaled+0xe4>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <MEMS_GetDataScaled+0xe8>)
 8001034:	edd3 7a01 	vldr	s15, [r3, #4]
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80010f8 <MEMS_GetDataScaled+0xec>
 8001040:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <MEMS_GetDataScaled+0xe8>)
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800104e:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * mems_Sensitivity * calibration.y.Scale) + 0.0f - calibration.y.Bias;
 8001052:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MEMS_GetDataScaled+0xe4>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MEMS_GetDataScaled+0xe8>)
 800106a:	edd3 7a03 	vldr	s15, [r3, #12]
 800106e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001072:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80010f8 <MEMS_GetDataScaled+0xec>
 8001076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MEMS_GetDataScaled+0xe8>)
 800107c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001084:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * mems_Sensitivity * calibration.z.Scale) + 0.0f - calibration.z.Bias;
 8001088:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MEMS_GetDataScaled+0xe4>)
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MEMS_GetDataScaled+0xe8>)
 80010a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80010f8 <MEMS_GetDataScaled+0xec>
 80010ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MEMS_GetDataScaled+0xe8>)
 80010b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80010b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ba:	edc7 7a06 	vstr	s15, [r7, #24]
	
	return tempScaledData;
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	f107 0210 	add.w	r2, r7, #16
 80010c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	ee06 1a90 	vmov	s13, r1
 80010d6:	ee07 2a10 	vmov	s14, r2
 80010da:	ee07 3a90 	vmov	s15, r3
}
 80010de:	eeb0 0a66 	vmov.f32	s0, s13
 80010e2:	eef0 0a47 	vmov.f32	s1, s14
 80010e6:	eeb0 1a67 	vmov.f32	s2, s15
 80010ea:	3730      	adds	r7, #48	; 0x30
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000080 	.word	0x20000080
 80010f4:	20000084 	.word	0x20000084
	...

08001100 <MEMS_GetDataMS2>:

MEMS_DataScaled_T MEMS_GetDataMS2(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
	// Read Scaled data
	MEMS_DataScaled_T tempData = MEMS_GetDataScaled();
 8001106:	f7ff ff81 	bl	800100c <MEMS_GetDataScaled>
 800110a:	eef0 6a40 	vmov.f32	s13, s0
 800110e:	eeb0 7a60 	vmov.f32	s14, s1
 8001112:	eef0 7a41 	vmov.f32	s15, s2
 8001116:	edc7 6a04 	vstr	s13, [r7, #16]
 800111a:	ed87 7a05 	vstr	s14, [r7, #20]
 800111e:	edc7 7a06 	vstr	s15, [r7, #24]
	
	// Scale
	tempData.x = (tempData.x * GRAVITY_VALUE) / 1000.0f;
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f9b3 	bl	8000490 <__aeabi_f2d>
 800112a:	a331      	add	r3, pc, #196	; (adr r3, 80011f0 <MEMS_GetDataMS2+0xf0>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fa06 	bl	8000540 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <MEMS_GetDataMS2+0xf8>)
 8001142:	f7ff fb27 	bl	8000794 <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fc09 	bl	8000964 <__aeabi_d2f>
 8001152:	4603      	mov	r3, r0
 8001154:	613b      	str	r3, [r7, #16]
	tempData.y = (tempData.y * GRAVITY_VALUE) / 1000.0f;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f999 	bl	8000490 <__aeabi_f2d>
 800115e:	a324      	add	r3, pc, #144	; (adr r3, 80011f0 <MEMS_GetDataMS2+0xf0>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff f9ec 	bl	8000540 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MEMS_GetDataMS2+0xf8>)
 8001176:	f7ff fb0d 	bl	8000794 <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fbef 	bl	8000964 <__aeabi_d2f>
 8001186:	4603      	mov	r3, r0
 8001188:	617b      	str	r3, [r7, #20]
	tempData.z = (tempData.z * GRAVITY_VALUE) / 1000.0f;
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f97f 	bl	8000490 <__aeabi_f2d>
 8001192:	a317      	add	r3, pc, #92	; (adr r3, 80011f0 <MEMS_GetDataMS2+0xf0>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff f9d2 	bl	8000540 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MEMS_GetDataMS2+0xf8>)
 80011aa:	f7ff faf3 	bl	8000794 <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fbd5 	bl	8000964 <__aeabi_d2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	61bb      	str	r3, [r7, #24]
	
	return tempData;
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	f107 0210 	add.w	r2, r7, #16
 80011c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011cc:	69f9      	ldr	r1, [r7, #28]
 80011ce:	6a3a      	ldr	r2, [r7, #32]
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	ee06 1a90 	vmov	s13, r1
 80011d6:	ee07 2a10 	vmov	s14, r2
 80011da:	ee07 3a90 	vmov	s15, r3
}
 80011de:	eeb0 0a66 	vmov.f32	s0, s13
 80011e2:	eef0 0a47 	vmov.f32	s1, s14
 80011e6:	eeb0 1a67 	vmov.f32	s2, s15
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	3a92a305 	.word	0x3a92a305
 80011f4:	40239d01 	.word	0x40239d01
 80011f8:	408f4000 	.word	0x408f4000

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001202:	f000 fc3f 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001206:	f000 f833 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120a:	f000 f947 	bl	800149c <MX_GPIO_Init>
  MX_SPI1_Init();
 800120e:	f000 f899 	bl	8001344 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8001212:	f000 f921 	bl	8001458 <MX_USB_OTG_FS_HCD_Init>
  MX_UART4_Init();
 8001216:	f000 f8cb 	bl	80013b0 <MX_UART4_Init>
  MX_UART5_Init();
 800121a:	f000 f8f3 	bl	8001404 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // MEMS Configuration
  MEMSConfig.dataRate   = LIS3DSH_ODR_100;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <main+0x68>)
 8001220:	2260      	movs	r2, #96	; 0x60
 8001222:	701a      	strb	r2, [r3, #0]
  MEMSConfig.fullScale  = LIS3DSH_FSCALE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <main+0x68>)
 8001226:	2200      	movs	r2, #0
 8001228:	705a      	strb	r2, [r3, #1]
  MEMSConfig.enableAxes = LIS3DSH_XYZ_ENABLE;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <main+0x68>)
 800122c:	2207      	movs	r2, #7
 800122e:	709a      	strb	r2, [r3, #2]

  // MEMS Init
  MEMS_Init(&hspi1, &MEMSConfig);
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <main+0x68>)
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <main+0x6c>)
 8001234:	f7ff fe4a 	bl	8000ecc <MEMS_Init>

  uint8_t who_am_i[1];
  MEMS_ReadReg(LIS3DSH_WHO_AM_I_ADDR,who_am_i,1);
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2201      	movs	r2, #1
 800123c:	4619      	mov	r1, r3
 800123e:	200f      	movs	r0, #15
 8001240:	f7ff fd8c 	bl	8000d5c <MEMS_ReadReg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get MEMS Data
	  MEMSData = MEMS_GetDataMS2();
 8001244:	f7ff ff5c 	bl	8001100 <MEMS_GetDataMS2>
 8001248:	eef0 6a40 	vmov.f32	s13, s0
 800124c:	eeb0 7a60 	vmov.f32	s14, s1
 8001250:	eef0 7a41 	vmov.f32	s15, s2
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <main+0x70>)
 8001256:	edc3 6a00 	vstr	s13, [r3]
 800125a:	ed83 7a01 	vstr	s14, [r3, #4]
 800125e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001262:	e7ef      	b.n	8001244 <main+0x48>
 8001264:	200000a8 	.word	0x200000a8
 8001268:	200000ac 	.word	0x200000ac
 800126c:	2000009c 	.word	0x2000009c

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	; 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fa1a 	bl	80056b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <SystemClock_Config+0xcc>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <SystemClock_Config+0xcc>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <SystemClock_Config+0xd0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <SystemClock_Config+0xd0>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e0:	2308      	movs	r3, #8
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ee:	2307      	movs	r3, #7
 80012f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 f8d2 	bl	80034a0 <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001302:	f000 f9b9 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
 8001308:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2302      	movs	r3, #2
 800130c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001312:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001316:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2105      	movs	r1, #5
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fb33 	bl	8003990 <HAL_RCC_ClockConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001330:	f000 f9a2 	bl	8001678 <Error_Handler>
  }
}
 8001334:	bf00      	nop
 8001336:	3750      	adds	r7, #80	; 0x50
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_SPI1_Init+0x64>)
 800134a:	4a18      	ldr	r2, [pc, #96]	; (80013ac <MX_SPI1_Init+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001374:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001378:	2218      	movs	r2, #24
 800137a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MX_SPI1_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <MX_SPI1_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001390:	220a      	movs	r2, #10
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <MX_SPI1_Init+0x64>)
 8001396:	f002 fd1b 	bl	8003dd0 <HAL_SPI_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013a0:	f000 f96a 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200000ac 	.word	0x200000ac
 80013ac:	40013000 	.word	0x40013000

080013b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_UART4_Init+0x4c>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <MX_UART4_Init+0x50>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_UART4_Init+0x4c>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_UART4_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_UART4_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <MX_UART4_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_UART4_Init+0x4c>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MX_UART4_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_UART4_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_UART4_Init+0x4c>)
 80013e8:	f003 fa9a 	bl	8004920 <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80013f2:	f000 f941 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000104 	.word	0x20000104
 8001400:	40004c00 	.word	0x40004c00

08001404 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_UART5_Init+0x4c>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <MX_UART5_Init+0x50>)
 800140c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_UART5_Init+0x4c>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_UART5_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_UART5_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_UART5_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_UART5_Init+0x4c>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_UART5_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_UART5_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_UART5_Init+0x4c>)
 800143c:	f003 fa70 	bl	8004920 <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001446:	f000 f917 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000148 	.word	0x20000148
 8001454:	40005000 	.word	0x40005000

08001458 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800145e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001462:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001466:	2208      	movs	r2, #8
 8001468:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800146c:	2201      	movs	r2, #1
 800146e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001478:	2202      	movs	r2, #2
 800147a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001484:	f000 fe5b 	bl	800213e <HAL_HCD_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 800148e:	f000 f8f3 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000018c 	.word	0x2000018c

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <MX_GPIO_Init+0x1c4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a69      	ldr	r2, [pc, #420]	; (8001660 <MX_GPIO_Init+0x1c4>)
 80014bc:	f043 0310 	orr.w	r3, r3, #16
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b67      	ldr	r3, [pc, #412]	; (8001660 <MX_GPIO_Init+0x1c4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <MX_GPIO_Init+0x1c4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a62      	ldr	r2, [pc, #392]	; (8001660 <MX_GPIO_Init+0x1c4>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b60      	ldr	r3, [pc, #384]	; (8001660 <MX_GPIO_Init+0x1c4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <MX_GPIO_Init+0x1c4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a5b      	ldr	r2, [pc, #364]	; (8001660 <MX_GPIO_Init+0x1c4>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b59      	ldr	r3, [pc, #356]	; (8001660 <MX_GPIO_Init+0x1c4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b55      	ldr	r3, [pc, #340]	; (8001660 <MX_GPIO_Init+0x1c4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a54      	ldr	r2, [pc, #336]	; (8001660 <MX_GPIO_Init+0x1c4>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b52      	ldr	r3, [pc, #328]	; (8001660 <MX_GPIO_Init+0x1c4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <MX_GPIO_Init+0x1c4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a4d      	ldr	r2, [pc, #308]	; (8001660 <MX_GPIO_Init+0x1c4>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <MX_GPIO_Init+0x1c4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b47      	ldr	r3, [pc, #284]	; (8001660 <MX_GPIO_Init+0x1c4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a46      	ldr	r2, [pc, #280]	; (8001660 <MX_GPIO_Init+0x1c4>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <MX_GPIO_Init+0x1c4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2108      	movs	r1, #8
 800155e:	4841      	ldr	r0, [pc, #260]	; (8001664 <MX_GPIO_Init+0x1c8>)
 8001560:	f000 fdd4 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	2101      	movs	r1, #1
 8001568:	483f      	ldr	r0, [pc, #252]	; (8001668 <MX_GPIO_Init+0x1cc>)
 800156a:	f000 fdcf 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001574:	483d      	ldr	r0, [pc, #244]	; (800166c <MX_GPIO_Init+0x1d0>)
 8001576:	f000 fdc9 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800157a:	2308      	movs	r3, #8
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4834      	ldr	r0, [pc, #208]	; (8001664 <MX_GPIO_Init+0x1c8>)
 8001592:	f000 fc1f 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001596:	2301      	movs	r3, #1
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	482e      	ldr	r0, [pc, #184]	; (8001668 <MX_GPIO_Init+0x1cc>)
 80015ae:	f000 fc11 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	482a      	ldr	r0, [pc, #168]	; (8001670 <MX_GPIO_Init+0x1d4>)
 80015c8:	f000 fc04 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015cc:	2304      	movs	r3, #4
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4825      	ldr	r0, [pc, #148]	; (8001674 <MX_GPIO_Init+0x1d8>)
 80015e0:	f000 fbf8 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015f6:	2305      	movs	r3, #5
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	481c      	ldr	r0, [pc, #112]	; (8001674 <MX_GPIO_Init+0x1d8>)
 8001602:	f000 fbe7 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001606:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4813      	ldr	r0, [pc, #76]	; (800166c <MX_GPIO_Init+0x1d0>)
 8001620:	f000 fbd8 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001624:	2320      	movs	r3, #32
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <MX_GPIO_Init+0x1d0>)
 8001638:	f000 fbcc 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800163c:	2302      	movs	r3, #2
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001640:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_GPIO_Init+0x1c8>)
 8001652:	f000 fbbf 	bl	8001dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001656:	bf00      	nop
 8001658:	3730      	adds	r7, #48	; 0x30
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40021000 	.word	0x40021000
 8001668:	40020800 	.word	0x40020800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	40020000 	.word	0x40020000
 8001674:	40020400 	.word	0x40020400

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <HAL_MspInit+0x4c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016c2:	2007      	movs	r0, #7
 80016c4:	f000 fb44 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a19      	ldr	r2, [pc, #100]	; (8001758 <HAL_SPI_MspInit+0x84>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d12b      	bne.n	800174e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_SPI_MspInit+0x88>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_SPI_MspInit+0x88>)
 8001700:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_SPI_MspInit+0x88>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_SPI_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_SPI_MspInit+0x88>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_SPI_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800172e:	23e0      	movs	r3, #224	; 0xe0
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800173e:	2305      	movs	r3, #5
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_SPI_MspInit+0x8c>)
 800174a:	f000 fb43 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40013000 	.word	0x40013000
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_UART_MspInit+0x164>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d14b      	bne.n	800181e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
 800178a:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_UART_MspInit+0x168>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <HAL_UART_MspInit+0x168>)
 8001790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <HAL_UART_MspInit+0x168>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800179e:	623b      	str	r3, [r7, #32]
 80017a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <HAL_UART_MspInit+0x168>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a48      	ldr	r2, [pc, #288]	; (80018cc <HAL_UART_MspInit+0x168>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b46      	ldr	r3, [pc, #280]	; (80018cc <HAL_UART_MspInit+0x168>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <HAL_UART_MspInit+0x168>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a41      	ldr	r2, [pc, #260]	; (80018cc <HAL_UART_MspInit+0x168>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_UART_MspInit+0x168>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017da:	2302      	movs	r3, #2
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017ea:	2308      	movs	r3, #8
 80017ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	4836      	ldr	r0, [pc, #216]	; (80018d0 <HAL_UART_MspInit+0x16c>)
 80017f6:	f000 faed 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800180c:	2308      	movs	r3, #8
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	482f      	ldr	r0, [pc, #188]	; (80018d4 <HAL_UART_MspInit+0x170>)
 8001818:	f000 fadc 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800181c:	e04f      	b.n	80018be <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==UART5)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a2d      	ldr	r2, [pc, #180]	; (80018d8 <HAL_UART_MspInit+0x174>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d14a      	bne.n	80018be <HAL_UART_MspInit+0x15a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_UART_MspInit+0x168>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a26      	ldr	r2, [pc, #152]	; (80018cc <HAL_UART_MspInit+0x168>)
 8001832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_UART_MspInit+0x168>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_UART_MspInit+0x168>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_UART_MspInit+0x168>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_UART_MspInit+0x168>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_UART_MspInit+0x168>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a18      	ldr	r2, [pc, #96]	; (80018cc <HAL_UART_MspInit+0x168>)
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_UART_MspInit+0x168>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800188e:	2308      	movs	r3, #8
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	480e      	ldr	r0, [pc, #56]	; (80018d4 <HAL_UART_MspInit+0x170>)
 800189a:	f000 fa9b 	bl	8001dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800189e:	2304      	movs	r3, #4
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80018ae:	2308      	movs	r3, #8
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4808      	ldr	r0, [pc, #32]	; (80018dc <HAL_UART_MspInit+0x178>)
 80018ba:	f000 fa8b 	bl	8001dd4 <HAL_GPIO_Init>
}
 80018be:	bf00      	nop
 80018c0:	3738      	adds	r7, #56	; 0x38
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40004c00 	.word	0x40004c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40005000 	.word	0x40005000
 80018dc:	40020c00 	.word	0x40020c00

080018e0 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001900:	d147      	bne.n	8001992 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_HCD_MspInit+0xbc>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a24      	ldr	r2, [pc, #144]	; (800199c <HAL_HCD_MspInit+0xbc>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_HCD_MspInit+0xbc>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800191e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	481b      	ldr	r0, [pc, #108]	; (80019a0 <HAL_HCD_MspInit+0xc0>)
 8001934:	f000 fa4e 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001938:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800194a:	230a      	movs	r3, #10
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4812      	ldr	r0, [pc, #72]	; (80019a0 <HAL_HCD_MspInit+0xc0>)
 8001956:	f000 fa3d 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_HCD_MspInit+0xbc>)
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_HCD_MspInit+0xbc>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001964:	6353      	str	r3, [r2, #52]	; 0x34
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_HCD_MspInit+0xbc>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <HAL_HCD_MspInit+0xbc>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_HCD_MspInit+0xbc>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	2043      	movs	r0, #67	; 0x43
 8001988:	f000 f9ed 	bl	8001d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800198c:	2043      	movs	r0, #67	; 0x43
 800198e:	f000 fa06 	bl	8001d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3728      	adds	r7, #40	; 0x28
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020000 	.word	0x40020000

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 f89a 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <OTG_FS_IRQHandler+0x10>)
 80019fe:	f000 fc00 	bl	8002202 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000018c 	.word	0x2000018c

08001a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <SystemInit+0x20>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <SystemInit+0x20>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a34:	480d      	ldr	r0, [pc, #52]	; (8001a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a36:	490e      	ldr	r1, [pc, #56]	; (8001a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a4c:	4c0b      	ldr	r4, [pc, #44]	; (8001a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a5a:	f7ff ffd7 	bl	8001a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f003 fdf9 	bl	8005654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a62:	f7ff fbcb 	bl	80011fc <main>
  bx  lr    
 8001a66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a74:	08005708 	.word	0x08005708
  ldr r2, =_sbss
 8001a78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a7c:	20000494 	.word	0x20000494

08001a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <HAL_Init+0x40>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_Init+0x40>)
 8001a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_Init+0x40>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f000 f94f 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f808 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab8:	f7ff fde4 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x54>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x58>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f967 	bl	8001dba <HAL_SYSTICK_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00e      	b.n	8001b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d80a      	bhi.n	8001b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f000 f92f 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_InitTick+0x5c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000490 	.word	0x20000490

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000490 	.word	0x20000490

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff29 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff3e 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff31 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e16b      	b.n	80020c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 815a 	bne.w	80020c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d005      	beq.n	8001e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d130      	bne.n	8001e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	2203      	movs	r2, #3
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 0201 	and.w	r2, r3, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d017      	beq.n	8001ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d123      	bne.n	8001f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80b4 	beq.w	80020c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b60      	ldr	r3, [pc, #384]	; (80020e0 <HAL_GPIO_Init+0x30c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a5f      	ldr	r2, [pc, #380]	; (80020e0 <HAL_GPIO_Init+0x30c>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <HAL_GPIO_Init+0x30c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f76:	4a5b      	ldr	r2, [pc, #364]	; (80020e4 <HAL_GPIO_Init+0x310>)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_GPIO_Init+0x314>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02b      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a51      	ldr	r2, [pc, #324]	; (80020ec <HAL_GPIO_Init+0x318>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x222>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a50      	ldr	r2, [pc, #320]	; (80020f0 <HAL_GPIO_Init+0x31c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x21e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4f      	ldr	r2, [pc, #316]	; (80020f4 <HAL_GPIO_Init+0x320>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x21a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4e      	ldr	r2, [pc, #312]	; (80020f8 <HAL_GPIO_Init+0x324>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x216>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4d      	ldr	r2, [pc, #308]	; (80020fc <HAL_GPIO_Init+0x328>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x212>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	; (8002100 <HAL_GPIO_Init+0x32c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x20e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <HAL_GPIO_Init+0x330>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x20a>
 8001fda:	2307      	movs	r3, #7
 8001fdc:	e00e      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fde:	2308      	movs	r3, #8
 8001fe0:	e00c      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	e00a      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	e008      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fea:	2304      	movs	r3, #4
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e004      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_GPIO_Init+0x228>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f002 0203 	and.w	r2, r2, #3
 8002002:	0092      	lsls	r2, r2, #2
 8002004:	4093      	lsls	r3, r2
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800200c:	4935      	ldr	r1, [pc, #212]	; (80020e4 <HAL_GPIO_Init+0x310>)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800201a:	4b3b      	ldr	r3, [pc, #236]	; (8002108 <HAL_GPIO_Init+0x334>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800203e:	4a32      	ldr	r2, [pc, #200]	; (8002108 <HAL_GPIO_Init+0x334>)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002044:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_GPIO_Init+0x334>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002068:	4a27      	ldr	r2, [pc, #156]	; (8002108 <HAL_GPIO_Init+0x334>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <HAL_GPIO_Init+0x334>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002092:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HAL_GPIO_Init+0x334>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_GPIO_Init+0x334>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020bc:	4a12      	ldr	r2, [pc, #72]	; (8002108 <HAL_GPIO_Init+0x334>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3301      	adds	r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b0f      	cmp	r3, #15
 80020cc:	f67f ae90 	bls.w	8001df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40020400 	.word	0x40020400
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40021400 	.word	0x40021400
 8002100:	40021800 	.word	0x40021800
 8002104:	40021c00 	.word	0x40021c00
 8002108:	40013c00 	.word	0x40013c00

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002128:	e003      	b.n	8002132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	619a      	str	r2, [r3, #24]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800213e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002140:	b08f      	sub	sp, #60	; 0x3c
 8002142:	af0a      	add	r7, sp, #40	; 0x28
 8002144:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e054      	b.n	80021fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fbb8 	bl	80018e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f002 fee9 	bl	8004f66 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	687e      	ldr	r6, [r7, #4]
 800219c:	466d      	mov	r5, sp
 800219e:	f106 0410 	add.w	r4, r6, #16
 80021a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80021b2:	1d33      	adds	r3, r6, #4
 80021b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	f002 fe74 	bl	8004ea4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fee0 	bl	8004f88 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	687e      	ldr	r6, [r7, #4]
 80021d0:	466d      	mov	r5, sp
 80021d2:	f106 0410 	add.w	r4, r6, #16
 80021d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80021e6:	1d33      	adds	r3, r6, #4
 80021e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ea:	6838      	ldr	r0, [r7, #0]
 80021ec:	f003 f82a 	bl	8005244 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002202 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f002 ffd0 	bl	80051be <USB_GetMode>
 800221e:	4603      	mov	r3, r0
 8002220:	2b01      	cmp	r3, #1
 8002222:	f040 80f6 	bne.w	8002412 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f002 ffb4 	bl	8005198 <USB_ReadInterrupts>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80ec 	beq.w	8002410 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f002 ffab 	bl	8005198 <USB_ReadInterrupts>
 8002242:	4603      	mov	r3, r0
 8002244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800224c:	d104      	bne.n	8002258 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002256:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f002 ff9b 	bl	8005198 <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226c:	d104      	bne.n	8002278 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002276:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f002 ff8b 	bl	8005198 <USB_ReadInterrupts>
 8002282:	4603      	mov	r3, r0
 8002284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800228c:	d104      	bne.n	8002298 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002296:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f002 ff7b 	bl	8005198 <USB_ReadInterrupts>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d103      	bne.n	80022b4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2202      	movs	r2, #2
 80022b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 ff6d 	bl	8005198 <USB_ReadInterrupts>
 80022be:	4603      	mov	r3, r0
 80022c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022c8:	d11c      	bne.n	8002304 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022d2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10f      	bne.n	8002304 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022e4:	2110      	movs	r1, #16
 80022e6:	6938      	ldr	r0, [r7, #16]
 80022e8:	f002 fe9a 	bl	8005020 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80022ec:	6938      	ldr	r0, [r7, #16]
 80022ee:	f002 fecb 	bl	8005088 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2101      	movs	r1, #1
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 f863 	bl	80053c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f89e 	bl	8002440 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f002 ff45 	bl	8005198 <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002318:	d102      	bne.n	8002320 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f001 f84c 	bl	80033b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f002 ff37 	bl	8005198 <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b08      	cmp	r3, #8
 8002332:	d106      	bne.n	8002342 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f86f 	bl	8002418 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2208      	movs	r2, #8
 8002340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f002 ff26 	bl	8005198 <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b10      	cmp	r3, #16
 8002354:	d101      	bne.n	800235a <HAL_HCD_IRQHandler+0x158>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_HCD_IRQHandler+0x15a>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0210 	bic.w	r2, r2, #16
 800236e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 ff4f 	bl	8003214 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0210 	orr.w	r2, r2, #16
 8002384:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 ff04 	bl	8005198 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800239a:	d13a      	bne.n	8002412 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f003 f849 	bl	8005438 <USB_HC_ReadInterrupt>
 80023a6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	e025      	b.n	80023fa <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d018      	beq.n	80023f4 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d8:	d106      	bne.n	80023e8 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f859 	bl	8002498 <HCD_HC_IN_IRQHandler>
 80023e6:	e005      	b.n	80023f4 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fba7 	bl	8002b42 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	d3d4      	bcc.n	80023ae <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800240c:	615a      	str	r2, [r3, #20]
 800240e:	e000      	b.n	8002412 <HAL_HCD_IRQHandler+0x210>
      return;
 8002410:	bf00      	nop
    }
  }
}
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
 8002488:	4613      	mov	r3, r2
 800248a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	015a      	lsls	r2, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d11a      	bne.n	80024fe <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	461a      	mov	r2, r3
 80024d6:	2304      	movs	r3, #4
 80024d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3361      	adds	r3, #97	; 0x61
 80024e8:	2206      	movs	r2, #6
 80024ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 ffaf 	bl	800545a <USB_HC_Halt>
 80024fc:	e0af      	b.n	800265e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002514:	d11b      	bne.n	800254e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	461a      	mov	r2, r3
 8002524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002528:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3361      	adds	r3, #97	; 0x61
 8002538:	2207      	movs	r2, #7
 800253a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f002 ff87 	bl	800545a <USB_HC_Halt>
 800254c:	e087      	b.n	800265e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b20      	cmp	r3, #32
 8002562:	d109      	bne.n	8002578 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4413      	add	r3, r2
 800256c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002570:	461a      	mov	r2, r3
 8002572:	2320      	movs	r3, #32
 8002574:	6093      	str	r3, [r2, #8]
 8002576:	e072      	b.n	800265e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b08      	cmp	r3, #8
 800258c:	d11a      	bne.n	80025c4 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4413      	add	r3, r2
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	461a      	mov	r2, r3
 800259c:	2308      	movs	r3, #8
 800259e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3361      	adds	r3, #97	; 0x61
 80025ae:	2205      	movs	r2, #5
 80025b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 ff4c 	bl	800545a <USB_HC_Halt>
 80025c2:	e04c      	b.n	800265e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025da:	d11b      	bne.n	8002614 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	461a      	mov	r2, r3
 80025ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3361      	adds	r3, #97	; 0x61
 80025fe:	2208      	movs	r2, #8
 8002600:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f002 ff24 	bl	800545a <USB_HC_Halt>
 8002612:	e024      	b.n	800265e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b80      	cmp	r3, #128	; 0x80
 8002628:	d119      	bne.n	800265e <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	461a      	mov	r2, r3
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3361      	adds	r3, #97	; 0x61
 800264a:	2206      	movs	r2, #6
 800264c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f002 fefe 	bl	800545a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002674:	d112      	bne.n	800269c <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f002 feea 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	461a      	mov	r2, r3
 8002694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002698:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800269a:	e24e      	b.n	8002b3a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	f040 80df 	bne.w	8002872 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d019      	beq.n	80026f0 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3348      	adds	r3, #72	; 0x48
 80026ca:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	440b      	add	r3, r1
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	202c      	movs	r0, #44	; 0x2c
 80026e6:	fb00 f303 	mul.w	r3, r0, r3
 80026ea:	440b      	add	r3, r1
 80026ec:	3350      	adds	r3, #80	; 0x50
 80026ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3361      	adds	r3, #97	; 0x61
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	335c      	adds	r3, #92	; 0x5c
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	2301      	movs	r3, #1
 8002724:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	333f      	adds	r3, #63	; 0x3f
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	333f      	adds	r3, #63	; 0x3f
 8002748:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800274a:	2b02      	cmp	r3, #2
 800274c:	d111      	bne.n	8002772 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fe7e 	bl	800545a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2310      	movs	r3, #16
 800276e:	6093      	str	r3, [r2, #8]
 8002770:	e03a      	b.n	80027e8 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	333f      	adds	r3, #63	; 0x3f
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d009      	beq.n	800279a <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	333f      	adds	r3, #63	; 0x3f
 8002794:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002796:	2b01      	cmp	r3, #1
 8002798:	d126      	bne.n	80027e8 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027b8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3360      	adds	r3, #96	; 0x60
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	b2d9      	uxtb	r1, r3
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	202c      	movs	r0, #44	; 0x2c
 80027d6:	fb00 f303 	mul.w	r3, r0, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3360      	adds	r3, #96	; 0x60
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fe4a 	bl	800247c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d12b      	bne.n	8002848 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3348      	adds	r3, #72	; 0x48
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	202c      	movs	r0, #44	; 0x2c
 8002806:	fb00 f202 	mul.w	r2, r0, r2
 800280a:	440a      	add	r2, r1
 800280c:	3240      	adds	r2, #64	; 0x40
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	fbb3 f3f2 	udiv	r3, r3, r2
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 818e 	beq.w	8002b3a <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3354      	adds	r3, #84	; 0x54
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f083 0301 	eor.w	r3, r3, #1
 8002832:	b2d8      	uxtb	r0, r3
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3354      	adds	r3, #84	; 0x54
 8002842:	4602      	mov	r2, r0
 8002844:	701a      	strb	r2, [r3, #0]
}
 8002846:	e178      	b.n	8002b3a <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3354      	adds	r3, #84	; 0x54
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	f083 0301 	eor.w	r3, r3, #1
 800285c:	b2d8      	uxtb	r0, r3
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3354      	adds	r3, #84	; 0x54
 800286c:	4602      	mov	r2, r0
 800286e:	701a      	strb	r2, [r3, #0]
}
 8002870:	e163      	b.n	8002b3a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	f040 80f6 	bne.w	8002a76 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3361      	adds	r3, #97	; 0x61
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d109      	bne.n	80028b2 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3360      	adds	r3, #96	; 0x60
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e0c9      	b.n	8002a46 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	3361      	adds	r3, #97	; 0x61
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d109      	bne.n	80028da <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	3360      	adds	r3, #96	; 0x60
 80028d4:	2205      	movs	r2, #5
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	e0b5      	b.n	8002a46 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3361      	adds	r3, #97	; 0x61
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d009      	beq.n	8002902 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3361      	adds	r3, #97	; 0x61
 80028fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d150      	bne.n	80029a4 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	335c      	adds	r3, #92	; 0x5c
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	202c      	movs	r0, #44	; 0x2c
 800291a:	fb00 f303 	mul.w	r3, r0, r3
 800291e:	440b      	add	r3, r1
 8002920:	335c      	adds	r3, #92	; 0x5c
 8002922:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	335c      	adds	r3, #92	; 0x5c
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d912      	bls.n	800295e <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	335c      	adds	r3, #92	; 0x5c
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3360      	adds	r3, #96	; 0x60
 8002958:	2204      	movs	r2, #4
 800295a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800295c:	e073      	b.n	8002a46 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3360      	adds	r3, #96	; 0x60
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002986:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800298e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029a2:	e050      	b.n	8002a46 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3361      	adds	r3, #97	; 0x61
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d122      	bne.n	80029fe <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3360      	adds	r3, #96	; 0x60
 80029c6:	2202      	movs	r2, #2
 80029c8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029e0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029e8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	e023      	b.n	8002a46 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3361      	adds	r3, #97	; 0x61
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b07      	cmp	r3, #7
 8002a10:	d119      	bne.n	8002a46 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	335c      	adds	r3, #92	; 0x5c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	202c      	movs	r0, #44	; 0x2c
 8002a2a:	fb00 f303 	mul.w	r3, r0, r3
 8002a2e:	440b      	add	r3, r1
 8002a30:	335c      	adds	r3, #92	; 0x5c
 8002a32:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3360      	adds	r3, #96	; 0x60
 8002a42:	2204      	movs	r2, #4
 8002a44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	461a      	mov	r2, r3
 8002a54:	2302      	movs	r3, #2
 8002a56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	b2d9      	uxtb	r1, r3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	202c      	movs	r0, #44	; 0x2c
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3360      	adds	r3, #96	; 0x60
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fd04 	bl	800247c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a74:	e061      	b.n	8002b3a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d156      	bne.n	8002b3a <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	333f      	adds	r3, #63	; 0x3f
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d111      	bne.n	8002ac4 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	335c      	adds	r3, #92	; 0x5c
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fccc 	bl	800545a <USB_HC_Halt>
 8002ac2:	e031      	b.n	8002b28 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	333f      	adds	r3, #63	; 0x3f
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d009      	beq.n	8002aec <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	333f      	adds	r3, #63	; 0x3f
 8002ae6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d11d      	bne.n	8002b28 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	335c      	adds	r3, #92	; 0x5c
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d110      	bne.n	8002b28 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	212c      	movs	r1, #44	; 0x2c
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	3361      	adds	r3, #97	; 0x61
 8002b14:	2203      	movs	r2, #3
 8002b16:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 fc99 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	461a      	mov	r2, r3
 8002b36:	2310      	movs	r3, #16
 8002b38:	6093      	str	r3, [r2, #8]
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b088      	sub	sp, #32
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d11a      	bne.n	8002ba8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2304      	movs	r3, #4
 8002b82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3361      	adds	r3, #97	; 0x61
 8002b92:	2206      	movs	r2, #6
 8002b94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fc5a 	bl	800545a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002ba6:	e331      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d12e      	bne.n	8002c1c <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2320      	movs	r3, #32
 8002bce:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	333d      	adds	r3, #61	; 0x3d
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8313 	bne.w	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	333d      	adds	r3, #61	; 0x3d
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3360      	adds	r3, #96	; 0x60
 8002c06:	2202      	movs	r2, #2
 8002c08:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 fc20 	bl	800545a <USB_HC_Halt>
}
 8002c1a:	e2f7      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c32:	d112      	bne.n	8002c5a <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	461a      	mov	r2, r3
 8002c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c46:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f002 fc01 	bl	800545a <USB_HC_Halt>
}
 8002c58:	e2d8      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d140      	bne.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	335c      	adds	r3, #92	; 0x5c
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d111      	bne.n	8002cbc <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	333d      	adds	r3, #61	; 0x3d
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2340      	movs	r3, #64	; 0x40
 8002cba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2301      	movs	r3, #1
 8002ccc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3361      	adds	r3, #97	; 0x61
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 fbb5 	bl	800545a <USB_HC_Halt>
}
 8002cf0:	e28c      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d12c      	bne.n	8002d62 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3361      	adds	r3, #97	; 0x61
 8002d16:	2204      	movs	r2, #4
 8002d18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	333d      	adds	r3, #61	; 0x3d
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	335c      	adds	r3, #92	; 0x5c
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 fb86 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2340      	movs	r3, #64	; 0x40
 8002d5e:	6093      	str	r3, [r2, #8]
}
 8002d60:	e254      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d11a      	bne.n	8002dae <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	461a      	mov	r2, r3
 8002d86:	2308      	movs	r3, #8
 8002d88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3361      	adds	r3, #97	; 0x61
 8002d98:	2205      	movs	r2, #5
 8002d9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fb57 	bl	800545a <USB_HC_Halt>
}
 8002dac:	e22e      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d140      	bne.n	8002e46 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	335c      	adds	r3, #92	; 0x5c
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3361      	adds	r3, #97	; 0x61
 8002de4:	2203      	movs	r2, #3
 8002de6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	333d      	adds	r3, #61	; 0x3d
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d112      	bne.n	8002e22 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	333c      	adds	r3, #60	; 0x3c
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d108      	bne.n	8002e22 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	333d      	adds	r3, #61	; 0x3d
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 fb14 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2310      	movs	r3, #16
 8002e42:	6093      	str	r3, [r2, #8]
}
 8002e44:	e1e2      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d164      	bne.n	8002f26 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	2206      	movs	r2, #6
 8002e74:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 faea 	bl	800545a <USB_HC_Halt>
 8002e86:	e044      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	335c      	adds	r3, #92	; 0x5c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	202c      	movs	r0, #44	; 0x2c
 8002ea0:	fb00 f303 	mul.w	r3, r0, r3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	335c      	adds	r3, #92	; 0x5c
 8002ea8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d920      	bls.n	8002f00 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	335c      	adds	r3, #92	; 0x5c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3360      	adds	r3, #96	; 0x60
 8002ede:	2204      	movs	r2, #4
 8002ee0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	b2d9      	uxtb	r1, r3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	202c      	movs	r0, #44	; 0x2c
 8002eec:	fb00 f303 	mul.w	r3, r0, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3360      	adds	r3, #96	; 0x60
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff fabf 	bl	800247c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002efe:	e008      	b.n	8002f12 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3360      	adds	r3, #96	; 0x60
 8002f0e:	2202      	movs	r2, #2
 8002f10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	6093      	str	r3, [r2, #8]
}
 8002f24:	e172      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d11b      	bne.n	8002f76 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3361      	adds	r3, #97	; 0x61
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fa7d 	bl	800545a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f72:	6093      	str	r3, [r2, #8]
}
 8002f74:	e14a      	b.n	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	f040 813f 	bne.w	800320c <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3361      	adds	r3, #97	; 0x61
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d17d      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	3360      	adds	r3, #96	; 0x60
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	333f      	adds	r3, #63	; 0x3f
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d00a      	beq.n	8002fde <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	333f      	adds	r3, #63	; 0x3f
 8002fd6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	f040 8100 	bne.w	80031de <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d113      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3355      	adds	r3, #85	; 0x55
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f083 0301 	eor.w	r3, r3, #1
 8002ffa:	b2d8      	uxtb	r0, r3
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3355      	adds	r3, #85	; 0x55
 800300a:	4602      	mov	r2, r0
 800300c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b01      	cmp	r3, #1
 8003014:	f040 80e3 	bne.w	80031de <HCD_HC_OUT_IRQHandler+0x69c>
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	334c      	adds	r3, #76	; 0x4c
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80d8 	beq.w	80031de <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	334c      	adds	r3, #76	; 0x4c
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	202c      	movs	r0, #44	; 0x2c
 8003044:	fb00 f202 	mul.w	r2, r0, r2
 8003048:	440a      	add	r2, r1
 800304a:	3240      	adds	r2, #64	; 0x40
 800304c:	8812      	ldrh	r2, [r2, #0]
 800304e:	4413      	add	r3, r2
 8003050:	3b01      	subs	r3, #1
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	202c      	movs	r0, #44	; 0x2c
 8003058:	fb00 f202 	mul.w	r2, r0, r2
 800305c:	440a      	add	r2, r1
 800305e:	3240      	adds	r2, #64	; 0x40
 8003060:	8812      	ldrh	r2, [r2, #0]
 8003062:	fbb3 f3f2 	udiv	r3, r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80b5 	beq.w	80031de <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3355      	adds	r3, #85	; 0x55
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	f083 0301 	eor.w	r3, r3, #1
 8003088:	b2d8      	uxtb	r0, r3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3355      	adds	r3, #85	; 0x55
 8003098:	4602      	mov	r2, r0
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e09f      	b.n	80031de <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3361      	adds	r3, #97	; 0x61
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d109      	bne.n	80030c6 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3360      	adds	r3, #96	; 0x60
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e08b      	b.n	80031de <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3361      	adds	r3, #97	; 0x61
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d109      	bne.n	80030ee <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	3360      	adds	r3, #96	; 0x60
 80030e8:	2202      	movs	r2, #2
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e077      	b.n	80031de <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3361      	adds	r3, #97	; 0x61
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d109      	bne.n	8003116 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3360      	adds	r3, #96	; 0x60
 8003110:	2205      	movs	r2, #5
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e063      	b.n	80031de <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3361      	adds	r3, #97	; 0x61
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b06      	cmp	r3, #6
 8003128:	d009      	beq.n	800313e <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	3361      	adds	r3, #97	; 0x61
 8003138:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800313a:	2b08      	cmp	r3, #8
 800313c:	d14f      	bne.n	80031de <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	335c      	adds	r3, #92	; 0x5c
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	202c      	movs	r0, #44	; 0x2c
 8003156:	fb00 f303 	mul.w	r3, r0, r3
 800315a:	440b      	add	r3, r1
 800315c:	335c      	adds	r3, #92	; 0x5c
 800315e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	335c      	adds	r3, #92	; 0x5c
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d912      	bls.n	800319a <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	335c      	adds	r3, #92	; 0x5c
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3360      	adds	r3, #96	; 0x60
 8003194:	2204      	movs	r2, #4
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e021      	b.n	80031de <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3360      	adds	r3, #96	; 0x60
 80031a8:	2202      	movs	r2, #2
 80031aa:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031c2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031ca:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	461a      	mov	r2, r3
 80031ec:	2302      	movs	r3, #2
 80031ee:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	b2d9      	uxtb	r1, r3
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	202c      	movs	r0, #44	; 0x2c
 80031fa:	fb00 f303 	mul.w	r3, r0, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3360      	adds	r3, #96	; 0x60
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff f938 	bl	800247c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800320c:	bf00      	nop
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	0c5b      	lsrs	r3, r3, #17
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003248:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d004      	beq.n	800325a <HCD_RXQLVL_IRQHandler+0x46>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b05      	cmp	r3, #5
 8003254:	f000 80a9 	beq.w	80033aa <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003258:	e0aa      	b.n	80033b0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a6 	beq.w	80033ae <HCD_RXQLVL_IRQHandler+0x19a>
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3344      	adds	r3, #68	; 0x44
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 809b 	beq.w	80033ae <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	3350      	adds	r3, #80	; 0x50
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	441a      	add	r2, r3
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	202c      	movs	r0, #44	; 0x2c
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	440b      	add	r3, r1
 8003298:	334c      	adds	r3, #76	; 0x4c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d87a      	bhi.n	8003396 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	212c      	movs	r1, #44	; 0x2c
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3344      	adds	r3, #68	; 0x44
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	b292      	uxth	r2, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	f001 ff15 	bl	80050e8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3344      	adds	r3, #68	; 0x44
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	441a      	add	r2, r3
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	202c      	movs	r0, #44	; 0x2c
 80032d8:	fb00 f303 	mul.w	r3, r0, r3
 80032dc:	440b      	add	r3, r1
 80032de:	3344      	adds	r3, #68	; 0x44
 80032e0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3350      	adds	r3, #80	; 0x50
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	441a      	add	r2, r3
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	202c      	movs	r0, #44	; 0x2c
 80032fc:	fb00 f303 	mul.w	r3, r0, r3
 8003300:	440b      	add	r3, r1
 8003302:	3350      	adds	r3, #80	; 0x50
 8003304:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	0cdb      	lsrs	r3, r3, #19
 8003316:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3340      	adds	r3, #64	; 0x40
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4293      	cmp	r3, r2
 8003332:	d13c      	bne.n	80033ae <HCD_RXQLVL_IRQHandler+0x19a>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d039      	beq.n	80033ae <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003350:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003358:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003366:	461a      	mov	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	3354      	adds	r3, #84	; 0x54
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f083 0301 	eor.w	r3, r3, #1
 8003380:	b2d8      	uxtb	r0, r3
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3354      	adds	r3, #84	; 0x54
 8003390:	4602      	mov	r2, r0
 8003392:	701a      	strb	r2, [r3, #0]
      break;
 8003394:	e00b      	b.n	80033ae <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	3360      	adds	r3, #96	; 0x60
 80033a4:	2204      	movs	r2, #4
 80033a6:	701a      	strb	r2, [r3, #0]
      break;
 80033a8:	e001      	b.n	80033ae <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80033ae:	bf00      	nop
  }
}
 80033b0:	bf00      	nop
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d10b      	bne.n	8003408 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d102      	bne.n	8003400 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff f816 	bl	800242c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b08      	cmp	r3, #8
 8003410:	d132      	bne.n	8003478 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f043 0308 	orr.w	r3, r3, #8
 8003418:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d126      	bne.n	8003472 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d113      	bne.n	8003454 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003432:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003436:	d106      	bne.n	8003446 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2102      	movs	r1, #2
 800343e:	4618      	mov	r0, r3
 8003440:	f001 ffc0 	bl	80053c4 <USB_InitFSLSPClkSel>
 8003444:	e011      	b.n	800346a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f001 ffb9 	bl	80053c4 <USB_InitFSLSPClkSel>
 8003452:	e00a      	b.n	800346a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d106      	bne.n	800346a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003462:	461a      	mov	r2, r3
 8003464:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003468:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe fff2 	bl	8002454 <HAL_HCD_PortEnabled_Callback>
 8003470:	e002      	b.n	8003478 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe fff8 	bl	8002468 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b20      	cmp	r3, #32
 8003480:	d103      	bne.n	800348a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f043 0320 	orr.w	r3, r3, #32
 8003488:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003490:	461a      	mov	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	6013      	str	r3, [r2, #0]
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e267      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d075      	beq.n	80035aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034be:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d00c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ca:	4b85      	ldr	r3, [pc, #532]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d112      	bne.n	80034fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d6:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e2:	d10b      	bne.n	80034fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	4b7e      	ldr	r3, [pc, #504]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d05b      	beq.n	80035a8 <HAL_RCC_OscConfig+0x108>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d157      	bne.n	80035a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e242      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003504:	d106      	bne.n	8003514 <HAL_RCC_OscConfig+0x74>
 8003506:	4b76      	ldr	r3, [pc, #472]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a75      	ldr	r2, [pc, #468]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e01d      	b.n	8003550 <HAL_RCC_OscConfig+0xb0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x98>
 800351e:	4b70      	ldr	r3, [pc, #448]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6f      	ldr	r2, [pc, #444]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a6c      	ldr	r2, [pc, #432]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0xb0>
 8003538:	4b69      	ldr	r3, [pc, #420]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a68      	ldr	r2, [pc, #416]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 800353e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b66      	ldr	r3, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a65      	ldr	r2, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 800354a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fafa 	bl	8001b50 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003560:	f7fe faf6 	bl	8001b50 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e207      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0xc0>
 800357e:	e014      	b.n	80035aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fae6 	bl	8001b50 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fae2 	bl	8001b50 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e1f3      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	4b51      	ldr	r3, [pc, #324]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0xe8>
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d063      	beq.n	800367e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b6:	4b4a      	ldr	r3, [pc, #296]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c2:	4b47      	ldr	r3, [pc, #284]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d11c      	bne.n	8003608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ce:	4b44      	ldr	r3, [pc, #272]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d116      	bne.n	8003608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x152>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e1c7      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4937      	ldr	r1, [pc, #220]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	e03a      	b.n	800367e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003610:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <HAL_RCC_OscConfig+0x244>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fe fa9b 	bl	8001b50 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800361e:	f7fe fa97 	bl	8001b50 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1a8      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4925      	ldr	r1, [pc, #148]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]
 8003650:	e015      	b.n	800367e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_OscConfig+0x244>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fa7a 	bl	8001b50 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003660:	f7fe fa76 	bl	8001b50 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e187      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d036      	beq.n	80036f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d016      	beq.n	80036c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_RCC_OscConfig+0x248>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7fe fa5a 	bl	8001b50 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a0:	f7fe fa56 	bl	8001b50 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e167      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x240>)
 80036b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x200>
 80036be:	e01b      	b.n	80036f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_RCC_OscConfig+0x248>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7fe fa43 	bl	8001b50 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	e00e      	b.n	80036ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ce:	f7fe fa3f 	bl	8001b50 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d907      	bls.n	80036ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e150      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
 80036e0:	40023800 	.word	0x40023800
 80036e4:	42470000 	.word	0x42470000
 80036e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	4b88      	ldr	r3, [pc, #544]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ea      	bne.n	80036ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8097 	beq.w	8003834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370a:	4b81      	ldr	r3, [pc, #516]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	4b7d      	ldr	r3, [pc, #500]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4a7c      	ldr	r2, [pc, #496]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 8003720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003724:	6413      	str	r3, [r2, #64]	; 0x40
 8003726:	4b7a      	ldr	r3, [pc, #488]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b77      	ldr	r3, [pc, #476]	; (8003914 <HAL_RCC_OscConfig+0x474>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d118      	bne.n	8003774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003742:	4b74      	ldr	r3, [pc, #464]	; (8003914 <HAL_RCC_OscConfig+0x474>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a73      	ldr	r2, [pc, #460]	; (8003914 <HAL_RCC_OscConfig+0x474>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7fe f9ff 	bl	8001b50 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fe f9fb 	bl	8001b50 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e10c      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	4b6a      	ldr	r3, [pc, #424]	; (8003914 <HAL_RCC_OscConfig+0x474>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d106      	bne.n	800378a <HAL_RCC_OscConfig+0x2ea>
 800377c:	4b64      	ldr	r3, [pc, #400]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a63      	ldr	r2, [pc, #396]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
 8003788:	e01c      	b.n	80037c4 <HAL_RCC_OscConfig+0x324>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b05      	cmp	r3, #5
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x30c>
 8003792:	4b5f      	ldr	r3, [pc, #380]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a5e      	ldr	r2, [pc, #376]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	4b5c      	ldr	r3, [pc, #368]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	4a5b      	ldr	r2, [pc, #364]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6713      	str	r3, [r2, #112]	; 0x70
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0x324>
 80037ac:	4b58      	ldr	r3, [pc, #352]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	4a57      	ldr	r2, [pc, #348]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	6713      	str	r3, [r2, #112]	; 0x70
 80037b8:	4b55      	ldr	r3, [pc, #340]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	4a54      	ldr	r2, [pc, #336]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80037be:	f023 0304 	bic.w	r3, r3, #4
 80037c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fe f9c0 	bl	8001b50 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe f9bc 	bl	8001b50 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0cb      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ea:	4b49      	ldr	r3, [pc, #292]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ee      	beq.n	80037d4 <HAL_RCC_OscConfig+0x334>
 80037f6:	e014      	b.n	8003822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f8:	f7fe f9aa 	bl	8001b50 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fe f9a6 	bl	8001b50 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0b5      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003816:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ee      	bne.n	8003800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003822:	7dfb      	ldrb	r3, [r7, #23]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d105      	bne.n	8003834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003828:	4b39      	ldr	r3, [pc, #228]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	4a38      	ldr	r2, [pc, #224]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 800382e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003832:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a1 	beq.w	8003980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800383e:	4b34      	ldr	r3, [pc, #208]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b08      	cmp	r3, #8
 8003848:	d05c      	beq.n	8003904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d141      	bne.n	80038d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003852:	4b31      	ldr	r3, [pc, #196]	; (8003918 <HAL_RCC_OscConfig+0x478>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe f97a 	bl	8001b50 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003860:	f7fe f976 	bl	8001b50 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e087      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69da      	ldr	r2, [r3, #28]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	019b      	lsls	r3, r3, #6
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	3b01      	subs	r3, #1
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	061b      	lsls	r3, r3, #24
 80038a2:	491b      	ldr	r1, [pc, #108]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x478>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fe f94f 	bl	8001b50 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fe f94b 	bl	8001b50 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e05c      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x416>
 80038d4:	e054      	b.n	8003980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_RCC_OscConfig+0x478>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fe f938 	bl	8001b50 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fe f934 	bl	8001b50 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e045      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <HAL_RCC_OscConfig+0x470>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x444>
 8003902:	e03d      	b.n	8003980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e038      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
 8003910:	40023800 	.word	0x40023800
 8003914:	40007000 	.word	0x40007000
 8003918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCC_OscConfig+0x4ec>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d028      	beq.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d121      	bne.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d11a      	bne.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003954:	4293      	cmp	r3, r2
 8003956:	d111      	bne.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	3b01      	subs	r3, #1
 8003966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d107      	bne.n	800397c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0cc      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b68      	ldr	r3, [pc, #416]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d90c      	bls.n	80039cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b65      	ldr	r3, [pc, #404]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0b8      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e4:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a58      	ldr	r2, [pc, #352]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039fc:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a52      	ldr	r2, [pc, #328]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	494d      	ldr	r1, [pc, #308]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d044      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d119      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e07f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e067      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6e:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f023 0203 	bic.w	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4934      	ldr	r1, [pc, #208]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a80:	f7fe f866 	bl	8001b50 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7fe f862 	bl	8001b50 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e04f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 020c 	and.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1eb      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d20c      	bcs.n	8003ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e032      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4916      	ldr	r1, [pc, #88]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	490e      	ldr	r1, [pc, #56]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b16:	f000 f821 	bl	8003b5c <HAL_RCC_GetSysClockFreq>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	490a      	ldr	r1, [pc, #40]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	5ccb      	ldrb	r3, [r1, r3]
 8003b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd ffc6 	bl	8001ac8 <HAL_InitTick>

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023c00 	.word	0x40023c00
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	080056e0 	.word	0x080056e0
 8003b54:	20000000 	.word	0x20000000
 8003b58:	20000004 	.word	0x20000004

08003b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b60:	b094      	sub	sp, #80	; 0x50
 8003b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	647b      	str	r3, [r7, #68]	; 0x44
 8003b68:	2300      	movs	r3, #0
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b74:	4b79      	ldr	r3, [pc, #484]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d00d      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x40>
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	f200 80e1 	bhi.w	8003d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x34>
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b8e:	e0db      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b73      	ldr	r3, [pc, #460]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b94:	e0db      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b96:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b9a:	e0d8      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b9c:	4b6f      	ldr	r3, [pc, #444]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba6:	4b6d      	ldr	r3, [pc, #436]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d063      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb2:	4b6a      	ldr	r3, [pc, #424]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	099b      	lsrs	r3, r3, #6
 8003bb8:	2200      	movs	r2, #0
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bce:	4622      	mov	r2, r4
 8003bd0:	462b      	mov	r3, r5
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	f04f 0100 	mov.w	r1, #0
 8003bda:	0159      	lsls	r1, r3, #5
 8003bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003be0:	0150      	lsls	r0, r2, #5
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4621      	mov	r1, r4
 8003be8:	1a51      	subs	r1, r2, r1
 8003bea:	6139      	str	r1, [r7, #16]
 8003bec:	4629      	mov	r1, r5
 8003bee:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c00:	4659      	mov	r1, fp
 8003c02:	018b      	lsls	r3, r1, #6
 8003c04:	4651      	mov	r1, sl
 8003c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c0a:	4651      	mov	r1, sl
 8003c0c:	018a      	lsls	r2, r1, #6
 8003c0e:	4651      	mov	r1, sl
 8003c10:	ebb2 0801 	subs.w	r8, r2, r1
 8003c14:	4659      	mov	r1, fp
 8003c16:	eb63 0901 	sbc.w	r9, r3, r1
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c2e:	4690      	mov	r8, r2
 8003c30:	4699      	mov	r9, r3
 8003c32:	4623      	mov	r3, r4
 8003c34:	eb18 0303 	adds.w	r3, r8, r3
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	462b      	mov	r3, r5
 8003c3c:	eb49 0303 	adc.w	r3, r9, r3
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c4e:	4629      	mov	r1, r5
 8003c50:	024b      	lsls	r3, r1, #9
 8003c52:	4621      	mov	r1, r4
 8003c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c58:	4621      	mov	r1, r4
 8003c5a:	024a      	lsls	r2, r1, #9
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c62:	2200      	movs	r2, #0
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c6c:	f7fc feca 	bl	8000a04 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4613      	mov	r3, r2
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c78:	e058      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7a:	4b38      	ldr	r3, [pc, #224]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	099b      	lsrs	r3, r3, #6
 8003c80:	2200      	movs	r2, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	4611      	mov	r1, r2
 8003c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c8a:	623b      	str	r3, [r7, #32]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c94:	4642      	mov	r2, r8
 8003c96:	464b      	mov	r3, r9
 8003c98:	f04f 0000 	mov.w	r0, #0
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	0159      	lsls	r1, r3, #5
 8003ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca6:	0150      	lsls	r0, r2, #5
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4641      	mov	r1, r8
 8003cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8003cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	00eb      	lsls	r3, r5, #3
 8003cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce2:	00e2      	lsls	r2, r4, #3
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	461d      	mov	r5, r3
 8003ce8:	4643      	mov	r3, r8
 8003cea:	18e3      	adds	r3, r4, r3
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	464b      	mov	r3, r9
 8003cf0:	eb45 0303 	adc.w	r3, r5, r3
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d02:	4629      	mov	r1, r5
 8003d04:	028b      	lsls	r3, r1, #10
 8003d06:	4621      	mov	r1, r4
 8003d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	028a      	lsls	r2, r1, #10
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d16:	2200      	movs	r2, #0
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	61fa      	str	r2, [r7, #28]
 8003d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d20:	f7fc fe70 	bl	8000a04 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	3301      	adds	r3, #1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d46:	e002      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3750      	adds	r7, #80	; 0x50
 8003d54:	46bd      	mov	sp, r7
 8003d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	00f42400 	.word	0x00f42400
 8003d64:	007a1200 	.word	0x007a1200

08003d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000000 	.word	0x20000000

08003d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d84:	f7ff fff0 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0a9b      	lsrs	r3, r3, #10
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4903      	ldr	r1, [pc, #12]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	080056f0 	.word	0x080056f0

08003da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dac:	f7ff ffdc 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0b5b      	lsrs	r3, r3, #13
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	080056f0 	.word	0x080056f0

08003dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07b      	b.n	8003eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d108      	bne.n	8003dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df2:	d009      	beq.n	8003e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	61da      	str	r2, [r3, #28]
 8003dfa:	e005      	b.n	8003e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd fc56 	bl	80016d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	ea42 0103 	orr.w	r1, r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0104 	and.w	r1, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f003 0210 	and.w	r2, r3, #16
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b088      	sub	sp, #32
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	603b      	str	r3, [r7, #0]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_SPI_Transmit+0x22>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e126      	b.n	8004152 <HAL_SPI_Transmit+0x270>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f0c:	f7fd fe20 	bl	8001b50 <HAL_GetTick>
 8003f10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f12:	88fb      	ldrh	r3, [r7, #6]
 8003f14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d002      	beq.n	8003f28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
 8003f24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f26:	e10b      	b.n	8004140 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Transmit+0x52>
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f38:	e102      	b.n	8004140 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f80:	d10f      	bne.n	8003fa2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d007      	beq.n	8003fc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc8:	d14b      	bne.n	8004062 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_SPI_Transmit+0xf6>
 8003fd2:	8afb      	ldrh	r3, [r7, #22]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d13e      	bne.n	8004056 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ffc:	e02b      	b.n	8004056 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b02      	cmp	r3, #2
 800400a:	d112      	bne.n	8004032 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	1c9a      	adds	r2, r3, #2
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004030:	e011      	b.n	8004056 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004032:	f7fd fd8d 	bl	8001b50 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d803      	bhi.n	800404a <HAL_SPI_Transmit+0x168>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d102      	bne.n	8004050 <HAL_SPI_Transmit+0x16e>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d102      	bne.n	8004056 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004054:	e074      	b.n	8004140 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ce      	bne.n	8003ffe <HAL_SPI_Transmit+0x11c>
 8004060:	e04c      	b.n	80040fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_SPI_Transmit+0x18e>
 800406a:	8afb      	ldrh	r3, [r7, #22]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d140      	bne.n	80040f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004096:	e02c      	b.n	80040f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d113      	bne.n	80040ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	7812      	ldrb	r2, [r2, #0]
 80040b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80040cc:	e011      	b.n	80040f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ce:	f7fd fd3f 	bl	8001b50 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d803      	bhi.n	80040e6 <HAL_SPI_Transmit+0x204>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d102      	bne.n	80040ec <HAL_SPI_Transmit+0x20a>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040f0:	e026      	b.n	8004140 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1cd      	bne.n	8004098 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fbcb 	bl	800489c <SPI_EndRxTxTransaction>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e000      	b.n	8004140 <HAL_SPI_Transmit+0x25e>
  }

error:
 800413e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004150:	7ffb      	ldrb	r3, [r7, #31]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b088      	sub	sp, #32
 800415e:	af02      	add	r7, sp, #8
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4613      	mov	r3, r2
 8004168:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004176:	d112      	bne.n	800419e <HAL_SPI_Receive+0x44>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10e      	bne.n	800419e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2204      	movs	r2, #4
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004188:	88fa      	ldrh	r2, [r7, #6]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	4613      	mov	r3, r2
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f8f1 	bl	800437c <HAL_SPI_TransmitReceive>
 800419a:	4603      	mov	r3, r0
 800419c:	e0ea      	b.n	8004374 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_SPI_Receive+0x52>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0e3      	b.n	8004374 <HAL_SPI_Receive+0x21a>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b4:	f7fd fccc 	bl	8001b50 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d002      	beq.n	80041cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
 80041c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041ca:	e0ca      	b.n	8004362 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_SPI_Receive+0x7e>
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041dc:	e0c1      	b.n	8004362 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2204      	movs	r2, #4
 80041e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004224:	d10f      	bne.n	8004246 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004234:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004244:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d007      	beq.n	8004264 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004262:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d162      	bne.n	8004332 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800426c:	e02e      	b.n	80042cc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d115      	bne.n	80042a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f103 020c 	add.w	r2, r3, #12
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042a6:	e011      	b.n	80042cc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042a8:	f7fd fc52 	bl	8001b50 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d803      	bhi.n	80042c0 <HAL_SPI_Receive+0x166>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d102      	bne.n	80042c6 <HAL_SPI_Receive+0x16c>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042ca:	e04a      	b.n	8004362 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1cb      	bne.n	800426e <HAL_SPI_Receive+0x114>
 80042d6:	e031      	b.n	800433c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d113      	bne.n	800430e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	b292      	uxth	r2, r2
 80042f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	1c9a      	adds	r2, r3, #2
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800430c:	e011      	b.n	8004332 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800430e:	f7fd fc1f 	bl	8001b50 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d803      	bhi.n	8004326 <HAL_SPI_Receive+0x1cc>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d102      	bne.n	800432c <HAL_SPI_Receive+0x1d2>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004330:	e017      	b.n	8004362 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1cd      	bne.n	80042d8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fa45 	bl	80047d0 <SPI_EndRxTransaction>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
 800435e:	e000      	b.n	8004362 <HAL_SPI_Receive+0x208>
  }

error :
 8004360:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004372:	7dfb      	ldrb	r3, [r7, #23]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08c      	sub	sp, #48	; 0x30
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800438a:	2301      	movs	r3, #1
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x26>
 800439e:	2302      	movs	r3, #2
 80043a0:	e18a      	b.n	80046b8 <HAL_SPI_TransmitReceive+0x33c>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043aa:	f7fd fbd1 	bl	8001b50 <HAL_GetTick>
 80043ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043c0:	887b      	ldrh	r3, [r7, #2]
 80043c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d00f      	beq.n	80043ec <HAL_SPI_TransmitReceive+0x70>
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d2:	d107      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x68>
 80043dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d003      	beq.n	80043ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
 80043e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043ea:	e15b      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x82>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x82>
 80043f8:	887b      	ldrh	r3, [r7, #2]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004404:	e14e      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b04      	cmp	r3, #4
 8004410:	d003      	beq.n	800441a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2205      	movs	r2, #5
 8004416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	887a      	ldrh	r2, [r7, #2]
 800442a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	887a      	ldrh	r2, [r7, #2]
 8004430:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	887a      	ldrh	r2, [r7, #2]
 8004442:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445a:	2b40      	cmp	r3, #64	; 0x40
 800445c:	d007      	beq.n	800446e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800446c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004476:	d178      	bne.n	800456a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_SPI_TransmitReceive+0x10a>
 8004480:	8b7b      	ldrh	r3, [r7, #26]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d166      	bne.n	8004554 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	881a      	ldrh	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	1c9a      	adds	r2, r3, #2
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044aa:	e053      	b.n	8004554 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d11b      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x176>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d016      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x176>
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d113      	bne.n	80044f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	881a      	ldrh	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	1c9a      	adds	r2, r3, #2
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d119      	bne.n	8004534 <HAL_SPI_TransmitReceive+0x1b8>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d014      	beq.n	8004534 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	b292      	uxth	r2, r2
 8004516:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	1c9a      	adds	r2, r3, #2
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004530:	2301      	movs	r3, #1
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004534:	f7fd fb0c 	bl	8001b50 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004540:	429a      	cmp	r2, r3
 8004542:	d807      	bhi.n	8004554 <HAL_SPI_TransmitReceive+0x1d8>
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d003      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004552:	e0a7      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1a6      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x130>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1a1      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x130>
 8004568:	e07c      	b.n	8004664 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x1fc>
 8004572:	8b7b      	ldrh	r3, [r7, #26]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d16b      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	7812      	ldrb	r2, [r2, #0]
 8004584:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800459e:	e057      	b.n	8004650 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d11c      	bne.n	80045e8 <HAL_SPI_TransmitReceive+0x26c>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d017      	beq.n	80045e8 <HAL_SPI_TransmitReceive+0x26c>
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d114      	bne.n	80045e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	7812      	ldrb	r2, [r2, #0]
 80045ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d119      	bne.n	800462a <HAL_SPI_TransmitReceive+0x2ae>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d014      	beq.n	800462a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004626:	2301      	movs	r3, #1
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800462a:	f7fd fa91 	bl	8001b50 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004636:	429a      	cmp	r2, r3
 8004638:	d803      	bhi.n	8004642 <HAL_SPI_TransmitReceive+0x2c6>
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d102      	bne.n	8004648 <HAL_SPI_TransmitReceive+0x2cc>
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d103      	bne.n	8004650 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800464e:	e029      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1a2      	bne.n	80045a0 <HAL_SPI_TransmitReceive+0x224>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d19d      	bne.n	80045a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f917 	bl	800489c <SPI_EndRxTxTransaction>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004680:	e010      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	e000      	b.n	80046a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3730      	adds	r7, #48	; 0x30
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d0:	f7fd fa3e 	bl	8001b50 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	4413      	add	r3, r2
 80046de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e0:	f7fd fa36 	bl	8001b50 <HAL_GetTick>
 80046e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046e6:	4b39      	ldr	r3, [pc, #228]	; (80047cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	015b      	lsls	r3, r3, #5
 80046ec:	0d1b      	lsrs	r3, r3, #20
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046f6:	e054      	b.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d050      	beq.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004700:	f7fd fa26 	bl	8001b50 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	429a      	cmp	r2, r3
 800470e:	d902      	bls.n	8004716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d13d      	bne.n	8004792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472e:	d111      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004738:	d004      	beq.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004742:	d107      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d10f      	bne.n	800477e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800477c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e017      	b.n	80047c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	3b01      	subs	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d19b      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000000 	.word	0x20000000

080047d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e4:	d111      	bne.n	800480a <SPI_EndRxTransaction+0x3a>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ee:	d004      	beq.n	80047fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f8:	d107      	bne.n	800480a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004808:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004812:	d12a      	bne.n	800486a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481c:	d012      	beq.n	8004844 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2200      	movs	r2, #0
 8004826:	2180      	movs	r1, #128	; 0x80
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f7ff ff49 	bl	80046c0 <SPI_WaitFlagStateUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02d      	beq.n	8004890 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e026      	b.n	8004892 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	2101      	movs	r1, #1
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff ff36 	bl	80046c0 <SPI_WaitFlagStateUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01a      	beq.n	8004890 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e013      	b.n	8004892 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	2101      	movs	r1, #1
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff ff23 	bl	80046c0 <SPI_WaitFlagStateUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e000      	b.n	8004892 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <SPI_EndRxTxTransaction+0x7c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1b      	ldr	r2, [pc, #108]	; (800491c <SPI_EndRxTxTransaction+0x80>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0d5b      	lsrs	r3, r3, #21
 80048b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c6:	d112      	bne.n	80048ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2200      	movs	r2, #0
 80048d0:	2180      	movs	r1, #128	; 0x80
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f7ff fef4 	bl	80046c0 <SPI_WaitFlagStateUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	f043 0220 	orr.w	r2, r3, #32
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e00f      	b.n	800490e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d0f2      	beq.n	80048ee <SPI_EndRxTxTransaction+0x52>
 8004908:	e000      	b.n	800490c <SPI_EndRxTxTransaction+0x70>
        break;
 800490a:	bf00      	nop
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000000 	.word	0x20000000
 800491c:	165e9f81 	.word	0x165e9f81

08004920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e03f      	b.n	80049b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc ff0c 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2224      	movs	r2, #36	; 0x24
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f829 	bl	80049bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695a      	ldr	r2, [r3, #20]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c0:	b0c0      	sub	sp, #256	; 0x100
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	68d9      	ldr	r1, [r3, #12]
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	ea40 0301 	orr.w	r3, r0, r1
 80049e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a14:	f021 010c 	bic.w	r1, r1, #12
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a22:	430b      	orrs	r3, r1
 8004a24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a36:	6999      	ldr	r1, [r3, #24]
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	ea40 0301 	orr.w	r3, r0, r1
 8004a42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b8f      	ldr	r3, [pc, #572]	; (8004c88 <UART_SetConfig+0x2cc>)
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d005      	beq.n	8004a5c <UART_SetConfig+0xa0>
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b8d      	ldr	r3, [pc, #564]	; (8004c8c <UART_SetConfig+0x2d0>)
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d104      	bne.n	8004a66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a5c:	f7ff f9a4 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 8004a60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a64:	e003      	b.n	8004a6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a66:	f7ff f98b 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 8004a6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a78:	f040 810c 	bne.w	8004c94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	1891      	adds	r1, r2, r2
 8004a94:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a96:	415b      	adcs	r3, r3
 8004a98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	eb12 0801 	adds.w	r8, r2, r1
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	eb43 0901 	adc.w	r9, r3, r1
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004abe:	4690      	mov	r8, r2
 8004ac0:	4699      	mov	r9, r3
 8004ac2:	4623      	mov	r3, r4
 8004ac4:	eb18 0303 	adds.w	r3, r8, r3
 8004ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004acc:	462b      	mov	r3, r5
 8004ace:	eb49 0303 	adc.w	r3, r9, r3
 8004ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ae2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ae6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004aea:	460b      	mov	r3, r1
 8004aec:	18db      	adds	r3, r3, r3
 8004aee:	653b      	str	r3, [r7, #80]	; 0x50
 8004af0:	4613      	mov	r3, r2
 8004af2:	eb42 0303 	adc.w	r3, r2, r3
 8004af6:	657b      	str	r3, [r7, #84]	; 0x54
 8004af8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004afc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b00:	f7fb ff80 	bl	8000a04 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4b61      	ldr	r3, [pc, #388]	; (8004c90 <UART_SetConfig+0x2d4>)
 8004b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	011c      	lsls	r4, r3, #4
 8004b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b24:	4642      	mov	r2, r8
 8004b26:	464b      	mov	r3, r9
 8004b28:	1891      	adds	r1, r2, r2
 8004b2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b2c:	415b      	adcs	r3, r3
 8004b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b34:	4641      	mov	r1, r8
 8004b36:	eb12 0a01 	adds.w	sl, r2, r1
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b54:	4692      	mov	sl, r2
 8004b56:	469b      	mov	fp, r3
 8004b58:	4643      	mov	r3, r8
 8004b5a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b62:	464b      	mov	r3, r9
 8004b64:	eb4b 0303 	adc.w	r3, fp, r3
 8004b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b80:	460b      	mov	r3, r1
 8004b82:	18db      	adds	r3, r3, r3
 8004b84:	643b      	str	r3, [r7, #64]	; 0x40
 8004b86:	4613      	mov	r3, r2
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b96:	f7fb ff35 	bl	8000a04 <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4b3b      	ldr	r3, [pc, #236]	; (8004c90 <UART_SetConfig+0x2d4>)
 8004ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2264      	movs	r2, #100	; 0x64
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	1acb      	subs	r3, r1, r3
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bb6:	4b36      	ldr	r3, [pc, #216]	; (8004c90 <UART_SetConfig+0x2d4>)
 8004bb8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bc4:	441c      	add	r4, r3
 8004bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bd8:	4642      	mov	r2, r8
 8004bda:	464b      	mov	r3, r9
 8004bdc:	1891      	adds	r1, r2, r2
 8004bde:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be0:	415b      	adcs	r3, r3
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004be8:	4641      	mov	r1, r8
 8004bea:	1851      	adds	r1, r2, r1
 8004bec:	6339      	str	r1, [r7, #48]	; 0x30
 8004bee:	4649      	mov	r1, r9
 8004bf0:	414b      	adcs	r3, r1
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c00:	4659      	mov	r1, fp
 8004c02:	00cb      	lsls	r3, r1, #3
 8004c04:	4651      	mov	r1, sl
 8004c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	00ca      	lsls	r2, r1, #3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	4642      	mov	r2, r8
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	460a      	mov	r2, r1
 8004c20:	eb42 0303 	adc.w	r3, r2, r3
 8004c24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	18db      	adds	r3, r3, r3
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c42:	4613      	mov	r3, r2
 8004c44:	eb42 0303 	adc.w	r3, r2, r3
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c52:	f7fb fed7 	bl	8000a04 <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <UART_SetConfig+0x2d4>)
 8004c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	2164      	movs	r1, #100	; 0x64
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	3332      	adds	r3, #50	; 0x32
 8004c6e:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <UART_SetConfig+0x2d4>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	f003 0207 	and.w	r2, r3, #7
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4422      	add	r2, r4
 8004c82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c84:	e105      	b.n	8004e92 <UART_SetConfig+0x4d6>
 8004c86:	bf00      	nop
 8004c88:	40011000 	.word	0x40011000
 8004c8c:	40011400 	.word	0x40011400
 8004c90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ca2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ca6:	4642      	mov	r2, r8
 8004ca8:	464b      	mov	r3, r9
 8004caa:	1891      	adds	r1, r2, r2
 8004cac:	6239      	str	r1, [r7, #32]
 8004cae:	415b      	adcs	r3, r3
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	1854      	adds	r4, r2, r1
 8004cba:	4649      	mov	r1, r9
 8004cbc:	eb43 0501 	adc.w	r5, r3, r1
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	00eb      	lsls	r3, r5, #3
 8004cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cce:	00e2      	lsls	r2, r4, #3
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	4643      	mov	r3, r8
 8004cd6:	18e3      	adds	r3, r4, r3
 8004cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cdc:	464b      	mov	r3, r9
 8004cde:	eb45 0303 	adc.w	r3, r5, r3
 8004ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d02:	4629      	mov	r1, r5
 8004d04:	008b      	lsls	r3, r1, #2
 8004d06:	4621      	mov	r1, r4
 8004d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	008a      	lsls	r2, r1, #2
 8004d10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d14:	f7fb fe76 	bl	8000a04 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4b60      	ldr	r3, [pc, #384]	; (8004ea0 <UART_SetConfig+0x4e4>)
 8004d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	011c      	lsls	r4, r3, #4
 8004d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	1891      	adds	r1, r2, r2
 8004d3e:	61b9      	str	r1, [r7, #24]
 8004d40:	415b      	adcs	r3, r3
 8004d42:	61fb      	str	r3, [r7, #28]
 8004d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d48:	4641      	mov	r1, r8
 8004d4a:	1851      	adds	r1, r2, r1
 8004d4c:	6139      	str	r1, [r7, #16]
 8004d4e:	4649      	mov	r1, r9
 8004d50:	414b      	adcs	r3, r1
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d60:	4659      	mov	r1, fp
 8004d62:	00cb      	lsls	r3, r1, #3
 8004d64:	4651      	mov	r1, sl
 8004d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	00ca      	lsls	r2, r1, #3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4619      	mov	r1, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	4642      	mov	r2, r8
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	460a      	mov	r2, r1
 8004d80:	eb42 0303 	adc.w	r3, r2, r3
 8004d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004da0:	4649      	mov	r1, r9
 8004da2:	008b      	lsls	r3, r1, #2
 8004da4:	4641      	mov	r1, r8
 8004da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004daa:	4641      	mov	r1, r8
 8004dac:	008a      	lsls	r2, r1, #2
 8004dae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004db2:	f7fb fe27 	bl	8000a04 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <UART_SetConfig+0x4e4>)
 8004dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	2164      	movs	r1, #100	; 0x64
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	3332      	adds	r3, #50	; 0x32
 8004dce:	4a34      	ldr	r2, [pc, #208]	; (8004ea0 <UART_SetConfig+0x4e4>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dda:	441c      	add	r4, r3
 8004ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de0:	2200      	movs	r2, #0
 8004de2:	673b      	str	r3, [r7, #112]	; 0x70
 8004de4:	677a      	str	r2, [r7, #116]	; 0x74
 8004de6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dea:	4642      	mov	r2, r8
 8004dec:	464b      	mov	r3, r9
 8004dee:	1891      	adds	r1, r2, r2
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	415b      	adcs	r3, r3
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dfa:	4641      	mov	r1, r8
 8004dfc:	1851      	adds	r1, r2, r1
 8004dfe:	6039      	str	r1, [r7, #0]
 8004e00:	4649      	mov	r1, r9
 8004e02:	414b      	adcs	r3, r1
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e12:	4659      	mov	r1, fp
 8004e14:	00cb      	lsls	r3, r1, #3
 8004e16:	4651      	mov	r1, sl
 8004e18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	00ca      	lsls	r2, r1, #3
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	4603      	mov	r3, r0
 8004e26:	4642      	mov	r2, r8
 8004e28:	189b      	adds	r3, r3, r2
 8004e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	460a      	mov	r2, r1
 8004e30:	eb42 0303 	adc.w	r3, r2, r3
 8004e34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e40:	667a      	str	r2, [r7, #100]	; 0x64
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e4e:	4649      	mov	r1, r9
 8004e50:	008b      	lsls	r3, r1, #2
 8004e52:	4641      	mov	r1, r8
 8004e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e58:	4641      	mov	r1, r8
 8004e5a:	008a      	lsls	r2, r1, #2
 8004e5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e60:	f7fb fdd0 	bl	8000a04 <__aeabi_uldivmod>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <UART_SetConfig+0x4e4>)
 8004e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	2164      	movs	r1, #100	; 0x64
 8004e72:	fb01 f303 	mul.w	r3, r1, r3
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	3332      	adds	r3, #50	; 0x32
 8004e7c:	4a08      	ldr	r2, [pc, #32]	; (8004ea0 <UART_SetConfig+0x4e4>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4422      	add	r2, r4
 8004e90:	609a      	str	r2, [r3, #8]
}
 8004e92:	bf00      	nop
 8004e94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9e:	bf00      	nop
 8004ea0:	51eb851f 	.word	0x51eb851f

08004ea4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	f107 001c 	add.w	r0, r7, #28
 8004eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d122      	bne.n	8004f02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d105      	bne.n	8004ef6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f970 	bl	80051dc <USB_CoreReset>
 8004efc:	4603      	mov	r3, r0
 8004efe:	73fb      	strb	r3, [r7, #15]
 8004f00:	e01a      	b.n	8004f38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f964 	bl	80051dc <USB_CoreReset>
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
 8004f2a:	e005      	b.n	8004f38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d10b      	bne.n	8004f56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f043 0206 	orr.w	r2, r3, #6
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f043 0220 	orr.w	r2, r3, #32
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f62:	b004      	add	sp, #16
 8004f64:	4770      	bx	lr

08004f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d115      	bne.n	8004fd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f7fc fdd6 	bl	8001b68 <HAL_Delay>
      ms++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8fb 	bl	80051be <USB_GetMode>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d01e      	beq.n	800500c <USB_SetCurrentMode+0x84>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b31      	cmp	r3, #49	; 0x31
 8004fd2:	d9f0      	bls.n	8004fb6 <USB_SetCurrentMode+0x2e>
 8004fd4:	e01a      	b.n	800500c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d115      	bne.n	8005008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fe8:	2001      	movs	r0, #1
 8004fea:	f7fc fdbd 	bl	8001b68 <HAL_Delay>
      ms++;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8e2 	bl	80051be <USB_GetMode>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <USB_SetCurrentMode+0x84>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b31      	cmp	r3, #49	; 0x31
 8005004:	d9f0      	bls.n	8004fe8 <USB_SetCurrentMode+0x60>
 8005006:	e001      	b.n	800500c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e005      	b.n	8005018 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b32      	cmp	r3, #50	; 0x32
 8005010:	d101      	bne.n	8005016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a13      	ldr	r2, [pc, #76]	; (8005084 <USB_FlushTxFifo+0x64>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e01b      	b.n	8005078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	daf2      	bge.n	800502e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	019b      	lsls	r3, r3, #6
 8005050:	f043 0220 	orr.w	r2, r3, #32
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a08      	ldr	r2, [pc, #32]	; (8005084 <USB_FlushTxFifo+0x64>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e006      	b.n	8005078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b20      	cmp	r3, #32
 8005074:	d0f0      	beq.n	8005058 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	00030d40 	.word	0x00030d40

08005088 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <USB_FlushRxFifo+0x5c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e018      	b.n	80050d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	daf2      	bge.n	8005094 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2210      	movs	r2, #16
 80050b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <USB_FlushRxFifo+0x5c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e006      	b.n	80050d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b10      	cmp	r3, #16
 80050d4:	d0f0      	beq.n	80050b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	00030d40 	.word	0x00030d40

080050e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b08b      	sub	sp, #44	; 0x2c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	089b      	lsrs	r3, r3, #2
 8005102:	b29b      	uxth	r3, r3
 8005104:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800510e:	2300      	movs	r3, #0
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	e014      	b.n	800513e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	3301      	adds	r3, #1
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	3301      	adds	r3, #1
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	3301      	adds	r3, #1
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	3301      	adds	r3, #1
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	3301      	adds	r3, #1
 800513c:	623b      	str	r3, [r7, #32]
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	429a      	cmp	r2, r3
 8005144:	d3e6      	bcc.n	8005114 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005146:	8bfb      	ldrh	r3, [r7, #30]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01e      	beq.n	800518a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005156:	461a      	mov	r2, r3
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
 800516c:	b2da      	uxtb	r2, r3
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	701a      	strb	r2, [r3, #0]
      i++;
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	3301      	adds	r3, #1
 8005176:	623b      	str	r3, [r7, #32]
      pDest++;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	3301      	adds	r3, #1
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800517e:	8bfb      	ldrh	r3, [r7, #30]
 8005180:	3b01      	subs	r3, #1
 8005182:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005184:	8bfb      	ldrh	r3, [r7, #30]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ea      	bne.n	8005160 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800518c:	4618      	mov	r0, r3
 800518e:	372c      	adds	r7, #44	; 0x2c
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4013      	ands	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051b0:	68fb      	ldr	r3, [r7, #12]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f003 0301 	and.w	r3, r3, #1
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <USB_CoreReset+0x64>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e01b      	b.n	8005232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	daf2      	bge.n	80051e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f043 0201 	orr.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a09      	ldr	r2, [pc, #36]	; (8005240 <USB_CoreReset+0x64>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e006      	b.n	8005232 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b01      	cmp	r3, #1
 800522e:	d0f0      	beq.n	8005212 <USB_CoreReset+0x36>

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	00030d40 	.word	0x00030d40

08005244 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005244:	b084      	sub	sp, #16
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005264:	461a      	mov	r2, r3
 8005266:	2300      	movs	r3, #0
 8005268:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d018      	beq.n	80052cc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10a      	bne.n	80052b6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ae:	f043 0304 	orr.w	r3, r3, #4
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e014      	b.n	80052e0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e009      	b.n	80052e0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052da:	f023 0304 	bic.w	r3, r3, #4
 80052de:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052e0:	2110      	movs	r1, #16
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fe9c 	bl	8005020 <USB_FlushTxFifo>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff fec8 	bl	8005088 <USB_FlushRxFifo>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005302:	2300      	movs	r3, #0
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	e015      	b.n	8005334 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	461a      	mov	r2, r3
 8005316:	f04f 33ff 	mov.w	r3, #4294967295
 800531a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	3301      	adds	r3, #1
 8005332:	613b      	str	r3, [r7, #16]
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	429a      	cmp	r2, r3
 800533a:	d3e5      	bcc.n	8005308 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f04f 32ff 	mov.w	r2, #4294967295
 8005348:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00b      	beq.n	800536e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <USB_HostInit+0x16c>)
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <USB_HostInit+0x170>)
 8005368:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800536c:	e009      	b.n	8005382 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2280      	movs	r2, #128	; 0x80
 8005372:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <USB_HostInit+0x174>)
 8005378:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <USB_HostInit+0x178>)
 800537e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	2b00      	cmp	r3, #0
 8005386:	d105      	bne.n	8005394 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f043 0210 	orr.w	r2, r3, #16
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <USB_HostInit+0x17c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ac:	b004      	add	sp, #16
 80053ae:	4770      	bx	lr
 80053b0:	01000200 	.word	0x01000200
 80053b4:	00e00300 	.word	0x00e00300
 80053b8:	00600080 	.word	0x00600080
 80053bc:	004000e0 	.word	0x004000e0
 80053c0:	a3200008 	.word	0xa3200008

080053c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	78fb      	ldrb	r3, [r7, #3]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d107      	bne.n	8005416 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800540c:	461a      	mov	r2, r3
 800540e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005412:	6053      	str	r3, [r2, #4]
 8005414:	e009      	b.n	800542a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005416:	78fb      	ldrb	r3, [r7, #3]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d106      	bne.n	800542a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005422:	461a      	mov	r2, r3
 8005424:	f241 7370 	movw	r3, #6000	; 0x1770
 8005428:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	b29b      	uxth	r3, r3
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800545a:	b480      	push	{r7}
 800545c:	b089      	sub	sp, #36	; 0x24
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	0c9b      	lsrs	r3, r3, #18
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	0fdb      	lsrs	r3, r3, #31
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d104      	bne.n	80054b4 <USB_HC_Halt+0x5a>
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e0c8      	b.n	8005646 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <USB_HC_Halt+0x66>
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d163      	bne.n	8005588 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054de:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f040 80ab 	bne.w	8005644 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d133      	bne.n	8005562 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	440a      	add	r2, r1
 8005510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005518:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005538:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005546:	d81d      	bhi.n	8005584 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800555e:	d0ec      	beq.n	800553a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005560:	e070      	b.n	8005644 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800557c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005580:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005582:	e05f      	b.n	8005644 <USB_HC_Halt+0x1ea>
            break;
 8005584:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005586:	e05d      	b.n	8005644 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055a6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d133      	bne.n	8005620 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055f6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005604:	d81d      	bhi.n	8005642 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561c:	d0ec      	beq.n	80055f8 <USB_HC_Halt+0x19e>
 800561e:	e011      	b.n	8005644 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	440a      	add	r2, r1
 8005636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800563a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	e000      	b.n	8005644 <USB_HC_Halt+0x1ea>
          break;
 8005642:	bf00      	nop
    }
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <__libc_init_array>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	4d0d      	ldr	r5, [pc, #52]	; (800568c <__libc_init_array+0x38>)
 8005658:	4c0d      	ldr	r4, [pc, #52]	; (8005690 <__libc_init_array+0x3c>)
 800565a:	1b64      	subs	r4, r4, r5
 800565c:	10a4      	asrs	r4, r4, #2
 800565e:	2600      	movs	r6, #0
 8005660:	42a6      	cmp	r6, r4
 8005662:	d109      	bne.n	8005678 <__libc_init_array+0x24>
 8005664:	4d0b      	ldr	r5, [pc, #44]	; (8005694 <__libc_init_array+0x40>)
 8005666:	4c0c      	ldr	r4, [pc, #48]	; (8005698 <__libc_init_array+0x44>)
 8005668:	f000 f82e 	bl	80056c8 <_init>
 800566c:	1b64      	subs	r4, r4, r5
 800566e:	10a4      	asrs	r4, r4, #2
 8005670:	2600      	movs	r6, #0
 8005672:	42a6      	cmp	r6, r4
 8005674:	d105      	bne.n	8005682 <__libc_init_array+0x2e>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	f855 3b04 	ldr.w	r3, [r5], #4
 800567c:	4798      	blx	r3
 800567e:	3601      	adds	r6, #1
 8005680:	e7ee      	b.n	8005660 <__libc_init_array+0xc>
 8005682:	f855 3b04 	ldr.w	r3, [r5], #4
 8005686:	4798      	blx	r3
 8005688:	3601      	adds	r6, #1
 800568a:	e7f2      	b.n	8005672 <__libc_init_array+0x1e>
 800568c:	08005700 	.word	0x08005700
 8005690:	08005700 	.word	0x08005700
 8005694:	08005700 	.word	0x08005700
 8005698:	08005704 	.word	0x08005704

0800569c <memcpy>:
 800569c:	440a      	add	r2, r1
 800569e:	4291      	cmp	r1, r2
 80056a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a4:	d100      	bne.n	80056a8 <memcpy+0xc>
 80056a6:	4770      	bx	lr
 80056a8:	b510      	push	{r4, lr}
 80056aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b2:	4291      	cmp	r1, r2
 80056b4:	d1f9      	bne.n	80056aa <memcpy+0xe>
 80056b6:	bd10      	pop	{r4, pc}

080056b8 <memset>:
 80056b8:	4402      	add	r2, r0
 80056ba:	4603      	mov	r3, r0
 80056bc:	4293      	cmp	r3, r2
 80056be:	d100      	bne.n	80056c2 <memset+0xa>
 80056c0:	4770      	bx	lr
 80056c2:	f803 1b01 	strb.w	r1, [r3], #1
 80056c6:	e7f9      	b.n	80056bc <memset+0x4>

080056c8 <_init>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	bf00      	nop
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr

080056d4 <_fini>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	bf00      	nop
 80056d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056da:	bc08      	pop	{r3}
 80056dc:	469e      	mov	lr, r3
 80056de:	4770      	bx	lr
