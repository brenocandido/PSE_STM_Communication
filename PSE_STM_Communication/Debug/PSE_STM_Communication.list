
PSE_STM_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f60  08004f60  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f68  08004f68  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000065c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000670  20000670  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec4a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d2  00000000  00000000  0002ec8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00030d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b40  00000000  00000000  00031958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b23  00000000  00000000  00032498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcee  00000000  00000000  00052fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c57c3  00000000  00000000  00060ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012646c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003210  00000000  00000000  001264bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f30 	.word	0x08004f30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004f30 	.word	0x08004f30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <bufHandler_init>:
#include <string.h>

static void _increaseBufIndex(int *pIndex, const int BUF_SIZE);

void bufHandler_init(BufHandler_t *pHandler, MsgBuffer_t *msgBuf, size_t bufSize)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
    if (!pHandler || !msgBuf || bufSize <= 0)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d027      	beq.n	800052e <bufHandler_init+0x62>
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d024      	beq.n	800052e <bufHandler_init+0x62>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d021      	beq.n	800052e <bufHandler_init+0x62>
    {
        return;
    }

    pHandler->msgBuf = msgBuf;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	601a      	str	r2, [r3, #0]
    memset((void *)pHandler->msgBuf, 0, sizeof(MsgBuffer_t) * bufSize);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6818      	ldr	r0, [r3, #0]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	461a      	mov	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f004 fd0c 	bl	8004f20 <memset>

    pHandler->bufRcvIndex = 0;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
    pHandler->bufSendIndex = 0;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]

    pHandler->pRxUart = NULL;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
    pHandler->pTxUart = NULL;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]

    pHandler->txAvailable = true;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2201      	movs	r2, #1
 8000524:	751a      	strb	r2, [r3, #20]

    pHandler->BUF_SIZE = bufSize;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	619a      	str	r2, [r3, #24]
 800052c:	e000      	b.n	8000530 <bufHandler_init+0x64>
        return;
 800052e:	bf00      	nop
}
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <bufHandler_setUart>:

void bufHandler_setUart(BufHandler_t *pHandler, UART_HandleTypeDef *pTxUart, UART_HandleTypeDef *pRxUart)
{
 8000536:	b480      	push	{r7}
 8000538:	b085      	sub	sp, #20
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
    if (!pHandler || !pTxUart || !pRxUart)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00c      	beq.n	8000562 <bufHandler_setUart+0x2c>
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d009      	beq.n	8000562 <bufHandler_setUart+0x2c>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d006      	beq.n	8000562 <bufHandler_setUart+0x2c>
    {
        return;
    }

    pHandler->pRxUart = pRxUart;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	611a      	str	r2, [r3, #16]
    pHandler->pTxUart = pTxUart;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	e000      	b.n	8000564 <bufHandler_setUart+0x2e>
        return;
 8000562:	bf00      	nop
}
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <bufHandler_checkEmpty>:

bool bufHandler_checkEmpty(BufHandler_t *pHandler)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d101      	bne.n	8000580 <bufHandler_checkEmpty+0x12>
    {
        return true;
 800057c:	2301      	movs	r3, #1
 800057e:	e008      	b.n	8000592 <bufHandler_checkEmpty+0x24>
    }

    return pHandler->bufSendIndex == pHandler->bufRcvIndex;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	bf0c      	ite	eq
 800058c:	2301      	moveq	r3, #1
 800058e:	2300      	movne	r3, #0
 8000590:	b2db      	uxtb	r3, r3
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <bufHandler_sendData>:

bool bufHandler_sendData(BufHandler_t *pHandler, MsgBuffer_t data)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	6039      	str	r1, [r7, #0]
    if (!pHandler)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <bufHandler_sendData+0x14>
    {
        return false;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e013      	b.n	80005da <bufHandler_sendData+0x3c>
    }

    if (!pHandler->txAvailable)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7d1b      	ldrb	r3, [r3, #20]
 80005b6:	f083 0301 	eor.w	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <bufHandler_sendData+0x26>
    {
        return false;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e00a      	b.n	80005da <bufHandler_sendData+0x3c>
    }

    pHandler->txAvailable = false;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	751a      	strb	r2, [r3, #20]

    HAL_UART_Transmit_IT(pHandler->pTxUart, (uint8_t *)data, MSG_TOTAL_BYTES);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	220d      	movs	r2, #13
 80005d0:	6839      	ldr	r1, [r7, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f942 	bl	800385c <HAL_UART_Transmit_IT>

    return true;
 80005d8:	2301      	movs	r3, #1
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <bufHandler_increaseRcvIndex>:

void bufHandler_increaseRcvIndex(BufHandler_t *pHandler)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d008      	beq.n	8000602 <bufHandler_increaseRcvIndex+0x20>
    {
        return;
    }

    _increaseBufIndex(&pHandler->bufRcvIndex, pHandler->BUF_SIZE);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	1d1a      	adds	r2, r3, #4
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4610      	mov	r0, r2
 80005fc:	f000 f894 	bl	8000728 <_increaseBufIndex>
 8000600:	e000      	b.n	8000604 <bufHandler_increaseRcvIndex+0x22>
        return;
 8000602:	bf00      	nop
}
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <bufHandler_increaseSendIndex>:

void bufHandler_increaseSendIndex(BufHandler_t *pHandler)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d009      	beq.n	800062c <bufHandler_increaseSendIndex+0x22>
    {
        return;
    }

    _increaseBufIndex(&pHandler->bufSendIndex, pHandler->BUF_SIZE);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f103 0208 	add.w	r2, r3, #8
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4619      	mov	r1, r3
 8000624:	4610      	mov	r0, r2
 8000626:	f000 f87f 	bl	8000728 <_increaseBufIndex>
 800062a:	e000      	b.n	800062e <bufHandler_increaseSendIndex+0x24>
        return;
 800062c:	bf00      	nop
}
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <bufHandler_transmitUartData>:

bool bufHandler_transmitUartData(BufHandler_t *pHandler)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    if (!pHandler || !pHandler->pTxUart || !pHandler->msgBuf)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <bufHandler_transmitUartData+0x1e>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <bufHandler_transmitUartData+0x1e>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <bufHandler_transmitUartData+0x22>
    {
        return false;
 8000652:	2300      	movs	r3, #0
 8000654:	e01d      	b.n	8000692 <bufHandler_transmitUartData+0x5e>
    }

    if (!pHandler->txAvailable)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7d1b      	ldrb	r3, [r3, #20]
 800065a:	f083 0301 	eor.w	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <bufHandler_transmitUartData+0x34>
    {
        return false;
 8000664:	2300      	movs	r3, #0
 8000666:	e014      	b.n	8000692 <bufHandler_transmitUartData+0x5e>
    }

    pHandler->txAvailable = false;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	751a      	strb	r2, [r3, #20]

    HAL_UART_Transmit_IT(pHandler->pTxUart, (uint8_t *)&pHandler->msgBuf[pHandler->bufSendIndex], MSG_TOTAL_BYTES);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	68d8      	ldr	r0, [r3, #12]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6819      	ldr	r1, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	461a      	mov	r2, r3
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	440b      	add	r3, r1
 8000688:	220d      	movs	r2, #13
 800068a:	4619      	mov	r1, r3
 800068c:	f003 f8e6 	bl	800385c <HAL_UART_Transmit_IT>

    return true;
 8000690:	2301      	movs	r3, #1
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <bufHandler_receiveUartData>:

void bufHandler_receiveUartData(BufHandler_t *pHandler)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
    if (!pHandler || !pHandler->pRxUart || !pHandler->msgBuf)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d019      	beq.n	80006dc <bufHandler_receiveUartData+0x42>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d015      	beq.n	80006dc <bufHandler_receiveUartData+0x42>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d011      	beq.n	80006dc <bufHandler_receiveUartData+0x42>
    {
        return;
    }

	HAL_UART_Receive_IT(pHandler->pRxUart, (uint8_t *)&pHandler->msgBuf[pHandler->bufRcvIndex], MSG_TOTAL_BYTES);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6918      	ldr	r0, [r3, #16]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	220d      	movs	r2, #13
 80006d4:	4619      	mov	r1, r3
 80006d6:	f003 f906 	bl	80038e6 <HAL_UART_Receive_IT>
 80006da:	e000      	b.n	80006de <bufHandler_receiveUartData+0x44>
        return;
 80006dc:	bf00      	nop
}
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <bufHandler_setTxAvailable>:

void bufHandler_setTxAvailable(BufHandler_t *pHandler)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <bufHandler_setTxAvailable+0x16>
    {
        return;
    }

    pHandler->txAvailable = true;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	751a      	strb	r2, [r3, #20]
 80006f8:	e000      	b.n	80006fc <bufHandler_setTxAvailable+0x18>
        return;
 80006fa:	bf00      	nop
}
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <bufHandler_txUart>:

UART_HandleTypeDef *bufHandler_txUart(BufHandler_t *pHandler)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <bufHandler_txUart+0x12>
    {
        return NULL;
 8000714:	2300      	movs	r3, #0
 8000716:	e001      	b.n	800071c <bufHandler_txUart+0x16>
    }

    return pHandler->pTxUart;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <_increaseBufIndex>:

static void _increaseBufIndex(int *pIndex, const int BUF_SIZE)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	(*pIndex)++;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	601a      	str	r2, [r3, #0]
	if (*pIndex >= BUF_SIZE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	dc02      	bgt.n	800074c <_increaseBufIndex+0x24>
	{
		*pIndex = 0;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
	}
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <dummyTestFunc>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For signaling reception reception
static void dummyTestFunc()
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
    const uint32_t LED_ON = LD3_Pin << 16;
 800075e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000762:	60fb      	str	r3, [r7, #12]
	const uint32_t LED_OFF = LD3_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	60bb      	str	r3, [r7, #8]
	const uint32_t CNT_MAX = 250;
 800076a:	23fa      	movs	r3, #250	; 0xfa
 800076c:	607b      	str	r3, [r7, #4]

	static uint32_t cnt = 0;
	static uint8_t ledState = 0;

    cnt++;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <dummyTestFunc+0x68>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <dummyTestFunc+0x68>)
 8000776:	6013      	str	r3, [r2, #0]
    if (cnt >= CNT_MAX)
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <dummyTestFunc+0x68>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	429a      	cmp	r2, r3
 8000780:	d817      	bhi.n	80007b2 <dummyTestFunc+0x5a>
    {
        cnt = 0;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <dummyTestFunc+0x68>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
        ledState = !ledState;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <dummyTestFunc+0x6c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	bf0c      	ite	eq
 8000790:	2301      	moveq	r3, #1
 8000792:	2300      	movne	r3, #0
 8000794:	b2db      	uxtb	r3, r3
 8000796:	461a      	mov	r2, r3
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <dummyTestFunc+0x6c>)
 800079a:	701a      	strb	r2, [r3, #0]

        if (ledState)
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <dummyTestFunc+0x6c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d003      	beq.n	80007ac <dummyTestFunc+0x54>
        {
            LD3_GPIO_Port->BSRR = LED_ON;
 80007a4:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <dummyTestFunc+0x70>)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6193      	str	r3, [r2, #24]
        else
        {
            LD3_GPIO_Port->BSRR = LED_OFF;
        }
    }
}
 80007aa:	e002      	b.n	80007b2 <dummyTestFunc+0x5a>
            LD3_GPIO_Port->BSRR = LED_OFF;
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <dummyTestFunc+0x70>)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	6193      	str	r3, [r2, #24]
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000664 	.word	0x20000664
 80007c4:	20000668 	.word	0x20000668
 80007c8:	40020c00 	.word	0x40020c00

080007cc <triggerSensorDataSend>:

static void triggerSensorDataSend()
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
    _sendSensorData = true;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <triggerSensorDataSend+0x14>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	20000661 	.word	0x20000661

080007e4 <transmitEvReqToEm>:

static void transmitEvReqToEm()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
    bool ret = bufHandler_transmitUartData(&_evHandler);
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <transmitEvReqToEm+0x2c>)
 80007ec:	f7ff ff22 	bl	8000634 <bufHandler_transmitUartData>
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]

    if (!ret)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	f083 0301 	eor.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d103      	bne.n	8000808 <transmitEvReqToEm+0x24>
    {
        return;
    }

	bufHandler_increaseSendIndex(&_evHandler);
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <transmitEvReqToEm+0x2c>)
 8000802:	f7ff ff02 	bl	800060a <bufHandler_increaseSendIndex>
 8000806:	e000      	b.n	800080a <transmitEvReqToEm+0x26>
        return;
 8000808:	bf00      	nop
}
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000638 	.word	0x20000638

08000814 <transmitEmDataToEv>:

static void transmitEmDataToEv()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    bool ret = bufHandler_transmitUartData(&_emHandler);
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <transmitEmDataToEv+0x2c>)
 800081c:	f7ff ff0a 	bl	8000634 <bufHandler_transmitUartData>
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]

    if (!ret)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d103      	bne.n	8000838 <transmitEmDataToEv+0x24>
    {
        return;
    }

	bufHandler_increaseSendIndex(&_emHandler);
 8000830:	4803      	ldr	r0, [pc, #12]	; (8000840 <transmitEmDataToEv+0x2c>)
 8000832:	f7ff feea 	bl	800060a <bufHandler_increaseSendIndex>
 8000836:	e000      	b.n	800083a <transmitEmDataToEv+0x26>
        return;
 8000838:	bf00      	nop
}
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000061c 	.word	0x2000061c

08000844 <handleDataRcv>:

static void handleDataRcv(BufHandler_t *pHandler)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    bufHandler_increaseRcvIndex(pHandler);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff fec8 	bl	80005e2 <bufHandler_increaseRcvIndex>
    bufHandler_receiveUartData(pHandler);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ff21 	bl	800069a <bufHandler_receiveUartData>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if (huart == pEM_UART)
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_UART_RxCpltCallback+0x34>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	429a      	cmp	r2, r3
 8000870:	d103      	bne.n	800087a <HAL_UART_RxCpltCallback+0x1a>
	{
		handleDataRcv(&_emHandler);
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <HAL_UART_RxCpltCallback+0x38>)
 8000874:	f7ff ffe6 	bl	8000844 <handleDataRcv>
	}
	else if (huart == pEV_UART)
	{
		handleDataRcv(&_evHandler);
	}
}
 8000878:	e007      	b.n	800088a <HAL_UART_RxCpltCallback+0x2a>
	else if (huart == pEV_UART)
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_UART_RxCpltCallback+0x3c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	d102      	bne.n	800088a <HAL_UART_RxCpltCallback+0x2a>
		handleDataRcv(&_evHandler);
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <HAL_UART_RxCpltCallback+0x40>)
 8000886:	f7ff ffdd 	bl	8000844 <handleDataRcv>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000000 	.word	0x20000000
 8000898:	2000061c 	.word	0x2000061c
 800089c:	20000004 	.word	0x20000004
 80008a0:	20000638 	.word	0x20000638

080008a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	if (huart == bufHandler_txUart(&_emHandler))
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <HAL_UART_TxCpltCallback+0x3c>)
 80008ae:	f7ff ff2a 	bl	8000706 <bufHandler_txUart>
 80008b2:	4602      	mov	r2, r0
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d103      	bne.n	80008c2 <HAL_UART_TxCpltCallback+0x1e>
	{
        bufHandler_setTxAvailable(&_emHandler);
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <HAL_UART_TxCpltCallback+0x3c>)
 80008bc:	f7ff ff12 	bl	80006e4 <bufHandler_setTxAvailable>
	}
	else if (huart == bufHandler_txUart(&_evHandler))
	{
		bufHandler_setTxAvailable(&_evHandler);
	}
}
 80008c0:	e009      	b.n	80008d6 <HAL_UART_TxCpltCallback+0x32>
	else if (huart == bufHandler_txUart(&_evHandler))
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <HAL_UART_TxCpltCallback+0x40>)
 80008c4:	f7ff ff1f 	bl	8000706 <bufHandler_txUart>
 80008c8:	4602      	mov	r2, r0
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d102      	bne.n	80008d6 <HAL_UART_TxCpltCallback+0x32>
		bufHandler_setTxAvailable(&_evHandler);
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <HAL_UART_TxCpltCallback+0x40>)
 80008d2:	f7ff ff07 	bl	80006e4 <bufHandler_setTxAvailable>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000061c 	.word	0x2000061c
 80008e4:	20000638 	.word	0x20000638

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 fca7 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f2:	f000 f877 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f000 f98b 	bl	8000c10 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008fa:	f000 f8dd 	bl	8000ab8 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 80008fe:	f000 f965 	bl	8000bcc <MX_USB_OTG_FS_HCD_Init>
  MX_UART4_Init();
 8000902:	f000 f90f 	bl	8000b24 <MX_UART4_Init>
  MX_UART5_Init();
 8000906:	f000 f937 	bl	8000b78 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

    bufHandler_init(&_emHandler, _emMsgBuf, BUFFER_MSG_CAPACITY);
 800090a:	2214      	movs	r2, #20
 800090c:	492d      	ldr	r1, [pc, #180]	; (80009c4 <main+0xdc>)
 800090e:	482e      	ldr	r0, [pc, #184]	; (80009c8 <main+0xe0>)
 8000910:	f7ff fddc 	bl	80004cc <bufHandler_init>
    bufHandler_init(&_evHandler, _evMsgBuf, BUFFER_MSG_CAPACITY);
 8000914:	2214      	movs	r2, #20
 8000916:	492d      	ldr	r1, [pc, #180]	; (80009cc <main+0xe4>)
 8000918:	482d      	ldr	r0, [pc, #180]	; (80009d0 <main+0xe8>)
 800091a:	f7ff fdd7 	bl	80004cc <bufHandler_init>

    bufHandler_setUart(&_emHandler, pEV_UART, pEM_UART);
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <main+0xec>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <main+0xf0>)
 8000924:	6812      	ldr	r2, [r2, #0]
 8000926:	4619      	mov	r1, r3
 8000928:	4827      	ldr	r0, [pc, #156]	; (80009c8 <main+0xe0>)
 800092a:	f7ff fe04 	bl	8000536 <bufHandler_setUart>
    bufHandler_setUart(&_evHandler, pEM_UART, pEV_UART);
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <main+0xf0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a28      	ldr	r2, [pc, #160]	; (80009d4 <main+0xec>)
 8000934:	6812      	ldr	r2, [r2, #0]
 8000936:	4619      	mov	r1, r3
 8000938:	4825      	ldr	r0, [pc, #148]	; (80009d0 <main+0xe8>)
 800093a:	f7ff fdfc 	bl	8000536 <bufHandler_setUart>

    bufHandler_receiveUartData(&_emHandler);
 800093e:	4822      	ldr	r0, [pc, #136]	; (80009c8 <main+0xe0>)
 8000940:	f7ff feab 	bl	800069a <bufHandler_receiveUartData>
    bufHandler_receiveUartData(&_evHandler);
 8000944:	4822      	ldr	r0, [pc, #136]	; (80009d0 <main+0xe8>)
 8000946:	f7ff fea8 	bl	800069a <bufHandler_receiveUartData>

    // Dummy test send to check UART reception.
    for (uint8_t i = 0; i < MSG_TOTAL_BYTES; i++)
 800094a:	2300      	movs	r3, #0
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	e008      	b.n	8000962 <main+0x7a>
    {
        _sensorData[i] = i + 1;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	79fa      	ldrb	r2, [r7, #7]
 8000954:	3201      	adds	r2, #1
 8000956:	b2d1      	uxtb	r1, r2
 8000958:	4a20      	ldr	r2, [pc, #128]	; (80009dc <main+0xf4>)
 800095a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < MSG_TOTAL_BYTES; i++)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	3301      	adds	r3, #1
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b0c      	cmp	r3, #12
 8000966:	d9f3      	bls.n	8000950 <main+0x68>
    }
    triggerSensorDataSend();
 8000968:	f7ff ff30 	bl	80007cc <triggerSensorDataSend>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
        // Check first in order to send as soon as the UART is available
        if (_sendSensorData)
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <main+0xf8>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00b      	beq.n	800098c <main+0xa4>
        {
            // We use the _emHandler because that's where the EV TX UART is
            // configured. It's as if the sensor data had come through the EM
            // UART>
            bool ret = bufHandler_sendData(&_emHandler, _sensorData);
 8000974:	4919      	ldr	r1, [pc, #100]	; (80009dc <main+0xf4>)
 8000976:	4814      	ldr	r0, [pc, #80]	; (80009c8 <main+0xe0>)
 8000978:	f7ff fe11 	bl	800059e <bufHandler_sendData>
 800097c:	4603      	mov	r3, r0
 800097e:	71bb      	strb	r3, [r7, #6]

            // Will only return true when it successfully sent data.
            if (ret)
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <main+0xa4>
            {
                _sendSensorData = false;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0xf8>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
            }
        }

		if (!bufHandler_checkEmpty(&_emHandler))
 800098c:	480e      	ldr	r0, [pc, #56]	; (80009c8 <main+0xe0>)
 800098e:	f7ff fdee 	bl	800056e <bufHandler_checkEmpty>
 8000992:	4603      	mov	r3, r0
 8000994:	f083 0301 	eor.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <main+0xbe>
		{
			transmitEmDataToEv();
 800099e:	f7ff ff39 	bl	8000814 <transmitEmDataToEv>

            dummyTestFunc();
 80009a2:	f7ff fed9 	bl	8000758 <dummyTestFunc>
		}

		if (!bufHandler_checkEmpty(&_evHandler))
 80009a6:	480a      	ldr	r0, [pc, #40]	; (80009d0 <main+0xe8>)
 80009a8:	f7ff fde1 	bl	800056e <bufHandler_checkEmpty>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0d9      	beq.n	800096c <main+0x84>
		{
			transmitEvReqToEm();
 80009b8:	f7ff ff14 	bl	80007e4 <transmitEvReqToEm>

			dummyTestFunc();
 80009bc:	f7ff fecc 	bl	8000758 <dummyTestFunc>
        if (_sendSensorData)
 80009c0:	e7d4      	b.n	800096c <main+0x84>
 80009c2:	bf00      	nop
 80009c4:	20000414 	.word	0x20000414
 80009c8:	2000061c 	.word	0x2000061c
 80009cc:	20000518 	.word	0x20000518
 80009d0:	20000638 	.word	0x20000638
 80009d4:	20000004 	.word	0x20000004
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000654 	.word	0x20000654
 80009e0:	20000661 	.word	0x20000661

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	2230      	movs	r2, #48	; 0x30
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f004 fa94 	bl	8004f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <SystemClock_Config+0xcc>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <SystemClock_Config+0xcc>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <SystemClock_Config+0xcc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a54:	2308      	movs	r3, #8
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a62:	2307      	movs	r3, #7
 8000a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 f988 	bl	8002d80 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a76:	f000 f9b9 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2105      	movs	r1, #5
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fbe9 	bl	8003270 <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000aa4:	f000 f9a2 	bl	8000dec <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3750      	adds	r7, #80	; 0x50
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <MX_SPI1_Init+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000b04:	220a      	movs	r2, #10
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000b0a:	f002 fdd1 	bl	80036b0 <HAL_SPI_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b14:	f000 f96a 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000030 	.word	0x20000030
 8000b20:	40013000 	.word	0x40013000

08000b24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_UART4_Init+0x4c>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <MX_UART4_Init+0x50>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_UART4_Init+0x4c>)
 8000b30:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000b34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_UART4_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_UART4_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_UART4_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_UART4_Init+0x4c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_UART4_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_UART4_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_UART4_Init+0x4c>)
 8000b5c:	f002 fe31 	bl	80037c2 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b66:	f000 f941 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000088 	.word	0x20000088
 8000b74:	40004c00 	.word	0x40004c00

08000b78 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_UART5_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <MX_UART5_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_UART5_Init+0x4c>)
 8000b84:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000b88:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_UART5_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_UART5_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_UART5_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_UART5_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_UART5_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_UART5_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_UART5_Init+0x4c>)
 8000bb0:	f002 fe07 	bl	80037c2 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f917 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000cc 	.word	0x200000cc
 8000bc8:	40005000 	.word	0x40005000

08000bcc <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000bd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bd6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000bda:	2208      	movs	r2, #8
 8000bdc:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000bec:	2202      	movs	r2, #2
 8000bee:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000bf8:	f000 ff11 	bl	8001a1e <HAL_HCD_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000c02:	f000 f8f3 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000110 	.word	0x20000110

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	4b6a      	ldr	r3, [pc, #424]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a69      	ldr	r2, [pc, #420]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b67      	ldr	r3, [pc, #412]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	61bb      	str	r3, [r7, #24]
 8000c40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b63      	ldr	r3, [pc, #396]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a62      	ldr	r2, [pc, #392]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b60      	ldr	r3, [pc, #384]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a5b      	ldr	r2, [pc, #364]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a54      	ldr	r2, [pc, #336]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a4d      	ldr	r2, [pc, #308]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a46      	ldr	r2, [pc, #280]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b44      	ldr	r3, [pc, #272]	; (8000dd4 <MX_GPIO_Init+0x1c4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	4841      	ldr	r0, [pc, #260]	; (8000dd8 <MX_GPIO_Init+0x1c8>)
 8000cd4:	f000 fe8a 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2101      	movs	r1, #1
 8000cdc:	483f      	ldr	r0, [pc, #252]	; (8000ddc <MX_GPIO_Init+0x1cc>)
 8000cde:	f000 fe85 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ce8:	483d      	ldr	r0, [pc, #244]	; (8000de0 <MX_GPIO_Init+0x1d0>)
 8000cea:	f000 fe7f 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cee:	2308      	movs	r3, #8
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4834      	ldr	r0, [pc, #208]	; (8000dd8 <MX_GPIO_Init+0x1c8>)
 8000d06:	f000 fcd5 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	482e      	ldr	r0, [pc, #184]	; (8000ddc <MX_GPIO_Init+0x1cc>)
 8000d22:	f000 fcc7 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	482a      	ldr	r0, [pc, #168]	; (8000de4 <MX_GPIO_Init+0x1d4>)
 8000d3c:	f000 fcba 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d40:	2304      	movs	r3, #4
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4619      	mov	r1, r3
 8000d52:	4825      	ldr	r0, [pc, #148]	; (8000de8 <MX_GPIO_Init+0x1d8>)
 8000d54:	f000 fcae 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	481c      	ldr	r0, [pc, #112]	; (8000de8 <MX_GPIO_Init+0x1d8>)
 8000d76:	f000 fc9d 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000d7a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	4813      	ldr	r0, [pc, #76]	; (8000de0 <MX_GPIO_Init+0x1d0>)
 8000d94:	f000 fc8e 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_GPIO_Init+0x1d0>)
 8000dac:	f000 fc82 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000db4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_GPIO_Init+0x1c8>)
 8000dc6:	f000 fc75 	bl	80016b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dca:	bf00      	nop
 8000dcc:	3730      	adds	r7, #48	; 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020c00 	.word	0x40020c00
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e36:	2007      	movs	r0, #7
 8000e38:	f000 fb68 	bl	800150c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_SPI_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12b      	bne.n	8000ec2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ea2:	23e0      	movs	r3, #224	; 0xe0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000ebe:	f000 fbf9 	bl	80016b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40013000 	.word	0x40013000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a59      	ldr	r2, [pc, #356]	; (800105c <HAL_UART_MspInit+0x184>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d153      	bne.n	8000fa2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
 8000efe:	4b58      	ldr	r3, [pc, #352]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a57      	ldr	r2, [pc, #348]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b55      	ldr	r3, [pc, #340]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f12:	623b      	str	r3, [r7, #32]
 8000f14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	4b51      	ldr	r3, [pc, #324]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a50      	ldr	r2, [pc, #320]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b4e      	ldr	r3, [pc, #312]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	4b4a      	ldr	r3, [pc, #296]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a49      	ldr	r2, [pc, #292]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b47      	ldr	r3, [pc, #284]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	483e      	ldr	r0, [pc, #248]	; (8001064 <HAL_UART_MspInit+0x18c>)
 8000f6a:	f000 fba3 	bl	80016b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f80:	2308      	movs	r3, #8
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4837      	ldr	r0, [pc, #220]	; (8001068 <HAL_UART_MspInit+0x190>)
 8000f8c:	f000 fb92 	bl	80016b4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2034      	movs	r0, #52	; 0x34
 8000f96:	f000 fac4 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f9a:	2034      	movs	r0, #52	; 0x34
 8000f9c:	f000 fadd 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000fa0:	e057      	b.n	8001052 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==UART5)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a31      	ldr	r2, [pc, #196]	; (800106c <HAL_UART_MspInit+0x194>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d152      	bne.n	8001052 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a2a      	ldr	r2, [pc, #168]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a23      	ldr	r2, [pc, #140]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <HAL_UART_MspInit+0x188>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001012:	2308      	movs	r3, #8
 8001014:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101a:	4619      	mov	r1, r3
 800101c:	4812      	ldr	r0, [pc, #72]	; (8001068 <HAL_UART_MspInit+0x190>)
 800101e:	f000 fb49 	bl	80016b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001022:	2304      	movs	r3, #4
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001032:	2308      	movs	r3, #8
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <HAL_UART_MspInit+0x198>)
 800103e:	f000 fb39 	bl	80016b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2035      	movs	r0, #53	; 0x35
 8001048:	f000 fa6b 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800104c:	2035      	movs	r0, #53	; 0x35
 800104e:	f000 fa84 	bl	800155a <HAL_NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3738      	adds	r7, #56	; 0x38
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40004c00 	.word	0x40004c00
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020800 	.word	0x40020800
 800106c:	40005000 	.word	0x40005000
 8001070:	40020c00 	.word	0x40020c00

08001074 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001094:	d147      	bne.n	8001126 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_HCD_MspInit+0xbc>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a24      	ldr	r2, [pc, #144]	; (8001130 <HAL_HCD_MspInit+0xbc>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_HCD_MspInit+0xbc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	481b      	ldr	r0, [pc, #108]	; (8001134 <HAL_HCD_MspInit+0xc0>)
 80010c8:	f000 faf4 	bl	80016b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010de:	230a      	movs	r3, #10
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4812      	ldr	r0, [pc, #72]	; (8001134 <HAL_HCD_MspInit+0xc0>)
 80010ea:	f000 fae3 	bl	80016b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_HCD_MspInit+0xbc>)
 80010f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_HCD_MspInit+0xbc>)
 80010f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f8:	6353      	str	r3, [r2, #52]	; 0x34
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_HCD_MspInit+0xbc>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_HCD_MspInit+0xbc>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_HCD_MspInit+0xbc>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2043      	movs	r0, #67	; 0x43
 800111c:	f000 fa01 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001120:	2043      	movs	r0, #67	; 0x43
 8001122:	f000 fa1a 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 f8ae 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <UART4_IRQHandler+0x10>)
 8001192:	f002 fbd9 	bl	8003948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000088 	.word	0x20000088

080011a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <UART5_IRQHandler+0x10>)
 80011a6:	f002 fbcf 	bl	8003948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000cc 	.word	0x200000cc

080011b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <OTG_FS_IRQHandler+0x10>)
 80011ba:	f000 fc92 	bl	8001ae2 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000110 	.word	0x20000110

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f2:	490e      	ldr	r1, [pc, #56]	; (800122c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001208:	4c0b      	ldr	r4, [pc, #44]	; (8001238 <LoopFillZerobss+0x26>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001216:	f7ff ffd7 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f003 fe5d 	bl	8004ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff fb63 	bl	80008e8 <main>
  bx  lr    
 8001222:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001224:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001230:	08004f70 	.word	0x08004f70
  ldr r2, =_sbss
 8001234:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001238:	20000670 	.word	0x20000670

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <HAL_Init+0x40>)
 800124a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_Init+0x40>)
 8001256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_Init+0x40>)
 8001262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f94f 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126e:	2000      	movs	r0, #0
 8001270:	f000 f808 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001274:	f7ff fdc0 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023c00 	.word	0x40023c00

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f967 	bl	8001576 <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 f92f 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000010 	.word	0x20000010
 80012e0:	2000000c 	.word	0x2000000c

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000010 	.word	0x20000010
 8001308:	2000066c 	.word	0x2000066c

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000066c 	.word	0x2000066c

08001324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800132c:	f7ff ffee 	bl	800130c <HAL_GetTick>
 8001330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133c:	d005      	beq.n	800134a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_Delay+0x44>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134a:	bf00      	nop
 800134c:	f7ff ffde 	bl	800130c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	429a      	cmp	r2, r3
 800135a:	d8f7      	bhi.n	800134c <HAL_Delay+0x28>
  {
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000010 	.word	0x20000010

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff29 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff3e 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff8e 	bl	8001460 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff31 	bl	80013d0 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff feb6 	bl	800130c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d008      	beq.n	80015c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e052      	b.n	8001666 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0216 	bic.w	r2, r2, #22
 80015ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <HAL_DMA_Abort+0x62>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0208 	bic.w	r2, r2, #8
 80015fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001610:	e013      	b.n	800163a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001612:	f7ff fe7b 	bl	800130c <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b05      	cmp	r3, #5
 800161e:	d90c      	bls.n	800163a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2220      	movs	r2, #32
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2203      	movs	r2, #3
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e015      	b.n	8001666 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1e4      	bne.n	8001612 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	223f      	movs	r2, #63	; 0x3f
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d004      	beq.n	800168c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e00c      	b.n	80016a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2205      	movs	r2, #5
 8001690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	e16b      	b.n	80019a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f040 815a 	bne.w	80019a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d005      	beq.n	8001706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001702:	2b02      	cmp	r3, #2
 8001704:	d130      	bne.n	8001768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2203      	movs	r2, #3
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 0201 	and.w	r2, r3, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b03      	cmp	r3, #3
 8001772:	d017      	beq.n	80017a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d123      	bne.n	80017f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3208      	adds	r2, #8
 80017b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	691a      	ldr	r2, [r3, #16]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	69b9      	ldr	r1, [r7, #24]
 80017f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0203 	and.w	r2, r3, #3
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80b4 	beq.w	80019a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b60      	ldr	r3, [pc, #384]	; (80019c0 <HAL_GPIO_Init+0x30c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a5f      	ldr	r2, [pc, #380]	; (80019c0 <HAL_GPIO_Init+0x30c>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <HAL_GPIO_Init+0x30c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001856:	4a5b      	ldr	r2, [pc, #364]	; (80019c4 <HAL_GPIO_Init+0x310>)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_GPIO_Init+0x314>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d02b      	beq.n	80018da <HAL_GPIO_Init+0x226>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a51      	ldr	r2, [pc, #324]	; (80019cc <HAL_GPIO_Init+0x318>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d025      	beq.n	80018d6 <HAL_GPIO_Init+0x222>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a50      	ldr	r2, [pc, #320]	; (80019d0 <HAL_GPIO_Init+0x31c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01f      	beq.n	80018d2 <HAL_GPIO_Init+0x21e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4f      	ldr	r2, [pc, #316]	; (80019d4 <HAL_GPIO_Init+0x320>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d019      	beq.n	80018ce <HAL_GPIO_Init+0x21a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <HAL_GPIO_Init+0x324>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x216>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <HAL_GPIO_Init+0x328>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x212>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_GPIO_Init+0x32c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x20e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <HAL_GPIO_Init+0x330>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x20a>
 80018ba:	2307      	movs	r3, #7
 80018bc:	e00e      	b.n	80018dc <HAL_GPIO_Init+0x228>
 80018be:	2308      	movs	r3, #8
 80018c0:	e00c      	b.n	80018dc <HAL_GPIO_Init+0x228>
 80018c2:	2306      	movs	r3, #6
 80018c4:	e00a      	b.n	80018dc <HAL_GPIO_Init+0x228>
 80018c6:	2305      	movs	r3, #5
 80018c8:	e008      	b.n	80018dc <HAL_GPIO_Init+0x228>
 80018ca:	2304      	movs	r3, #4
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x228>
 80018ce:	2303      	movs	r3, #3
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_Init+0x228>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_Init+0x228>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x228>
 80018da:	2300      	movs	r3, #0
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f002 0203 	and.w	r2, r2, #3
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4093      	lsls	r3, r2
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ec:	4935      	ldr	r1, [pc, #212]	; (80019c4 <HAL_GPIO_Init+0x310>)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_GPIO_Init+0x334>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191e:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_GPIO_Init+0x334>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_GPIO_Init+0x334>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001948:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <HAL_GPIO_Init+0x334>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_GPIO_Init+0x334>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001972:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_GPIO_Init+0x334>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_GPIO_Init+0x334>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <HAL_GPIO_Init+0x334>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	f67f ae90 	bls.w	80016d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40013800 	.word	0x40013800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40021400 	.word	0x40021400
 80019e0:	40021800 	.word	0x40021800
 80019e4:	40021c00 	.word	0x40021c00
 80019e8:	40013c00 	.word	0x40013c00

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a20:	b08f      	sub	sp, #60	; 0x3c
 8001a22:	af0a      	add	r7, sp, #40	; 0x28
 8001a24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e054      	b.n	8001ada <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fb12 	bl	8001074 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2203      	movs	r2, #3
 8001a54:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 febb 	bl	80047ea <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	687e      	ldr	r6, [r7, #4]
 8001a7c:	466d      	mov	r5, sp
 8001a7e:	f106 0410 	add.w	r4, r6, #16
 8001a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a92:	1d33      	adds	r3, r6, #4
 8001a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a96:	6838      	ldr	r0, [r7, #0]
 8001a98:	f002 fe46 	bl	8004728 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 feb2 	bl	800480c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	687e      	ldr	r6, [r7, #4]
 8001ab0:	466d      	mov	r5, sp
 8001ab2:	f106 0410 	add.w	r4, r6, #16
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ac2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac6:	1d33      	adds	r3, r6, #4
 8001ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f002 fffc 	bl	8004ac8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ae2 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 ffa2 	bl	8004a42 <USB_GetMode>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	f040 80f6 	bne.w	8001cf2 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 ff86 	bl	8004a1c <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80ec 	beq.w	8001cf0 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 ff7d 	bl	8004a1c <USB_ReadInterrupts>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b2c:	d104      	bne.n	8001b38 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b36:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 ff6d 	bl	8004a1c <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b4c:	d104      	bne.n	8001b58 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b56:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 ff5d 	bl	8004a1c <USB_ReadInterrupts>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b6c:	d104      	bne.n	8001b78 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b76:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 ff4d 	bl	8004a1c <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d103      	bne.n	8001b94 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2202      	movs	r2, #2
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 ff3f 	bl	8004a1c <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba8:	d11c      	bne.n	8001be4 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bb2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10f      	bne.n	8001be4 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bc4:	2110      	movs	r1, #16
 8001bc6:	6938      	ldr	r0, [r7, #16]
 8001bc8:	f002 fe6c 	bl	80048a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bcc:	6938      	ldr	r0, [r7, #16]
 8001bce:	f002 fe9d 	bl	800490c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 f835 	bl	8004c48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f89e 	bl	8001d20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 ff17 	bl	8004a1c <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d102      	bne.n	8001c00 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f001 f84c 	bl	8002c98 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 ff09 	bl	8004a1c <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d106      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f86f 	bl	8001cf8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2208      	movs	r2, #8
 8001c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 fef8 	bl	8004a1c <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d101      	bne.n	8001c3a <HAL_HCD_IRQHandler+0x158>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_HCD_IRQHandler+0x15a>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d012      	beq.n	8001c66 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0210 	bic.w	r2, r2, #16
 8001c4e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 ff4f 	bl	8002af4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0210 	orr.w	r2, r2, #16
 8001c64:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fed6 	bl	8004a1c <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c7a:	d13a      	bne.n	8001cf2 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 f81b 	bl	8004cbc <USB_HC_ReadInterrupt>
 8001c86:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e025      	b.n	8001cda <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d018      	beq.n	8001cd4 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f859 	bl	8001d78 <HCD_HC_IN_IRQHandler>
 8001cc6:	e005      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fba7 	bl	8002422 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d3d4      	bcc.n	8001c8e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	e000      	b.n	8001cf2 <HAL_HCD_IRQHandler+0x210>
      return;
 8001cf0:	bf00      	nop
    }
  }
}
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d11a      	bne.n	8001dde <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db4:	461a      	mov	r2, r3
 8001db6:	2304      	movs	r3, #4
 8001db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3361      	adds	r3, #97	; 0x61
 8001dc8:	2206      	movs	r2, #6
 8001dca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 ff81 	bl	8004cde <USB_HC_Halt>
 8001ddc:	e0af      	b.n	8001f3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df4:	d11b      	bne.n	8001e2e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	461a      	mov	r2, r3
 8001e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	212c      	movs	r1, #44	; 0x2c
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	3361      	adds	r3, #97	; 0x61
 8001e18:	2207      	movs	r2, #7
 8001e1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 ff59 	bl	8004cde <USB_HC_Halt>
 8001e2c:	e087      	b.n	8001f3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d109      	bne.n	8001e58 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	2320      	movs	r3, #32
 8001e54:	6093      	str	r3, [r2, #8]
 8001e56:	e072      	b.n	8001f3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d11a      	bne.n	8001ea4 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2308      	movs	r3, #8
 8001e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3361      	adds	r3, #97	; 0x61
 8001e8e:	2205      	movs	r2, #5
 8001e90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 ff1e 	bl	8004cde <USB_HC_Halt>
 8001ea2:	e04c      	b.n	8001f3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eba:	d11b      	bne.n	8001ef4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ece:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	3361      	adds	r3, #97	; 0x61
 8001ede:	2208      	movs	r2, #8
 8001ee0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 fef6 	bl	8004cde <USB_HC_Halt>
 8001ef2:	e024      	b.n	8001f3e <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	2b80      	cmp	r3, #128	; 0x80
 8001f08:	d119      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	461a      	mov	r2, r3
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	212c      	movs	r1, #44	; 0x2c
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	3361      	adds	r3, #97	; 0x61
 8001f2a:	2206      	movs	r2, #6
 8001f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fed0 	bl	8004cde <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f54:	d112      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 febc 	bl	8004cde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	461a      	mov	r2, r3
 8001f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f78:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f7a:	e24e      	b.n	800241a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	f040 80df 	bne.w	8002152 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d019      	beq.n	8001fd0 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3348      	adds	r3, #72	; 0x48
 8001faa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	0159      	lsls	r1, r3, #5
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	202c      	movs	r0, #44	; 0x2c
 8001fc6:	fb00 f303 	mul.w	r3, r0, r3
 8001fca:	440b      	add	r3, r1
 8001fcc:	3350      	adds	r3, #80	; 0x50
 8001fce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3361      	adds	r3, #97	; 0x61
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	335c      	adds	r3, #92	; 0x5c
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	2301      	movs	r3, #1
 8002004:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	212c      	movs	r1, #44	; 0x2c
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	333f      	adds	r3, #63	; 0x3f
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	333f      	adds	r3, #63	; 0x3f
 8002028:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800202a:	2b02      	cmp	r3, #2
 800202c:	d111      	bne.n	8002052 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f002 fe50 	bl	8004cde <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	461a      	mov	r2, r3
 800204c:	2310      	movs	r3, #16
 800204e:	6093      	str	r3, [r2, #8]
 8002050:	e03a      	b.n	80020c8 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	333f      	adds	r3, #63	; 0x3f
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d009      	beq.n	800207a <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	333f      	adds	r3, #63	; 0x3f
 8002074:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002076:	2b01      	cmp	r3, #1
 8002078:	d126      	bne.n	80020c8 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	0151      	lsls	r1, r2, #5
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	440a      	add	r2, r1
 8002090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002094:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002098:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3360      	adds	r3, #96	; 0x60
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	b2d9      	uxtb	r1, r3
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	202c      	movs	r0, #44	; 0x2c
 80020b6:	fb00 f303 	mul.w	r3, r0, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3360      	adds	r3, #96	; 0x60
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fe4a 	bl	8001d5c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d12b      	bne.n	8002128 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3348      	adds	r3, #72	; 0x48
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	202c      	movs	r0, #44	; 0x2c
 80020e6:	fb00 f202 	mul.w	r2, r0, r2
 80020ea:	440a      	add	r2, r1
 80020ec:	3240      	adds	r2, #64	; 0x40
 80020ee:	8812      	ldrh	r2, [r2, #0]
 80020f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 818e 	beq.w	800241a <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3354      	adds	r3, #84	; 0x54
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	f083 0301 	eor.w	r3, r3, #1
 8002112:	b2d8      	uxtb	r0, r3
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3354      	adds	r3, #84	; 0x54
 8002122:	4602      	mov	r2, r0
 8002124:	701a      	strb	r2, [r3, #0]
}
 8002126:	e178      	b.n	800241a <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3354      	adds	r3, #84	; 0x54
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	f083 0301 	eor.w	r3, r3, #1
 800213c:	b2d8      	uxtb	r0, r3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3354      	adds	r3, #84	; 0x54
 800214c:	4602      	mov	r2, r0
 800214e:	701a      	strb	r2, [r3, #0]
}
 8002150:	e163      	b.n	800241a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b02      	cmp	r3, #2
 8002166:	f040 80f6 	bne.w	8002356 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3361      	adds	r3, #97	; 0x61
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d109      	bne.n	8002192 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3360      	adds	r3, #96	; 0x60
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e0c9      	b.n	8002326 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3361      	adds	r3, #97	; 0x61
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d109      	bne.n	80021ba <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3360      	adds	r3, #96	; 0x60
 80021b4:	2205      	movs	r2, #5
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e0b5      	b.n	8002326 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3361      	adds	r3, #97	; 0x61
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d009      	beq.n	80021e2 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3361      	adds	r3, #97	; 0x61
 80021dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d150      	bne.n	8002284 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	335c      	adds	r3, #92	; 0x5c
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	202c      	movs	r0, #44	; 0x2c
 80021fa:	fb00 f303 	mul.w	r3, r0, r3
 80021fe:	440b      	add	r3, r1
 8002200:	335c      	adds	r3, #92	; 0x5c
 8002202:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	335c      	adds	r3, #92	; 0x5c
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d912      	bls.n	800223e <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	335c      	adds	r3, #92	; 0x5c
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3360      	adds	r3, #96	; 0x60
 8002238:	2204      	movs	r2, #4
 800223a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800223c:	e073      	b.n	8002326 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3360      	adds	r3, #96	; 0x60
 800224c:	2202      	movs	r2, #2
 800224e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002266:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800226e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002282:	e050      	b.n	8002326 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3361      	adds	r3, #97	; 0x61
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d122      	bne.n	80022de <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3360      	adds	r3, #96	; 0x60
 80022a6:	2202      	movs	r2, #2
 80022a8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022c0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022c8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	e023      	b.n	8002326 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3361      	adds	r3, #97	; 0x61
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b07      	cmp	r3, #7
 80022f0:	d119      	bne.n	8002326 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	335c      	adds	r3, #92	; 0x5c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	202c      	movs	r0, #44	; 0x2c
 800230a:	fb00 f303 	mul.w	r3, r0, r3
 800230e:	440b      	add	r3, r1
 8002310:	335c      	adds	r3, #92	; 0x5c
 8002312:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3360      	adds	r3, #96	; 0x60
 8002322:	2204      	movs	r2, #4
 8002324:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	461a      	mov	r2, r3
 8002334:	2302      	movs	r3, #2
 8002336:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	b2d9      	uxtb	r1, r3
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	202c      	movs	r0, #44	; 0x2c
 8002342:	fb00 f303 	mul.w	r3, r0, r3
 8002346:	4413      	add	r3, r2
 8002348:	3360      	adds	r3, #96	; 0x60
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff fd04 	bl	8001d5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002354:	e061      	b.n	800241a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b10      	cmp	r3, #16
 800236a:	d156      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	333f      	adds	r3, #63	; 0x3f
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d111      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	335c      	adds	r3, #92	; 0x5c
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f002 fc9e 	bl	8004cde <USB_HC_Halt>
 80023a2:	e031      	b.n	8002408 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	333f      	adds	r3, #63	; 0x3f
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	333f      	adds	r3, #63	; 0x3f
 80023c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d11d      	bne.n	8002408 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	335c      	adds	r3, #92	; 0x5c
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d110      	bne.n	8002408 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3361      	adds	r3, #97	; 0x61
 80023f4:	2203      	movs	r2, #3
 80023f6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f002 fc6b 	bl	8004cde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	461a      	mov	r2, r3
 8002416:	2310      	movs	r3, #16
 8002418:	6093      	str	r3, [r2, #8]
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b088      	sub	sp, #32
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d11a      	bne.n	8002488 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	461a      	mov	r2, r3
 8002460:	2304      	movs	r3, #4
 8002462:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3361      	adds	r3, #97	; 0x61
 8002472:	2206      	movs	r2, #6
 8002474:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fc2c 	bl	8004cde <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002486:	e331      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b20      	cmp	r3, #32
 800249c:	d12e      	bne.n	80024fc <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	461a      	mov	r2, r3
 80024ac:	2320      	movs	r3, #32
 80024ae:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	333d      	adds	r3, #61	; 0x3d
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 8313 	bne.w	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	333d      	adds	r3, #61	; 0x3d
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3360      	adds	r3, #96	; 0x60
 80024e6:	2202      	movs	r2, #2
 80024e8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 fbf2 	bl	8004cde <USB_HC_Halt>
}
 80024fa:	e2f7      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002512:	d112      	bne.n	800253a <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002526:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fbd3 	bl	8004cde <USB_HC_Halt>
}
 8002538:	e2d8      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d140      	bne.n	80025d2 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	335c      	adds	r3, #92	; 0x5c
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b40      	cmp	r3, #64	; 0x40
 8002576:	d111      	bne.n	800259c <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	333d      	adds	r3, #61	; 0x3d
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	2340      	movs	r3, #64	; 0x40
 800259a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2301      	movs	r3, #1
 80025ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3361      	adds	r3, #97	; 0x61
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 fb87 	bl	8004cde <USB_HC_Halt>
}
 80025d0:	e28c      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d12c      	bne.n	8002642 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	3361      	adds	r3, #97	; 0x61
 80025f6:	2204      	movs	r2, #4
 80025f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	333d      	adds	r3, #61	; 0x3d
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	335c      	adds	r3, #92	; 0x5c
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	4611      	mov	r1, r2
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fb58 	bl	8004cde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	2340      	movs	r3, #64	; 0x40
 800263e:	6093      	str	r3, [r2, #8]
}
 8002640:	e254      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b08      	cmp	r3, #8
 8002656:	d11a      	bne.n	800268e <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	461a      	mov	r2, r3
 8002666:	2308      	movs	r3, #8
 8002668:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3361      	adds	r3, #97	; 0x61
 8002678:	2205      	movs	r2, #5
 800267a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fb29 	bl	8004cde <USB_HC_Halt>
}
 800268c:	e22e      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d140      	bne.n	8002726 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	335c      	adds	r3, #92	; 0x5c
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	3361      	adds	r3, #97	; 0x61
 80026c4:	2203      	movs	r2, #3
 80026c6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	333d      	adds	r3, #61	; 0x3d
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d112      	bne.n	8002702 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	333c      	adds	r3, #60	; 0x3c
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d108      	bne.n	8002702 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	333d      	adds	r3, #61	; 0x3d
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f002 fae6 	bl	8004cde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	461a      	mov	r2, r3
 8002720:	2310      	movs	r3, #16
 8002722:	6093      	str	r3, [r2, #8]
}
 8002724:	e1e2      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	2b80      	cmp	r3, #128	; 0x80
 800273a:	d164      	bne.n	8002806 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	2206      	movs	r2, #6
 8002754:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fabc 	bl	8004cde <USB_HC_Halt>
 8002766:	e044      	b.n	80027f2 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	335c      	adds	r3, #92	; 0x5c
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	202c      	movs	r0, #44	; 0x2c
 8002780:	fb00 f303 	mul.w	r3, r0, r3
 8002784:	440b      	add	r3, r1
 8002786:	335c      	adds	r3, #92	; 0x5c
 8002788:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d920      	bls.n	80027e0 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	335c      	adds	r3, #92	; 0x5c
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3360      	adds	r3, #96	; 0x60
 80027be:	2204      	movs	r2, #4
 80027c0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	b2d9      	uxtb	r1, r3
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	202c      	movs	r0, #44	; 0x2c
 80027cc:	fb00 f303 	mul.w	r3, r0, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	3360      	adds	r3, #96	; 0x60
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff fabf 	bl	8001d5c <HAL_HCD_HC_NotifyURBChange_Callback>
 80027de:	e008      	b.n	80027f2 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fe:	461a      	mov	r2, r3
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	6093      	str	r3, [r2, #8]
}
 8002804:	e172      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281c:	d11b      	bne.n	8002856 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3361      	adds	r3, #97	; 0x61
 800282c:	2208      	movs	r2, #8
 800282e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fa4f 	bl	8004cde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	461a      	mov	r2, r3
 800284e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002852:	6093      	str	r3, [r2, #8]
}
 8002854:	e14a      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	f040 813f 	bne.w	8002aec <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3361      	adds	r3, #97	; 0x61
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d17d      	bne.n	800297e <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3360      	adds	r3, #96	; 0x60
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	333f      	adds	r3, #63	; 0x3f
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d00a      	beq.n	80028be <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	333f      	adds	r3, #63	; 0x3f
 80028b6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	f040 8100 	bne.w	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d113      	bne.n	80028ee <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	3355      	adds	r3, #85	; 0x55
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2d8      	uxtb	r0, r3
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3355      	adds	r3, #85	; 0x55
 80028ea:	4602      	mov	r2, r0
 80028ec:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	f040 80e3 	bne.w	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	334c      	adds	r3, #76	; 0x4c
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80d8 	beq.w	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	334c      	adds	r3, #76	; 0x4c
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	202c      	movs	r0, #44	; 0x2c
 8002924:	fb00 f202 	mul.w	r2, r0, r2
 8002928:	440a      	add	r2, r1
 800292a:	3240      	adds	r2, #64	; 0x40
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	4413      	add	r3, r2
 8002930:	3b01      	subs	r3, #1
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	202c      	movs	r0, #44	; 0x2c
 8002938:	fb00 f202 	mul.w	r2, r0, r2
 800293c:	440a      	add	r2, r1
 800293e:	3240      	adds	r2, #64	; 0x40
 8002940:	8812      	ldrh	r2, [r2, #0]
 8002942:	fbb3 f3f2 	udiv	r3, r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80b5 	beq.w	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3355      	adds	r3, #85	; 0x55
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	f083 0301 	eor.w	r3, r3, #1
 8002968:	b2d8      	uxtb	r0, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3355      	adds	r3, #85	; 0x55
 8002978:	4602      	mov	r2, r0
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e09f      	b.n	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	3361      	adds	r3, #97	; 0x61
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d109      	bne.n	80029a6 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	212c      	movs	r1, #44	; 0x2c
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	4413      	add	r3, r2
 800299e:	3360      	adds	r3, #96	; 0x60
 80029a0:	2202      	movs	r2, #2
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e08b      	b.n	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3361      	adds	r3, #97	; 0x61
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d109      	bne.n	80029ce <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3360      	adds	r3, #96	; 0x60
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e077      	b.n	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3361      	adds	r3, #97	; 0x61
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d109      	bne.n	80029f6 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3360      	adds	r3, #96	; 0x60
 80029f0:	2205      	movs	r2, #5
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e063      	b.n	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3361      	adds	r3, #97	; 0x61
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d009      	beq.n	8002a1e <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3361      	adds	r3, #97	; 0x61
 8002a18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d14f      	bne.n	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	335c      	adds	r3, #92	; 0x5c
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	202c      	movs	r0, #44	; 0x2c
 8002a36:	fb00 f303 	mul.w	r3, r0, r3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	335c      	adds	r3, #92	; 0x5c
 8002a3e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	335c      	adds	r3, #92	; 0x5c
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d912      	bls.n	8002a7a <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	335c      	adds	r3, #92	; 0x5c
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3360      	adds	r3, #96	; 0x60
 8002a74:	2204      	movs	r2, #4
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e021      	b.n	8002abe <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3360      	adds	r3, #96	; 0x60
 8002a88:	2202      	movs	r2, #2
 8002a8a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aa2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aaa:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	461a      	mov	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	2302      	movs	r3, #2
 8002ace:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	b2d9      	uxtb	r1, r3
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	202c      	movs	r0, #44	; 0x2c
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3360      	adds	r3, #96	; 0x60
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff f938 	bl	8001d5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aec:	bf00      	nop
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	0c5b      	lsrs	r3, r3, #17
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b28:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d004      	beq.n	8002b3a <HCD_RXQLVL_IRQHandler+0x46>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	f000 80a9 	beq.w	8002c8a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b38:	e0aa      	b.n	8002c90 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a6 	beq.w	8002c8e <HCD_RXQLVL_IRQHandler+0x19a>
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3344      	adds	r3, #68	; 0x44
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 809b 	beq.w	8002c8e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3350      	adds	r3, #80	; 0x50
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	441a      	add	r2, r3
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	202c      	movs	r0, #44	; 0x2c
 8002b72:	fb00 f303 	mul.w	r3, r0, r3
 8002b76:	440b      	add	r3, r1
 8002b78:	334c      	adds	r3, #76	; 0x4c
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d87a      	bhi.n	8002c76 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3344      	adds	r3, #68	; 0x44
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	b292      	uxth	r2, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f001 fee7 	bl	800496c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3344      	adds	r3, #68	; 0x44
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	441a      	add	r2, r3
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	202c      	movs	r0, #44	; 0x2c
 8002bb8:	fb00 f303 	mul.w	r3, r0, r3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3344      	adds	r3, #68	; 0x44
 8002bc0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3350      	adds	r3, #80	; 0x50
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	441a      	add	r2, r3
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	202c      	movs	r0, #44	; 0x2c
 8002bdc:	fb00 f303 	mul.w	r3, r0, r3
 8002be0:	440b      	add	r3, r1
 8002be2:	3350      	adds	r3, #80	; 0x50
 8002be4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	0cdb      	lsrs	r3, r3, #19
 8002bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bfa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3340      	adds	r3, #64	; 0x40
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d13c      	bne.n	8002c8e <HCD_RXQLVL_IRQHandler+0x19a>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d039      	beq.n	8002c8e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c30:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c38:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3354      	adds	r3, #84	; 0x54
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2d8      	uxtb	r0, r3
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3354      	adds	r3, #84	; 0x54
 8002c70:	4602      	mov	r2, r0
 8002c72:	701a      	strb	r2, [r3, #0]
      break;
 8002c74:	e00b      	b.n	8002c8e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3360      	adds	r3, #96	; 0x60
 8002c84:	2204      	movs	r2, #4
 8002c86:	701a      	strb	r2, [r3, #0]
      break;
 8002c88:	e001      	b.n	8002c8e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e000      	b.n	8002c90 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c8e:	bf00      	nop
  }
}
 8002c90:	bf00      	nop
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cc4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d10b      	bne.n	8002ce8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff f816 	bl	8001d0c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f043 0302 	orr.w	r3, r3, #2
 8002ce6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d132      	bne.n	8002d58 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f043 0308 	orr.w	r3, r3, #8
 8002cf8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d126      	bne.n	8002d52 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d113      	bne.n	8002d34 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d16:	d106      	bne.n	8002d26 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 ff92 	bl	8004c48 <USB_InitFSLSPClkSel>
 8002d24:	e011      	b.n	8002d4a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f001 ff8b 	bl	8004c48 <USB_InitFSLSPClkSel>
 8002d32:	e00a      	b.n	8002d4a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d106      	bne.n	8002d4a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d42:	461a      	mov	r2, r3
 8002d44:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d48:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fff2 	bl	8001d34 <HAL_HCD_PortEnabled_Callback>
 8002d50:	e002      	b.n	8002d58 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fff8 	bl	8001d48 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d103      	bne.n	8002d6a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f043 0320 	orr.w	r3, r3, #32
 8002d68:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d70:	461a      	mov	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	6013      	str	r3, [r2, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e267      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d075      	beq.n	8002e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9e:	4b88      	ldr	r3, [pc, #544]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d00c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002daa:	4b85      	ldr	r3, [pc, #532]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d112      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db6:	4b82      	ldr	r3, [pc, #520]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	4b7e      	ldr	r3, [pc, #504]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d05b      	beq.n	8002e88 <HAL_RCC_OscConfig+0x108>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d157      	bne.n	8002e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e242      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d106      	bne.n	8002df4 <HAL_RCC_OscConfig+0x74>
 8002de6:	4b76      	ldr	r3, [pc, #472]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a75      	ldr	r2, [pc, #468]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e01d      	b.n	8002e30 <HAL_RCC_OscConfig+0xb0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x98>
 8002dfe:	4b70      	ldr	r3, [pc, #448]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a6f      	ldr	r2, [pc, #444]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b6d      	ldr	r3, [pc, #436]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6c      	ldr	r2, [pc, #432]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0xb0>
 8002e18:	4b69      	ldr	r3, [pc, #420]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a68      	ldr	r2, [pc, #416]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b66      	ldr	r3, [pc, #408]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a65      	ldr	r2, [pc, #404]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe fa68 	bl	800130c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fe fa64 	bl	800130c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e207      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	4b5b      	ldr	r3, [pc, #364]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0xc0>
 8002e5e:	e014      	b.n	8002e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fa54 	bl	800130c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e68:	f7fe fa50 	bl	800130c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1f3      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0xe8>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d063      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e96:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d11c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eae:	4b44      	ldr	r3, [pc, #272]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	4b41      	ldr	r3, [pc, #260]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x152>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e1c7      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4937      	ldr	r1, [pc, #220]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	e03a      	b.n	8002f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef0:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <HAL_RCC_OscConfig+0x244>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fa09 	bl	800130c <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fe fa05 	bl	800130c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e1a8      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4925      	ldr	r1, [pc, #148]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f32:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <HAL_RCC_OscConfig+0x244>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe f9e8 	bl	800130c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fe f9e4 	bl	800130c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e187      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d036      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_RCC_OscConfig+0x248>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7fe f9c8 	bl	800130c <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f80:	f7fe f9c4 	bl	800130c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e167      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_OscConfig+0x240>)
 8002f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x200>
 8002f9e:	e01b      	b.n	8002fd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_OscConfig+0x248>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7fe f9b1 	bl	800130c <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	e00e      	b.n	8002fcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fae:	f7fe f9ad 	bl	800130c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d907      	bls.n	8002fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e150      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	42470000 	.word	0x42470000
 8002fc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	4b88      	ldr	r3, [pc, #544]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ea      	bne.n	8002fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8097 	beq.w	8003114 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fea:	4b81      	ldr	r3, [pc, #516]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10f      	bne.n	8003016 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	4b7d      	ldr	r3, [pc, #500]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	4a7c      	ldr	r2, [pc, #496]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	; 0x40
 8003006:	4b7a      	ldr	r3, [pc, #488]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003016:	4b77      	ldr	r3, [pc, #476]	; (80031f4 <HAL_RCC_OscConfig+0x474>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d118      	bne.n	8003054 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003022:	4b74      	ldr	r3, [pc, #464]	; (80031f4 <HAL_RCC_OscConfig+0x474>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a73      	ldr	r2, [pc, #460]	; (80031f4 <HAL_RCC_OscConfig+0x474>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302e:	f7fe f96d 	bl	800130c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003036:	f7fe f969 	bl	800130c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e10c      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCC_OscConfig+0x474>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x2ea>
 800305c:	4b64      	ldr	r3, [pc, #400]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	4a63      	ldr	r2, [pc, #396]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6713      	str	r3, [r2, #112]	; 0x70
 8003068:	e01c      	b.n	80030a4 <HAL_RCC_OscConfig+0x324>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b05      	cmp	r3, #5
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x30c>
 8003072:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003076:	4a5e      	ldr	r2, [pc, #376]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	6713      	str	r3, [r2, #112]	; 0x70
 800307e:	4b5c      	ldr	r3, [pc, #368]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a5b      	ldr	r2, [pc, #364]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0x324>
 800308c:	4b58      	ldr	r3, [pc, #352]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	4b55      	ldr	r3, [pc, #340]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a54      	ldr	r2, [pc, #336]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800309e:	f023 0304 	bic.w	r3, r3, #4
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d015      	beq.n	80030d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe f92e 	bl	800130c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fe f92a 	bl	800130c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0cb      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ca:	4b49      	ldr	r3, [pc, #292]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0ee      	beq.n	80030b4 <HAL_RCC_OscConfig+0x334>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7fe f918 	bl	800130c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fe f914 	bl	800130c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0b5      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f6:	4b3e      	ldr	r3, [pc, #248]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1ee      	bne.n	80030e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	4a38      	ldr	r2, [pc, #224]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a1 	beq.w	8003260 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800311e:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b08      	cmp	r3, #8
 8003128:	d05c      	beq.n	80031e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d141      	bne.n	80031b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <HAL_RCC_OscConfig+0x478>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fe f8e8 	bl	800130c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe f8e4 	bl	800130c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e087      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b27      	ldr	r3, [pc, #156]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	019b      	lsls	r3, r3, #6
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	3b01      	subs	r3, #1
 8003178:	041b      	lsls	r3, r3, #16
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	491b      	ldr	r1, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <HAL_RCC_OscConfig+0x478>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fe f8bd 	bl	800130c <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7fe f8b9 	bl	800130c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e05c      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x416>
 80031b4:	e054      	b.n	8003260 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_RCC_OscConfig+0x478>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe f8a6 	bl	800130c <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe f8a2 	bl	800130c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e045      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_RCC_OscConfig+0x470>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x444>
 80031e2:	e03d      	b.n	8003260 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e038      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000
 80031f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x4ec>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d028      	beq.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d121      	bne.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003222:	429a      	cmp	r2, r3
 8003224:	d11a      	bne.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003232:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003234:	4293      	cmp	r3, r2
 8003236:	d111      	bne.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	085b      	lsrs	r3, r3, #1
 8003244:	3b01      	subs	r3, #1
 8003246:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d107      	bne.n	800325c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800

08003270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0cc      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003284:	4b68      	ldr	r3, [pc, #416]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d90c      	bls.n	80032ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b65      	ldr	r3, [pc, #404]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b63      	ldr	r3, [pc, #396]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0b8      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c4:	4b59      	ldr	r3, [pc, #356]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a58      	ldr	r2, [pc, #352]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032dc:	4b53      	ldr	r3, [pc, #332]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4a52      	ldr	r2, [pc, #328]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e8:	4b50      	ldr	r3, [pc, #320]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	494d      	ldr	r1, [pc, #308]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d044      	beq.n	8003390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b47      	ldr	r3, [pc, #284]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d119      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e07f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d003      	beq.n	800332e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332a:	2b03      	cmp	r3, #3
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	4b3f      	ldr	r3, [pc, #252]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e067      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334e:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f023 0203 	bic.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4934      	ldr	r1, [pc, #208]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003360:	f7fd ffd4 	bl	800130c <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	e00a      	b.n	800337e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003368:	f7fd ffd0 	bl	800130c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e04f      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 020c 	and.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d1eb      	bne.n	8003368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d20c      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b20      	ldr	r3, [pc, #128]	; (8003428 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e032      	b.n	800341e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b19      	ldr	r3, [pc, #100]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4916      	ldr	r1, [pc, #88]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	490e      	ldr	r1, [pc, #56]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033f6:	f000 f821 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	490a      	ldr	r1, [pc, #40]	; (8003430 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	5ccb      	ldrb	r3, [r1, r3]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x1c8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd ff34 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023c00 	.word	0x40023c00
 800342c:	40023800 	.word	0x40023800
 8003430:	08004f48 	.word	0x08004f48
 8003434:	20000008 	.word	0x20000008
 8003438:	2000000c 	.word	0x2000000c

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003440:	b094      	sub	sp, #80	; 0x50
 8003442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	647b      	str	r3, [r7, #68]	; 0x44
 8003448:	2300      	movs	r3, #0
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800344c:	2300      	movs	r3, #0
 800344e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003454:	4b79      	ldr	r3, [pc, #484]	; (800363c <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d00d      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x40>
 8003460:	2b08      	cmp	r3, #8
 8003462:	f200 80e1 	bhi.w	8003628 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x34>
 800346a:	2b04      	cmp	r3, #4
 800346c:	d003      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x3a>
 800346e:	e0db      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b73      	ldr	r3, [pc, #460]	; (8003640 <HAL_RCC_GetSysClockFreq+0x204>)
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003474:	e0db      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003476:	4b73      	ldr	r3, [pc, #460]	; (8003644 <HAL_RCC_GetSysClockFreq+0x208>)
 8003478:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800347a:	e0d8      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800347c:	4b6f      	ldr	r3, [pc, #444]	; (800363c <HAL_RCC_GetSysClockFreq+0x200>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003486:	4b6d      	ldr	r3, [pc, #436]	; (800363c <HAL_RCC_GetSysClockFreq+0x200>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d063      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003492:	4b6a      	ldr	r3, [pc, #424]	; (800363c <HAL_RCC_GetSysClockFreq+0x200>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	099b      	lsrs	r3, r3, #6
 8003498:	2200      	movs	r2, #0
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
 800349c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30
 80034a6:	2300      	movs	r3, #0
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
 80034aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034ae:	4622      	mov	r2, r4
 80034b0:	462b      	mov	r3, r5
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	0159      	lsls	r1, r3, #5
 80034bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c0:	0150      	lsls	r0, r2, #5
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4621      	mov	r1, r4
 80034c8:	1a51      	subs	r1, r2, r1
 80034ca:	6139      	str	r1, [r7, #16]
 80034cc:	4629      	mov	r1, r5
 80034ce:	eb63 0301 	sbc.w	r3, r3, r1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034e0:	4659      	mov	r1, fp
 80034e2:	018b      	lsls	r3, r1, #6
 80034e4:	4651      	mov	r1, sl
 80034e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ea:	4651      	mov	r1, sl
 80034ec:	018a      	lsls	r2, r1, #6
 80034ee:	4651      	mov	r1, sl
 80034f0:	ebb2 0801 	subs.w	r8, r2, r1
 80034f4:	4659      	mov	r1, fp
 80034f6:	eb63 0901 	sbc.w	r9, r3, r1
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800350a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800350e:	4690      	mov	r8, r2
 8003510:	4699      	mov	r9, r3
 8003512:	4623      	mov	r3, r4
 8003514:	eb18 0303 	adds.w	r3, r8, r3
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	462b      	mov	r3, r5
 800351c:	eb49 0303 	adc.w	r3, r9, r3
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800352e:	4629      	mov	r1, r5
 8003530:	024b      	lsls	r3, r1, #9
 8003532:	4621      	mov	r1, r4
 8003534:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003538:	4621      	mov	r1, r4
 800353a:	024a      	lsls	r2, r1, #9
 800353c:	4610      	mov	r0, r2
 800353e:	4619      	mov	r1, r3
 8003540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003542:	2200      	movs	r2, #0
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
 8003546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003548:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800354c:	f7fc fe3c 	bl	80001c8 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4613      	mov	r3, r2
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003558:	e058      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355a:	4b38      	ldr	r3, [pc, #224]	; (800363c <HAL_RCC_GetSysClockFreq+0x200>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	2200      	movs	r2, #0
 8003562:	4618      	mov	r0, r3
 8003564:	4611      	mov	r1, r2
 8003566:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800356a:	623b      	str	r3, [r7, #32]
 800356c:	2300      	movs	r3, #0
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	f04f 0000 	mov.w	r0, #0
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	0159      	lsls	r1, r3, #5
 8003582:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003586:	0150      	lsls	r0, r2, #5
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4641      	mov	r1, r8
 800358e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003592:	4649      	mov	r1, r9
 8003594:	eb63 0b01 	sbc.w	fp, r3, r1
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035ac:	ebb2 040a 	subs.w	r4, r2, sl
 80035b0:	eb63 050b 	sbc.w	r5, r3, fp
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	00eb      	lsls	r3, r5, #3
 80035be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035c2:	00e2      	lsls	r2, r4, #3
 80035c4:	4614      	mov	r4, r2
 80035c6:	461d      	mov	r5, r3
 80035c8:	4643      	mov	r3, r8
 80035ca:	18e3      	adds	r3, r4, r3
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	464b      	mov	r3, r9
 80035d0:	eb45 0303 	adc.w	r3, r5, r3
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035e2:	4629      	mov	r1, r5
 80035e4:	028b      	lsls	r3, r1, #10
 80035e6:	4621      	mov	r1, r4
 80035e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035ec:	4621      	mov	r1, r4
 80035ee:	028a      	lsls	r2, r1, #10
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f6:	2200      	movs	r2, #0
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	61fa      	str	r2, [r7, #28]
 80035fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003600:	f7fc fde2 	bl	80001c8 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4613      	mov	r3, r2
 800360a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCC_GetSysClockFreq+0x200>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	3301      	adds	r3, #1
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800361c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800361e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003626:	e002      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetSysClockFreq+0x204>)
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800362c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003630:	4618      	mov	r0, r3
 8003632:	3750      	adds	r7, #80	; 0x50
 8003634:	46bd      	mov	sp, r7
 8003636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800
 8003640:	00f42400 	.word	0x00f42400
 8003644:	007a1200 	.word	0x007a1200

08003648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <HAL_RCC_GetHCLKFreq+0x14>)
 800364e:	681b      	ldr	r3, [r3, #0]
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000008 	.word	0x20000008

08003660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003664:	f7ff fff0 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0a9b      	lsrs	r3, r3, #10
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40023800 	.word	0x40023800
 8003684:	08004f58 	.word	0x08004f58

08003688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800368c:	f7ff ffdc 	bl	8003648 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0b5b      	lsrs	r3, r3, #13
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	08004f58 	.word	0x08004f58

080036b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e07b      	b.n	80037ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d108      	bne.n	80036dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d2:	d009      	beq.n	80036e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	61da      	str	r2, [r3, #28]
 80036da:	e005      	b.n	80036e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd fba0 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	ea42 0103 	orr.w	r1, r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	f003 0104 	and.w	r1, r3, #4
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0210 	and.w	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e03f      	b.n	8003854 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fb75 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2224      	movs	r2, #36	; 0x24
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003804:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fd1a 	bl	8004240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800382a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d130      	bne.n	80038d8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_UART_Transmit_IT+0x26>
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e029      	b.n	80038da <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_UART_Transmit_IT+0x38>
 8003890:	2302      	movs	r3, #2
 8003892:	e022      	b.n	80038da <HAL_UART_Transmit_IT+0x7e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	88fa      	ldrh	r2, [r7, #6]
 80038a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2221      	movs	r2, #33	; 0x21
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	4613      	mov	r3, r2
 80038f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d11d      	bne.n	800393c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_UART_Receive_IT+0x26>
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e016      	b.n	800393e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_UART_Receive_IT+0x38>
 800391a:	2302      	movs	r3, #2
 800391c:	e00f      	b.n	800393e <HAL_UART_Receive_IT+0x58>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	461a      	mov	r2, r3
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 faac 	bl	8003e90 <UART_Start_Receive_IT>
 8003938:	4603      	mov	r3, r0
 800393a:	e000      	b.n	800393e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b0ba      	sub	sp, #232	; 0xe8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10f      	bne.n	80039ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_UART_IRQHandler+0x66>
 800399a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fb8f 	bl	80040ca <UART_Receive_IT>
      return;
 80039ac:	e256      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80de 	beq.w	8003b74 <HAL_UART_IRQHandler+0x22c>
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80d1 	beq.w	8003b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_UART_IRQHandler+0xae>
 80039de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xd2>
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0202 	orr.w	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_UART_IRQHandler+0xf6>
 8003a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d011      	beq.n	8003a6e <HAL_UART_IRQHandler+0x126>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f043 0208 	orr.w	r2, r3, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 81ed 	beq.w	8003e52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_UART_IRQHandler+0x14e>
 8003a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fb1a 	bl	80040ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x17a>
 8003aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d04f      	beq.n	8003b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa22 	bl	8003f0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	d141      	bne.n	8003b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3314      	adds	r3, #20
 8003afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1d9      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d013      	beq.n	8003b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	4a7d      	ldr	r2, [pc, #500]	; (8003d24 <HAL_UART_IRQHandler+0x3dc>)
 8003b30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd fd99 	bl	800166e <HAL_DMA_Abort_IT>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	e00e      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f986 	bl	8003e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	e00a      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f982 	bl	8003e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	e006      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f97e 	bl	8003e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b6e:	e170      	b.n	8003e52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	bf00      	nop
    return;
 8003b72:	e16e      	b.n	8003e52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f040 814a 	bne.w	8003e12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8143 	beq.w	8003e12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 813c 	beq.w	8003e12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	f040 80b4 	bne.w	8003d28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8140 	beq.w	8003e56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bde:	429a      	cmp	r2, r3
 8003be0:	f080 8139 	bcs.w	8003e56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf6:	f000 8088 	beq.w	8003d0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	330c      	adds	r3, #12
 8003c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1d9      	bne.n	8003bfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3314      	adds	r3, #20
 8003c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e1      	bne.n	8003c46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ca8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e3      	bne.n	8003c82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cec:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e3      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fd fc42 	bl	800158e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8ac 	bl	8003e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d20:	e099      	b.n	8003e56 <HAL_UART_IRQHandler+0x50e>
 8003d22:	bf00      	nop
 8003d24:	08003fd3 	.word	0x08003fd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 808b 	beq.w	8003e5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8086 	beq.w	8003e5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d72:	647a      	str	r2, [r7, #68]	; 0x44
 8003d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e3      	bne.n	8003d4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	623b      	str	r3, [r7, #32]
   return(result);
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003daa:	633a      	str	r2, [r7, #48]	; 0x30
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e3      	bne.n	8003d86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0310 	bic.w	r3, r3, #16
 8003de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	69b9      	ldr	r1, [r7, #24]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e3      	bne.n	8003dcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f834 	bl	8003e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e10:	e023      	b.n	8003e5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_UART_IRQHandler+0x4ea>
 8003e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8e5 	bl	8003ffa <UART_Transmit_IT>
    return;
 8003e30:	e014      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00e      	beq.n	8003e5c <HAL_UART_IRQHandler+0x514>
 8003e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f925 	bl	800409a <UART_EndTransmit_IT>
    return;
 8003e50:	e004      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
    return;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
      return;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
      return;
 8003e5a:	bf00      	nop
  }
}
 8003e5c:	37e8      	adds	r7, #232	; 0xe8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop

08003e64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2222      	movs	r2, #34	; 0x22
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003edc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0220 	orr.w	r2, r2, #32
 8003efc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b095      	sub	sp, #84	; 0x54
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f34:	643a      	str	r2, [r7, #64]	; 0x40
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f3c:	e841 2300 	strex	r3, r2, [r1]
 8003f40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e5      	bne.n	8003f14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3314      	adds	r3, #20
 8003f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e5      	bne.n	8003f48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d119      	bne.n	8003fb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 0310 	bic.w	r3, r3, #16
 8003f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa4:	61ba      	str	r2, [r7, #24]
 8003fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fc6:	bf00      	nop
 8003fc8:	3754      	adds	r7, #84	; 0x54
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff ff39 	bl	8003e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b21      	cmp	r3, #33	; 0x21
 800400c:	d13e      	bne.n	800408c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004016:	d114      	bne.n	8004042 <UART_Transmit_IT+0x48>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d110      	bne.n	8004042 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004034:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	1c9a      	adds	r2, r3, #2
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	621a      	str	r2, [r3, #32]
 8004040:	e008      	b.n	8004054 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	1c59      	adds	r1, r3, #1
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6211      	str	r1, [r2, #32]
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29b      	uxth	r3, r3
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4619      	mov	r1, r3
 8004062:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10f      	bne.n	8004088 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004076:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004086:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fbf2 	bl	80008a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b08c      	sub	sp, #48	; 0x30
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b22      	cmp	r3, #34	; 0x22
 80040dc:	f040 80ab 	bne.w	8004236 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d117      	bne.n	800411a <UART_Receive_IT+0x50>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d113      	bne.n	800411a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004108:	b29a      	uxth	r2, r3
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	1c9a      	adds	r2, r3, #2
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
 8004118:	e026      	b.n	8004168 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	d007      	beq.n	800413e <UART_Receive_IT+0x74>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <UART_Receive_IT+0x82>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e008      	b.n	800415e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004158:	b2da      	uxtb	r2, r3
 800415a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29b      	uxth	r3, r3
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4619      	mov	r1, r3
 8004176:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004178:	2b00      	cmp	r3, #0
 800417a:	d15a      	bne.n	8004232 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0220 	bic.w	r2, r2, #32
 800418a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800419a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d135      	bne.n	8004228 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	330c      	adds	r3, #12
 80041c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	613b      	str	r3, [r7, #16]
   return(result);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f023 0310 	bic.w	r3, r3, #16
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	623a      	str	r2, [r7, #32]
 80041e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	69f9      	ldr	r1, [r7, #28]
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e5      	bne.n	80041c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d10a      	bne.n	800421a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff fe29 	bl	8003e78 <HAL_UARTEx_RxEventCallback>
 8004226:	e002      	b.n	800422e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fc fb19 	bl	8000860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e002      	b.n	8004238 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3730      	adds	r7, #48	; 0x30
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004244:	b0c0      	sub	sp, #256	; 0x100
 8004246:	af00      	add	r7, sp, #0
 8004248:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	ea40 0301 	orr.w	r3, r0, r1
 8004268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	431a      	orrs	r2, r3
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	431a      	orrs	r2, r3
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004298:	f021 010c 	bic.w	r1, r1, #12
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042a6:	430b      	orrs	r3, r1
 80042a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	6999      	ldr	r1, [r3, #24]
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	ea40 0301 	orr.w	r3, r0, r1
 80042c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b8f      	ldr	r3, [pc, #572]	; (800450c <UART_SetConfig+0x2cc>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d005      	beq.n	80042e0 <UART_SetConfig+0xa0>
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b8d      	ldr	r3, [pc, #564]	; (8004510 <UART_SetConfig+0x2d0>)
 80042dc:	429a      	cmp	r2, r3
 80042de:	d104      	bne.n	80042ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7ff f9d2 	bl	8003688 <HAL_RCC_GetPCLK2Freq>
 80042e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042e8:	e003      	b.n	80042f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ea:	f7ff f9b9 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 80042ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fc:	f040 810c 	bne.w	8004518 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004304:	2200      	movs	r2, #0
 8004306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800430a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800430e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004312:	4622      	mov	r2, r4
 8004314:	462b      	mov	r3, r5
 8004316:	1891      	adds	r1, r2, r2
 8004318:	65b9      	str	r1, [r7, #88]	; 0x58
 800431a:	415b      	adcs	r3, r3
 800431c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800431e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004322:	4621      	mov	r1, r4
 8004324:	eb12 0801 	adds.w	r8, r2, r1
 8004328:	4629      	mov	r1, r5
 800432a:	eb43 0901 	adc.w	r9, r3, r1
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004342:	4690      	mov	r8, r2
 8004344:	4699      	mov	r9, r3
 8004346:	4623      	mov	r3, r4
 8004348:	eb18 0303 	adds.w	r3, r8, r3
 800434c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004350:	462b      	mov	r3, r5
 8004352:	eb49 0303 	adc.w	r3, r9, r3
 8004356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004366:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800436a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800436e:	460b      	mov	r3, r1
 8004370:	18db      	adds	r3, r3, r3
 8004372:	653b      	str	r3, [r7, #80]	; 0x50
 8004374:	4613      	mov	r3, r2
 8004376:	eb42 0303 	adc.w	r3, r2, r3
 800437a:	657b      	str	r3, [r7, #84]	; 0x54
 800437c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004380:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004384:	f7fb ff20 	bl	80001c8 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4b61      	ldr	r3, [pc, #388]	; (8004514 <UART_SetConfig+0x2d4>)
 800438e:	fba3 2302 	umull	r2, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	011c      	lsls	r4, r3, #4
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80043b0:	415b      	adcs	r3, r3
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043b8:	4641      	mov	r1, r8
 80043ba:	eb12 0a01 	adds.w	sl, r2, r1
 80043be:	4649      	mov	r1, r9
 80043c0:	eb43 0b01 	adc.w	fp, r3, r1
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d8:	4692      	mov	sl, r2
 80043da:	469b      	mov	fp, r3
 80043dc:	4643      	mov	r3, r8
 80043de:	eb1a 0303 	adds.w	r3, sl, r3
 80043e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043e6:	464b      	mov	r3, r9
 80043e8:	eb4b 0303 	adc.w	r3, fp, r3
 80043ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004400:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004404:	460b      	mov	r3, r1
 8004406:	18db      	adds	r3, r3, r3
 8004408:	643b      	str	r3, [r7, #64]	; 0x40
 800440a:	4613      	mov	r3, r2
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
 8004412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004416:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800441a:	f7fb fed5 	bl	80001c8 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4611      	mov	r1, r2
 8004424:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <UART_SetConfig+0x2d4>)
 8004426:	fba3 2301 	umull	r2, r3, r3, r1
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2264      	movs	r2, #100	; 0x64
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	1acb      	subs	r3, r1, r3
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800443a:	4b36      	ldr	r3, [pc, #216]	; (8004514 <UART_SetConfig+0x2d4>)
 800443c:	fba3 2302 	umull	r2, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004448:	441c      	add	r4, r3
 800444a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004454:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004458:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	63b9      	str	r1, [r7, #56]	; 0x38
 8004464:	415b      	adcs	r3, r3
 8004466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800446c:	4641      	mov	r1, r8
 800446e:	1851      	adds	r1, r2, r1
 8004470:	6339      	str	r1, [r7, #48]	; 0x30
 8004472:	4649      	mov	r1, r9
 8004474:	414b      	adcs	r3, r1
 8004476:	637b      	str	r3, [r7, #52]	; 0x34
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004484:	4659      	mov	r1, fp
 8004486:	00cb      	lsls	r3, r1, #3
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448e:	4651      	mov	r1, sl
 8004490:	00ca      	lsls	r2, r1, #3
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	4603      	mov	r3, r0
 8004498:	4642      	mov	r2, r8
 800449a:	189b      	adds	r3, r3, r2
 800449c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044a0:	464b      	mov	r3, r9
 80044a2:	460a      	mov	r2, r1
 80044a4:	eb42 0303 	adc.w	r3, r2, r3
 80044a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044c0:	460b      	mov	r3, r1
 80044c2:	18db      	adds	r3, r3, r3
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c6:	4613      	mov	r3, r2
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044d6:	f7fb fe77 	bl	80001c8 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <UART_SetConfig+0x2d4>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	; 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	3332      	adds	r3, #50	; 0x32
 80044f2:	4a08      	ldr	r2, [pc, #32]	; (8004514 <UART_SetConfig+0x2d4>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f003 0207 	and.w	r2, r3, #7
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4422      	add	r2, r4
 8004506:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004508:	e105      	b.n	8004716 <UART_SetConfig+0x4d6>
 800450a:	bf00      	nop
 800450c:	40011000 	.word	0x40011000
 8004510:	40011400 	.word	0x40011400
 8004514:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451c:	2200      	movs	r2, #0
 800451e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004522:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004526:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800452a:	4642      	mov	r2, r8
 800452c:	464b      	mov	r3, r9
 800452e:	1891      	adds	r1, r2, r2
 8004530:	6239      	str	r1, [r7, #32]
 8004532:	415b      	adcs	r3, r3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800453a:	4641      	mov	r1, r8
 800453c:	1854      	adds	r4, r2, r1
 800453e:	4649      	mov	r1, r9
 8004540:	eb43 0501 	adc.w	r5, r3, r1
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	00eb      	lsls	r3, r5, #3
 800454e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004552:	00e2      	lsls	r2, r4, #3
 8004554:	4614      	mov	r4, r2
 8004556:	461d      	mov	r5, r3
 8004558:	4643      	mov	r3, r8
 800455a:	18e3      	adds	r3, r4, r3
 800455c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004560:	464b      	mov	r3, r9
 8004562:	eb45 0303 	adc.w	r3, r5, r3
 8004566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004576:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004586:	4629      	mov	r1, r5
 8004588:	008b      	lsls	r3, r1, #2
 800458a:	4621      	mov	r1, r4
 800458c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004590:	4621      	mov	r1, r4
 8004592:	008a      	lsls	r2, r1, #2
 8004594:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004598:	f7fb fe16 	bl	80001c8 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4b60      	ldr	r3, [pc, #384]	; (8004724 <UART_SetConfig+0x4e4>)
 80045a2:	fba3 2302 	umull	r2, r3, r3, r2
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	011c      	lsls	r4, r3, #4
 80045aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	61b9      	str	r1, [r7, #24]
 80045c4:	415b      	adcs	r3, r3
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045cc:	4641      	mov	r1, r8
 80045ce:	1851      	adds	r1, r2, r1
 80045d0:	6139      	str	r1, [r7, #16]
 80045d2:	4649      	mov	r1, r9
 80045d4:	414b      	adcs	r3, r1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e4:	4659      	mov	r1, fp
 80045e6:	00cb      	lsls	r3, r1, #3
 80045e8:	4651      	mov	r1, sl
 80045ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ee:	4651      	mov	r1, sl
 80045f0:	00ca      	lsls	r2, r1, #3
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	4642      	mov	r2, r8
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004600:	464b      	mov	r3, r9
 8004602:	460a      	mov	r2, r1
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	67bb      	str	r3, [r7, #120]	; 0x78
 8004616:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004624:	4649      	mov	r1, r9
 8004626:	008b      	lsls	r3, r1, #2
 8004628:	4641      	mov	r1, r8
 800462a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462e:	4641      	mov	r1, r8
 8004630:	008a      	lsls	r2, r1, #2
 8004632:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004636:	f7fb fdc7 	bl	80001c8 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4b39      	ldr	r3, [pc, #228]	; (8004724 <UART_SetConfig+0x4e4>)
 8004640:	fba3 1302 	umull	r1, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2164      	movs	r1, #100	; 0x64
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	3332      	adds	r3, #50	; 0x32
 8004652:	4a34      	ldr	r2, [pc, #208]	; (8004724 <UART_SetConfig+0x4e4>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465e:	441c      	add	r4, r3
 8004660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004664:	2200      	movs	r2, #0
 8004666:	673b      	str	r3, [r7, #112]	; 0x70
 8004668:	677a      	str	r2, [r7, #116]	; 0x74
 800466a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800466e:	4642      	mov	r2, r8
 8004670:	464b      	mov	r3, r9
 8004672:	1891      	adds	r1, r2, r2
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	415b      	adcs	r3, r3
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800467e:	4641      	mov	r1, r8
 8004680:	1851      	adds	r1, r2, r1
 8004682:	6039      	str	r1, [r7, #0]
 8004684:	4649      	mov	r1, r9
 8004686:	414b      	adcs	r3, r1
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004696:	4659      	mov	r1, fp
 8004698:	00cb      	lsls	r3, r1, #3
 800469a:	4651      	mov	r1, sl
 800469c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a0:	4651      	mov	r1, sl
 80046a2:	00ca      	lsls	r2, r1, #3
 80046a4:	4610      	mov	r0, r2
 80046a6:	4619      	mov	r1, r3
 80046a8:	4603      	mov	r3, r0
 80046aa:	4642      	mov	r2, r8
 80046ac:	189b      	adds	r3, r3, r2
 80046ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80046b0:	464b      	mov	r3, r9
 80046b2:	460a      	mov	r2, r1
 80046b4:	eb42 0303 	adc.w	r3, r2, r3
 80046b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	663b      	str	r3, [r7, #96]	; 0x60
 80046c4:	667a      	str	r2, [r7, #100]	; 0x64
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046d2:	4649      	mov	r1, r9
 80046d4:	008b      	lsls	r3, r1, #2
 80046d6:	4641      	mov	r1, r8
 80046d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046dc:	4641      	mov	r1, r8
 80046de:	008a      	lsls	r2, r1, #2
 80046e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046e4:	f7fb fd70 	bl	80001c8 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <UART_SetConfig+0x4e4>)
 80046ee:	fba3 1302 	umull	r1, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2164      	movs	r1, #100	; 0x64
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	3332      	adds	r3, #50	; 0x32
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <UART_SetConfig+0x4e4>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4422      	add	r2, r4
 8004714:	609a      	str	r2, [r3, #8]
}
 8004716:	bf00      	nop
 8004718:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004722:	bf00      	nop
 8004724:	51eb851f 	.word	0x51eb851f

08004728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004728:	b084      	sub	sp, #16
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	f107 001c 	add.w	r0, r7, #28
 8004736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	2b01      	cmp	r3, #1
 800473e:	d122      	bne.n	8004786 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476a:	2b01      	cmp	r3, #1
 800476c:	d105      	bne.n	800477a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f970 	bl	8004a60 <USB_CoreReset>
 8004780:	4603      	mov	r3, r0
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	e01a      	b.n	80047bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f964 	bl	8004a60 <USB_CoreReset>
 8004798:	4603      	mov	r3, r0
 800479a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800479c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
 80047ae:	e005      	b.n	80047bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d10b      	bne.n	80047da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f043 0206 	orr.w	r2, r3, #6
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047e6:	b004      	add	sp, #16
 80047e8:	4770      	bx	lr

080047ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d115      	bne.n	800485a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800483a:	2001      	movs	r0, #1
 800483c:	f7fc fd72 	bl	8001324 <HAL_Delay>
      ms++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8fb 	bl	8004a42 <USB_GetMode>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d01e      	beq.n	8004890 <USB_SetCurrentMode+0x84>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b31      	cmp	r3, #49	; 0x31
 8004856:	d9f0      	bls.n	800483a <USB_SetCurrentMode+0x2e>
 8004858:	e01a      	b.n	8004890 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d115      	bne.n	800488c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800486c:	2001      	movs	r0, #1
 800486e:	f7fc fd59 	bl	8001324 <HAL_Delay>
      ms++;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3301      	adds	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f8e2 	bl	8004a42 <USB_GetMode>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <USB_SetCurrentMode+0x84>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b31      	cmp	r3, #49	; 0x31
 8004888:	d9f0      	bls.n	800486c <USB_SetCurrentMode+0x60>
 800488a:	e001      	b.n	8004890 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e005      	b.n	800489c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b32      	cmp	r3, #50	; 0x32
 8004894:	d101      	bne.n	800489a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3301      	adds	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a13      	ldr	r2, [pc, #76]	; (8004908 <USB_FlushTxFifo+0x64>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e01b      	b.n	80048fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	daf2      	bge.n	80048b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	019b      	lsls	r3, r3, #6
 80048d4:	f043 0220 	orr.w	r2, r3, #32
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a08      	ldr	r2, [pc, #32]	; (8004908 <USB_FlushTxFifo+0x64>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e006      	b.n	80048fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d0f0      	beq.n	80048dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	00030d40 	.word	0x00030d40

0800490c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a11      	ldr	r2, [pc, #68]	; (8004968 <USB_FlushRxFifo+0x5c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e018      	b.n	800495c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	daf2      	bge.n	8004918 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2210      	movs	r2, #16
 800493a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a08      	ldr	r2, [pc, #32]	; (8004968 <USB_FlushRxFifo+0x5c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e006      	b.n	800495c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d0f0      	beq.n	800493c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	00030d40 	.word	0x00030d40

0800496c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800496c:	b480      	push	{r7}
 800496e:	b08b      	sub	sp, #44	; 0x2c
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	b29b      	uxth	r3, r3
 8004988:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	e014      	b.n	80049c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	3301      	adds	r3, #1
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	3301      	adds	r3, #1
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	3301      	adds	r3, #1
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	3301      	adds	r3, #1
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	3301      	adds	r3, #1
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	6a3a      	ldr	r2, [r7, #32]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d3e6      	bcc.n	8004998 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049ca:	8bfb      	ldrh	r3, [r7, #30]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01e      	beq.n	8004a0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049da:	461a      	mov	r2, r3
 80049dc:	f107 0310 	add.w	r3, r7, #16
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	701a      	strb	r2, [r3, #0]
      i++;
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	3301      	adds	r3, #1
 80049fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	3301      	adds	r3, #1
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a02:	8bfb      	ldrh	r3, [r7, #30]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a08:	8bfb      	ldrh	r3, [r7, #30]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ea      	bne.n	80049e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	372c      	adds	r7, #44	; 0x2c
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4013      	ands	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a34:	68fb      	ldr	r3, [r7, #12]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <USB_CoreReset+0x64>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e01b      	b.n	8004ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	daf2      	bge.n	8004a6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f043 0201 	orr.w	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <USB_CoreReset+0x64>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e006      	b.n	8004ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d0f0      	beq.n	8004a96 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	00030d40 	.word	0x00030d40

08004ac8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ac8:	b084      	sub	sp, #16
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b086      	sub	sp, #24
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2300      	movs	r3, #0
 8004aec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10a      	bne.n	8004b3a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b32:	f043 0304 	orr.w	r3, r3, #4
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	e014      	b.n	8004b64 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e009      	b.n	8004b64 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b5e:	f023 0304 	bic.w	r3, r3, #4
 8004b62:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b64:	2110      	movs	r1, #16
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fe9c 	bl	80048a4 <USB_FlushTxFifo>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fec8 	bl	800490c <USB_FlushRxFifo>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	e015      	b.n	8004bb8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bac:	461a      	mov	r2, r3
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d3e5      	bcc.n	8004b8c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bcc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <USB_HostInit+0x16c>)
 8004be6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <USB_HostInit+0x170>)
 8004bec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004bf0:	e009      	b.n	8004c06 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2280      	movs	r2, #128	; 0x80
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <USB_HostInit+0x174>)
 8004bfc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <USB_HostInit+0x178>)
 8004c02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f043 0210 	orr.w	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699a      	ldr	r2, [r3, #24]
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <USB_HostInit+0x17c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c30:	b004      	add	sp, #16
 8004c32:	4770      	bx	lr
 8004c34:	01000200 	.word	0x01000200
 8004c38:	00e00300 	.word	0x00e00300
 8004c3c:	00600080 	.word	0x00600080
 8004c40:	004000e0 	.word	0x004000e0
 8004c44:	a3200008 	.word	0xa3200008

08004c48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	460b      	mov	r3, r1
 8004c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c80:	4313      	orrs	r3, r2
 8004c82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d107      	bne.n	8004c9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c90:	461a      	mov	r2, r3
 8004c92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c96:	6053      	str	r3, [r2, #4]
 8004c98:	e009      	b.n	8004cae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d106      	bne.n	8004cae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f241 7370 	movw	r3, #6000	; 0x1770
 8004cac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	b29b      	uxth	r3, r3
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b089      	sub	sp, #36	; 0x24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	0c9b      	lsrs	r3, r3, #18
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	0fdb      	lsrs	r3, r3, #31
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d104      	bne.n	8004d38 <USB_HC_Halt+0x5a>
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e0c8      	b.n	8004eca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <USB_HC_Halt+0x66>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d163      	bne.n	8004e0c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d62:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f040 80ab 	bne.w	8004ec8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d133      	bne.n	8004de6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d9c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dbc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dca:	d81d      	bhi.n	8004e08 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004de2:	d0ec      	beq.n	8004dbe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004de4:	e070      	b.n	8004ec8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e04:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e06:	e05f      	b.n	8004ec8 <USB_HC_Halt+0x1ea>
            break;
 8004e08:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e0a:	e05d      	b.n	8004ec8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e2a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d133      	bne.n	8004ea4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e5a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e7a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e88:	d81d      	bhi.n	8004ec6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea0:	d0ec      	beq.n	8004e7c <USB_HC_Halt+0x19e>
 8004ea2:	e011      	b.n	8004ec8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	e000      	b.n	8004ec8 <USB_HC_Halt+0x1ea>
          break;
 8004ec6:	bf00      	nop
    }
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3724      	adds	r7, #36	; 0x24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <__libc_init_array>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	4d0d      	ldr	r5, [pc, #52]	; (8004f10 <__libc_init_array+0x38>)
 8004edc:	4c0d      	ldr	r4, [pc, #52]	; (8004f14 <__libc_init_array+0x3c>)
 8004ede:	1b64      	subs	r4, r4, r5
 8004ee0:	10a4      	asrs	r4, r4, #2
 8004ee2:	2600      	movs	r6, #0
 8004ee4:	42a6      	cmp	r6, r4
 8004ee6:	d109      	bne.n	8004efc <__libc_init_array+0x24>
 8004ee8:	4d0b      	ldr	r5, [pc, #44]	; (8004f18 <__libc_init_array+0x40>)
 8004eea:	4c0c      	ldr	r4, [pc, #48]	; (8004f1c <__libc_init_array+0x44>)
 8004eec:	f000 f820 	bl	8004f30 <_init>
 8004ef0:	1b64      	subs	r4, r4, r5
 8004ef2:	10a4      	asrs	r4, r4, #2
 8004ef4:	2600      	movs	r6, #0
 8004ef6:	42a6      	cmp	r6, r4
 8004ef8:	d105      	bne.n	8004f06 <__libc_init_array+0x2e>
 8004efa:	bd70      	pop	{r4, r5, r6, pc}
 8004efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f00:	4798      	blx	r3
 8004f02:	3601      	adds	r6, #1
 8004f04:	e7ee      	b.n	8004ee4 <__libc_init_array+0xc>
 8004f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0a:	4798      	blx	r3
 8004f0c:	3601      	adds	r6, #1
 8004f0e:	e7f2      	b.n	8004ef6 <__libc_init_array+0x1e>
 8004f10:	08004f68 	.word	0x08004f68
 8004f14:	08004f68 	.word	0x08004f68
 8004f18:	08004f68 	.word	0x08004f68
 8004f1c:	08004f6c 	.word	0x08004f6c

08004f20 <memset>:
 8004f20:	4402      	add	r2, r0
 8004f22:	4603      	mov	r3, r0
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d100      	bne.n	8004f2a <memset+0xa>
 8004f28:	4770      	bx	lr
 8004f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f2e:	e7f9      	b.n	8004f24 <memset+0x4>

08004f30 <_init>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr

08004f3c <_fini>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr
