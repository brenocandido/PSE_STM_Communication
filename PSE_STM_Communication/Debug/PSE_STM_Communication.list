
PSE_STM_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007194  08007194  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800719c  0800719c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080071a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000070c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000720  20000720  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c33  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002941  00000000  00000000  00034c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  000375b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001110  00000000  00000000  000387c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f00  00000000  00000000  000398d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142d7  00000000  00000000  0005b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6e6  00000000  00000000  0006faa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e18d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e54  00000000  00000000  0013e1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007164 	.word	0x08007164

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007164 	.word	0x08007164

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b974 	b.w	8000b34 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468e      	mov	lr, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	d14d      	bne.n	800090e <__udivmoddi4+0xaa>
 8000872:	428a      	cmp	r2, r1
 8000874:	4694      	mov	ip, r2
 8000876:	d969      	bls.n	800094c <__udivmoddi4+0xe8>
 8000878:	fab2 f282 	clz	r2, r2
 800087c:	b152      	cbz	r2, 8000894 <__udivmoddi4+0x30>
 800087e:	fa01 f302 	lsl.w	r3, r1, r2
 8000882:	f1c2 0120 	rsb	r1, r2, #32
 8000886:	fa20 f101 	lsr.w	r1, r0, r1
 800088a:	fa0c fc02 	lsl.w	ip, ip, r2
 800088e:	ea41 0e03 	orr.w	lr, r1, r3
 8000892:	4094      	lsls	r4, r2
 8000894:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000898:	0c21      	lsrs	r1, r4, #16
 800089a:	fbbe f6f8 	udiv	r6, lr, r8
 800089e:	fa1f f78c 	uxth.w	r7, ip
 80008a2:	fb08 e316 	mls	r3, r8, r6, lr
 80008a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008aa:	fb06 f107 	mul.w	r1, r6, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d90a      	bls.n	80008c8 <__udivmoddi4+0x64>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ba:	f080 811f 	bcs.w	8000afc <__udivmoddi4+0x298>
 80008be:	4299      	cmp	r1, r3
 80008c0:	f240 811c 	bls.w	8000afc <__udivmoddi4+0x298>
 80008c4:	3e02      	subs	r6, #2
 80008c6:	4463      	add	r3, ip
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	b2a4      	uxth	r4, r4
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d8:	fb00 f707 	mul.w	r7, r0, r7
 80008dc:	42a7      	cmp	r7, r4
 80008de:	d90a      	bls.n	80008f6 <__udivmoddi4+0x92>
 80008e0:	eb1c 0404 	adds.w	r4, ip, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	f080 810a 	bcs.w	8000b00 <__udivmoddi4+0x29c>
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	f240 8107 	bls.w	8000b00 <__udivmoddi4+0x29c>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fa:	1be4      	subs	r4, r4, r7
 80008fc:	2600      	movs	r6, #0
 80008fe:	b11d      	cbz	r5, 8000908 <__udivmoddi4+0xa4>
 8000900:	40d4      	lsrs	r4, r2
 8000902:	2300      	movs	r3, #0
 8000904:	e9c5 4300 	strd	r4, r3, [r5]
 8000908:	4631      	mov	r1, r6
 800090a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090e:	428b      	cmp	r3, r1
 8000910:	d909      	bls.n	8000926 <__udivmoddi4+0xc2>
 8000912:	2d00      	cmp	r5, #0
 8000914:	f000 80ef 	beq.w	8000af6 <__udivmoddi4+0x292>
 8000918:	2600      	movs	r6, #0
 800091a:	e9c5 0100 	strd	r0, r1, [r5]
 800091e:	4630      	mov	r0, r6
 8000920:	4631      	mov	r1, r6
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	fab3 f683 	clz	r6, r3
 800092a:	2e00      	cmp	r6, #0
 800092c:	d14a      	bne.n	80009c4 <__udivmoddi4+0x160>
 800092e:	428b      	cmp	r3, r1
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xd4>
 8000932:	4282      	cmp	r2, r0
 8000934:	f200 80f9 	bhi.w	8000b2a <__udivmoddi4+0x2c6>
 8000938:	1a84      	subs	r4, r0, r2
 800093a:	eb61 0303 	sbc.w	r3, r1, r3
 800093e:	2001      	movs	r0, #1
 8000940:	469e      	mov	lr, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e0      	beq.n	8000908 <__udivmoddi4+0xa4>
 8000946:	e9c5 4e00 	strd	r4, lr, [r5]
 800094a:	e7dd      	b.n	8000908 <__udivmoddi4+0xa4>
 800094c:	b902      	cbnz	r2, 8000950 <__udivmoddi4+0xec>
 800094e:	deff      	udf	#255	; 0xff
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	2a00      	cmp	r2, #0
 8000956:	f040 8092 	bne.w	8000a7e <__udivmoddi4+0x21a>
 800095a:	eba1 010c 	sub.w	r1, r1, ip
 800095e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000962:	fa1f fe8c 	uxth.w	lr, ip
 8000966:	2601      	movs	r6, #1
 8000968:	0c20      	lsrs	r0, r4, #16
 800096a:	fbb1 f3f7 	udiv	r3, r1, r7
 800096e:	fb07 1113 	mls	r1, r7, r3, r1
 8000972:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000976:	fb0e f003 	mul.w	r0, lr, r3
 800097a:	4288      	cmp	r0, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0x12c>
 800097e:	eb1c 0101 	adds.w	r1, ip, r1
 8000982:	f103 38ff 	add.w	r8, r3, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x12a>
 8000988:	4288      	cmp	r0, r1
 800098a:	f200 80cb 	bhi.w	8000b24 <__udivmoddi4+0x2c0>
 800098e:	4643      	mov	r3, r8
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1110 	mls	r1, r7, r0, r1
 800099c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a0:	fb0e fe00 	mul.w	lr, lr, r0
 80009a4:	45a6      	cmp	lr, r4
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x156>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b0:	d202      	bcs.n	80009b8 <__udivmoddi4+0x154>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f200 80bb 	bhi.w	8000b2e <__udivmoddi4+0x2ca>
 80009b8:	4608      	mov	r0, r1
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c2:	e79c      	b.n	80008fe <__udivmoddi4+0x9a>
 80009c4:	f1c6 0720 	rsb	r7, r6, #32
 80009c8:	40b3      	lsls	r3, r6
 80009ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d2:	fa20 f407 	lsr.w	r4, r0, r7
 80009d6:	fa01 f306 	lsl.w	r3, r1, r6
 80009da:	431c      	orrs	r4, r3
 80009dc:	40f9      	lsrs	r1, r7
 80009de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e2:	fa00 f306 	lsl.w	r3, r0, r6
 80009e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ea:	0c20      	lsrs	r0, r4, #16
 80009ec:	fa1f fe8c 	uxth.w	lr, ip
 80009f0:	fb09 1118 	mls	r1, r9, r8, r1
 80009f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f8:	fb08 f00e 	mul.w	r0, r8, lr
 80009fc:	4288      	cmp	r0, r1
 80009fe:	fa02 f206 	lsl.w	r2, r2, r6
 8000a02:	d90b      	bls.n	8000a1c <__udivmoddi4+0x1b8>
 8000a04:	eb1c 0101 	adds.w	r1, ip, r1
 8000a08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a0c:	f080 8088 	bcs.w	8000b20 <__udivmoddi4+0x2bc>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f240 8085 	bls.w	8000b20 <__udivmoddi4+0x2bc>
 8000a16:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1a:	4461      	add	r1, ip
 8000a1c:	1a09      	subs	r1, r1, r0
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a24:	fb09 1110 	mls	r1, r9, r0, r1
 8000a28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a30:	458e      	cmp	lr, r1
 8000a32:	d908      	bls.n	8000a46 <__udivmoddi4+0x1e2>
 8000a34:	eb1c 0101 	adds.w	r1, ip, r1
 8000a38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3c:	d26c      	bcs.n	8000b18 <__udivmoddi4+0x2b4>
 8000a3e:	458e      	cmp	lr, r1
 8000a40:	d96a      	bls.n	8000b18 <__udivmoddi4+0x2b4>
 8000a42:	3802      	subs	r0, #2
 8000a44:	4461      	add	r1, ip
 8000a46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a4e:	eba1 010e 	sub.w	r1, r1, lr
 8000a52:	42a1      	cmp	r1, r4
 8000a54:	46c8      	mov	r8, r9
 8000a56:	46a6      	mov	lr, r4
 8000a58:	d356      	bcc.n	8000b08 <__udivmoddi4+0x2a4>
 8000a5a:	d053      	beq.n	8000b04 <__udivmoddi4+0x2a0>
 8000a5c:	b15d      	cbz	r5, 8000a76 <__udivmoddi4+0x212>
 8000a5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a62:	eb61 010e 	sbc.w	r1, r1, lr
 8000a66:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a6e:	40f1      	lsrs	r1, r6
 8000a70:	431f      	orrs	r7, r3
 8000a72:	e9c5 7100 	strd	r7, r1, [r5]
 8000a76:	2600      	movs	r6, #0
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	f1c2 0320 	rsb	r3, r2, #32
 8000a82:	40d8      	lsrs	r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa0:	0c0b      	lsrs	r3, r1, #16
 8000aa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aaa:	429e      	cmp	r6, r3
 8000aac:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x260>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aba:	d22f      	bcs.n	8000b1c <__udivmoddi4+0x2b8>
 8000abc:	429e      	cmp	r6, r3
 8000abe:	d92d      	bls.n	8000b1c <__udivmoddi4+0x2b8>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1b9b      	subs	r3, r3, r6
 8000ac6:	b289      	uxth	r1, r1
 8000ac8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000acc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x28a>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae4:	d216      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d914      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000aea:	3e02      	subs	r6, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af4:	e738      	b.n	8000968 <__udivmoddi4+0x104>
 8000af6:	462e      	mov	r6, r5
 8000af8:	4628      	mov	r0, r5
 8000afa:	e705      	b.n	8000908 <__udivmoddi4+0xa4>
 8000afc:	4606      	mov	r6, r0
 8000afe:	e6e3      	b.n	80008c8 <__udivmoddi4+0x64>
 8000b00:	4618      	mov	r0, r3
 8000b02:	e6f8      	b.n	80008f6 <__udivmoddi4+0x92>
 8000b04:	454b      	cmp	r3, r9
 8000b06:	d2a9      	bcs.n	8000a5c <__udivmoddi4+0x1f8>
 8000b08:	ebb9 0802 	subs.w	r8, r9, r2
 8000b0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b10:	3801      	subs	r0, #1
 8000b12:	e7a3      	b.n	8000a5c <__udivmoddi4+0x1f8>
 8000b14:	4646      	mov	r6, r8
 8000b16:	e7ea      	b.n	8000aee <__udivmoddi4+0x28a>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	e794      	b.n	8000a46 <__udivmoddi4+0x1e2>
 8000b1c:	4640      	mov	r0, r8
 8000b1e:	e7d1      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b20:	46d0      	mov	r8, sl
 8000b22:	e77b      	b.n	8000a1c <__udivmoddi4+0x1b8>
 8000b24:	3b02      	subs	r3, #2
 8000b26:	4461      	add	r1, ip
 8000b28:	e732      	b.n	8000990 <__udivmoddi4+0x12c>
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	e709      	b.n	8000942 <__udivmoddi4+0xde>
 8000b2e:	4464      	add	r4, ip
 8000b30:	3802      	subs	r0, #2
 8000b32:	e742      	b.n	80009ba <__udivmoddi4+0x156>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <MEMS_WriteReg>:
/* Private variables ---------------------------------------------------------*/
	
/* Private functions ---------------------------------------------------------*/

void MEMS_WriteReg(SPI_HandleTypeDef *pSPI, uint8_t addr, uint8_t *data, uint8_t size)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	461a      	mov	r2, r3
 8000b44:	460b      	mov	r3, r1
 8000b46:	72fb      	strb	r3, [r7, #11]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	72bb      	strb	r3, [r7, #10]
	uint8_t spiReg = addr;
 8000b4c:	7afb      	ldrb	r3, [r7, #11]
 8000b4e:	75fb      	strb	r3, [r7, #23]

	MEMS_CS_ENABLE;
 8000b50:	2200      	movs	r2, #0
 8000b52:	2108      	movs	r1, #8
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <MEMS_WriteReg+0x50>)
 8000b56:	f001 fea9 	bl	80028ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI, &spiReg, 1, 10);
 8000b5a:	f107 0117 	add.w	r1, r7, #23
 8000b5e:	230a      	movs	r3, #10
 8000b60:	2201      	movs	r2, #1
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f003 fda7 	bl	80046b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(pSPI, data, size, 10);
 8000b68:	7abb      	ldrb	r3, [r7, #10]
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	230a      	movs	r3, #10
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f003 fda0 	bl	80046b6 <HAL_SPI_Transmit>
	MEMS_CS_DISABLE;
 8000b76:	2201      	movs	r2, #1
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MEMS_WriteReg+0x50>)
 8000b7c:	f001 fe96 	bl	80028ac <HAL_GPIO_WritePin>
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000

08000b8c <MEMS_ReadReg>:

void MEMS_ReadReg(SPI_HandleTypeDef *pSPI, uint8_t addr, uint8_t *data, uint8_t size)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	461a      	mov	r2, r3
 8000b98:	460b      	mov	r3, r1
 8000b9a:	72fb      	strb	r3, [r7, #11]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	72bb      	strb	r3, [r7, #10]
	uint8_t spiBuf[4];
	spiBuf[0] = addr | 0x80;
 8000ba0:	7afb      	ldrb	r3, [r7, #11]
 8000ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	743b      	strb	r3, [r7, #16]

	MEMS_CS_ENABLE;
 8000baa:	2200      	movs	r2, #0
 8000bac:	2108      	movs	r1, #8
 8000bae:	4818      	ldr	r0, [pc, #96]	; (8000c10 <MEMS_ReadReg+0x84>)
 8000bb0:	f001 fe7c 	bl	80028ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(pSPI, spiBuf, 1, 10);
 8000bb4:	f107 0110 	add.w	r1, r7, #16
 8000bb8:	230a      	movs	r3, #10
 8000bba:	2201      	movs	r2, #1
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f003 fd7a 	bl	80046b6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(pSPI, spiBuf, size, 10);
 8000bc2:	7abb      	ldrb	r3, [r7, #10]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	f107 0110 	add.w	r1, r7, #16
 8000bca:	230a      	movs	r3, #10
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f003 feae 	bl	800492e <HAL_SPI_Receive>
	MEMS_CS_DISABLE;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	480e      	ldr	r0, [pc, #56]	; (8000c10 <MEMS_ReadReg+0x84>)
 8000bd8:	f001 fe68 	bl	80028ac <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
 8000be0:	e00b      	b.n	8000bfa <MEMS_ReadReg+0x6e>
	{
		data[i] = spiBuf[i];
 8000be2:	7dfa      	ldrb	r2, [r7, #23]
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	440b      	add	r3, r1
 8000bea:	3218      	adds	r2, #24
 8000bec:	443a      	add	r2, r7
 8000bee:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000bf2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
 8000bfa:	7dfa      	ldrb	r2, [r7, #23]
 8000bfc:	7abb      	ldrb	r3, [r7, #10]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dbed      	blt.n	8000be2 <MEMS_ReadReg+0x56>
	}
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000

08000c14 <selectSensitivity>:

void selectSensitivity(MEMS_Config_t *pConfig)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	switch(pConfig->fullScale)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	2b20      	cmp	r3, #32
 8000c22:	d859      	bhi.n	8000cd8 <selectSensitivity+0xc4>
 8000c24:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <selectSensitivity+0x18>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000cb1 	.word	0x08000cb1
 8000c30:	08000cd9 	.word	0x08000cd9
 8000c34:	08000cd9 	.word	0x08000cd9
 8000c38:	08000cd9 	.word	0x08000cd9
 8000c3c:	08000cd9 	.word	0x08000cd9
 8000c40:	08000cd9 	.word	0x08000cd9
 8000c44:	08000cd9 	.word	0x08000cd9
 8000c48:	08000cd9 	.word	0x08000cd9
 8000c4c:	08000cb9 	.word	0x08000cb9
 8000c50:	08000cd9 	.word	0x08000cd9
 8000c54:	08000cd9 	.word	0x08000cd9
 8000c58:	08000cd9 	.word	0x08000cd9
 8000c5c:	08000cd9 	.word	0x08000cd9
 8000c60:	08000cd9 	.word	0x08000cd9
 8000c64:	08000cd9 	.word	0x08000cd9
 8000c68:	08000cd9 	.word	0x08000cd9
 8000c6c:	08000cc1 	.word	0x08000cc1
 8000c70:	08000cd9 	.word	0x08000cd9
 8000c74:	08000cd9 	.word	0x08000cd9
 8000c78:	08000cd9 	.word	0x08000cd9
 8000c7c:	08000cd9 	.word	0x08000cd9
 8000c80:	08000cd9 	.word	0x08000cd9
 8000c84:	08000cd9 	.word	0x08000cd9
 8000c88:	08000cd9 	.word	0x08000cd9
 8000c8c:	08000cc9 	.word	0x08000cc9
 8000c90:	08000cd9 	.word	0x08000cd9
 8000c94:	08000cd9 	.word	0x08000cd9
 8000c98:	08000cd9 	.word	0x08000cd9
 8000c9c:	08000cd9 	.word	0x08000cd9
 8000ca0:	08000cd9 	.word	0x08000cd9
 8000ca4:	08000cd9 	.word	0x08000cd9
 8000ca8:	08000cd9 	.word	0x08000cd9
 8000cac:	08000cd1 	.word	0x08000cd1
	{
		case LIS3DSH_FSCALE_2:
			pConfig->calibration.Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <selectSensitivity+0xd0>)
 8000cb4:	605a      	str	r2, [r3, #4]
			break;
 8000cb6:	e00f      	b.n	8000cd8 <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_4:
			pConfig->calibration.Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <selectSensitivity+0xd4>)
 8000cbc:	605a      	str	r2, [r3, #4]
			break;
 8000cbe:	e00b      	b.n	8000cd8 <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_6:
			pConfig->calibration.Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <selectSensitivity+0xd8>)
 8000cc4:	605a      	str	r2, [r3, #4]
			break;
 8000cc6:	e007      	b.n	8000cd8 <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_8:
			pConfig->calibration.Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <selectSensitivity+0xdc>)
 8000ccc:	605a      	str	r2, [r3, #4]
			break;
 8000cce:	e003      	b.n	8000cd8 <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_16:
			pConfig->calibration.Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <selectSensitivity+0xe0>)
 8000cd4:	605a      	str	r2, [r3, #4]
			break;
 8000cd6:	bf00      	nop
	}
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	3d75c28f 	.word	0x3d75c28f
 8000ce8:	3df5c28f 	.word	0x3df5c28f
 8000cec:	3e3851ec 	.word	0x3e3851ec
 8000cf0:	3e75c28f 	.word	0x3e75c28f
 8000cf4:	3f3ae148 	.word	0x3f3ae148

08000cf8 <MEMS_Init>:

void MEMS_Init(MEMSHandler_t *pHandler, SPI_HandleTypeDef *pSPI_ext, MEMS_Config_t pConfig)
{
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	b5b0      	push	{r4, r5, r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
 8000d04:	f107 0120 	add.w	r1, r7, #32
 8000d08:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t spiData = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]

	// Set SPI
	pHandler->pSPI = pSPI_ext;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	601a      	str	r2, [r3, #0]

	// Set Config
	pHandler->config = pConfig;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	1d1c      	adds	r4, r3, #4
 8000d1a:	f107 0520 	add.w	r5, r7, #32
 8000d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Init Configuration (Control Register 4)
		// Enable Axes
	spiData |= (pHandler->config.enableAxes & LIS3DSH_AXES_MASK);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	799b      	ldrb	r3, [r3, #6]
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	b25a      	sxtb	r2, r3
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	73fb      	strb	r3, [r7, #15]
		// Output Data Rate
	spiData |= (pHandler->config.dataRate & LIS3DSH_ODR_MASK);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	f023 030f 	bic.w	r3, r3, #15
 8000d4c:	b25a      	sxtb	r2, r3
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	b25b      	sxtb	r3, r3
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
	MEMS_WriteReg(pHandler->pSPI, LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	f107 020f 	add.w	r2, r7, #15
 8000d62:	2301      	movs	r3, #1
 8000d64:	2120      	movs	r1, #32
 8000d66:	f7ff fee7 	bl	8000b38 <MEMS_WriteReg>
	
	// Init Configuration (Control Register 5)
	spiData = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
		// Full Scale
	spiData |= (pHandler->config.fullScale & LIS3DSH_FSCALE_MASK);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	795b      	ldrb	r3, [r3, #5]
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d78:	b25a      	sxtb	r2, r3
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
	MEMS_WriteReg(pHandler->pSPI,LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6818      	ldr	r0, [r3, #0]
 8000d8a:	f107 020f 	add.w	r2, r7, #15
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2124      	movs	r1, #36	; 0x24
 8000d92:	f7ff fed1 	bl	8000b38 <MEMS_WriteReg>
		// Select Sensitivity based in Full Scale
	selectSensitivity(&(pHandler->config));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff3a 	bl	8000c14 <selectSensitivity>

	// Default Calibration
	pHandler->config.calibration.x.Scale = 1.0f;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000da6:	611a      	str	r2, [r3, #16]
	pHandler->config.calibration.y.Scale = 1.0f;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000dae:	619a      	str	r2, [r3, #24]
	pHandler->config.calibration.z.Scale = 1.0f;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000db6:	621a      	str	r2, [r3, #32]

	pHandler->config.calibration.x.Bias = 0.0f;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
	pHandler->config.calibration.y.Bias = 0.0f;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
	pHandler->config.calibration.z.Bias = 0.0f;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]

	memset((void *)&pHandler->rawData, 0, sizeof(pHandler->rawData));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3324      	adds	r3, #36	; 0x24
 8000dd4:	2206      	movs	r2, #6
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 f9bb 	bl	8007154 <memset>
	memset((void *)&pHandler->scaledData, 0, sizeof(pHandler->scaledData));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	332c      	adds	r3, #44	; 0x2c
 8000de2:	220c      	movs	r2, #12
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f006 f9b4 	bl	8007154 <memset>
	memset((void *)&pHandler->accData, 0, sizeof(pHandler->accData));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3338      	adds	r3, #56	; 0x38
 8000df0:	220c      	movs	r2, #12
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f006 f9ad 	bl	8007154 <memset>
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000e04:	b002      	add	sp, #8
 8000e06:	4770      	bx	lr

08000e08 <MEMS_GetAxesData>:

int16_t MEMS_GetAxesData(SPI_HandleTypeDef *pSPI, uint8_t addr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
	uint8_t spiBuf[2]; // Measure have MSB and LSB
	int16_t DataRaw;

	MEMS_ReadReg(pSPI, addr, spiBuf, 2);
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	78f9      	ldrb	r1, [r7, #3]
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff feb5 	bl	8000b8c <MEMS_ReadReg>
	DataRaw = ((spiBuf[1] << 8) + spiBuf[0]);
 8000e22:	7b7b      	ldrb	r3, [r7, #13]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	7b3b      	ldrb	r3, [r7, #12]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	81fb      	strh	r3, [r7, #14]

	return DataRaw;
 8000e34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <MEMS_processDataRaw>:

void MEMS_processDataRaw(MEMSHandler_t *pHandler)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	// Get XYZ data
	pHandler->rawData.x = MEMS_GetAxesData(pHandler->pSPI,LIS3DSH_OUT_X_L_ADDR);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2128      	movs	r1, #40	; 0x28
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffda 	bl	8000e08 <MEMS_GetAxesData>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	849a      	strh	r2, [r3, #36]	; 0x24
	pHandler->rawData.y = MEMS_GetAxesData(pHandler->pSPI,LIS3DSH_OUT_Y_L_ADDR);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	212a      	movs	r1, #42	; 0x2a
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ffd0 	bl	8000e08 <MEMS_GetAxesData>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	84da      	strh	r2, [r3, #38]	; 0x26
	pHandler->rawData.z = MEMS_GetAxesData(pHandler->pSPI,LIS3DSH_OUT_Z_L_ADDR);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	212c      	movs	r1, #44	; 0x2c
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffc6 	bl	8000e08 <MEMS_GetAxesData>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <MEMS_processDataScaled>:

void MEMS_processDataScaled(MEMSHandler_t *pHandler)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	float valX = pHandler->rawData.x * pHandler->config.calibration.Sensitivity;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eac:	edc7 7a05 	vstr	s15, [r7, #20]
	float valY = pHandler->rawData.y * pHandler->config.calibration.Sensitivity;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8000eb6:	ee07 3a90 	vmov	s15, r3
 8000eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec8:	edc7 7a04 	vstr	s15, [r7, #16]
	float valZ = pHandler->rawData.z * pHandler->config.calibration.Sensitivity;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee4:	edc7 7a03 	vstr	s15, [r7, #12]

	pHandler->scaledData.x = 	(valX  * pHandler->config.calibration.x.Scale) +
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	ed93 7a04 	vldr	s14, [r3, #16]
 8000eee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000f68 <MEMS_processDataScaled+0xdc>
 8000efa:	ee37 7a87 	vadd.f32	s14, s15, s14
								0.0f - pHandler->config.calibration.x.Bias;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f04:	ee77 7a67 	vsub.f32	s15, s14, s15
	pHandler->scaledData.x = 	(valX  * pHandler->config.calibration.x.Scale) +
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pHandler->scaledData.y = 	(valY  * pHandler->config.calibration.y.Scale) +
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f14:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000f68 <MEMS_processDataScaled+0xdc>
 8000f20:	ee37 7a87 	vadd.f32	s14, s15, s14
								0.0f - pHandler->config.calibration.y.Bias;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
	pHandler->scaledData.y = 	(valY  * pHandler->config.calibration.y.Scale) +
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	pHandler->scaledData.z = 	(valZ  * pHandler->config.calibration.z.Scale) +
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f42:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000f68 <MEMS_processDataScaled+0xdc>
 8000f46:	ee37 7a87 	vadd.f32	s14, s15, s14
								0.0f - pHandler->config.calibration.z.Bias;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f50:	ee77 7a67 	vsub.f32	s15, s14, s15
	pHandler->scaledData.z = 	(valZ  * pHandler->config.calibration.z.Scale) +
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8000f5a:	bf00      	nop
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
	...

08000f70 <MEMS_processDataMS2>:

void MEMS_processDataMS2(MEMSHandler_t *pHandler)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	pHandler->accData.x = (pHandler->scaledData.x * GRAVITY_VALUE) * 0.001;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fbb1 	bl	80006e4 <__aeabi_f2d>
 8000f82:	a329      	add	r3, pc, #164	; (adr r3, 8001028 <MEMS_processDataMS2+0xb8>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff f91e 	bl	80001c8 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	a326      	add	r3, pc, #152	; (adr r3, 8001030 <MEMS_processDataMS2+0xc0>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff f915 	bl	80001c8 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fbf5 	bl	8000794 <__aeabi_d2f>
 8000faa:	4602      	mov	r2, r0
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	639a      	str	r2, [r3, #56]	; 0x38
	pHandler->accData.y = (pHandler->scaledData.y * GRAVITY_VALUE) * 0.001;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fb95 	bl	80006e4 <__aeabi_f2d>
 8000fba:	a31b      	add	r3, pc, #108	; (adr r3, 8001028 <MEMS_processDataMS2+0xb8>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff f902 	bl	80001c8 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	a318      	add	r3, pc, #96	; (adr r3, 8001030 <MEMS_processDataMS2+0xc0>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff f8f9 	bl	80001c8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fbd9 	bl	8000794 <__aeabi_d2f>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	63da      	str	r2, [r3, #60]	; 0x3c
	pHandler->accData.z = (pHandler->scaledData.z * GRAVITY_VALUE) * 0.001;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fb79 	bl	80006e4 <__aeabi_f2d>
 8000ff2:	a30d      	add	r3, pc, #52	; (adr r3, 8001028 <MEMS_processDataMS2+0xb8>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff f8e6 	bl	80001c8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	a30a      	add	r3, pc, #40	; (adr r3, 8001030 <MEMS_processDataMS2+0xc0>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff f8dd 	bl	80001c8 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fbbd 	bl	8000794 <__aeabi_d2f>
 800101a:	4602      	mov	r2, r0
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	3a92a305 	.word	0x3a92a305
 800102c:	40239d01 	.word	0x40239d01
 8001030:	d2f1a9fc 	.word	0xd2f1a9fc
 8001034:	3f50624d 	.word	0x3f50624d

08001038 <MEMS_getDataMS2>:

MEMS_DataScaled_t MEMS_getDataMS2(MEMSHandler_t *pHandler)
{
 8001038:	b480      	push	{r7}
 800103a:	b08b      	sub	sp, #44	; 0x2c
 800103c:	af00      	add	r7, sp, #0
 800103e:	6178      	str	r0, [r7, #20]
	return pHandler->accData;
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	3238      	adds	r2, #56	; 0x38
 8001048:	ca07      	ldmia	r2, {r0, r1, r2}
 800104a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800104e:	69f9      	ldr	r1, [r7, #28]
 8001050:	6a3a      	ldr	r2, [r7, #32]
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	ee06 1a90 	vmov	s13, r1
 8001058:	ee07 2a10 	vmov	s14, r2
 800105c:	ee07 3a90 	vmov	s15, r3
}
 8001060:	eeb0 0a66 	vmov.f32	s0, s13
 8001064:	eef0 0a47 	vmov.f32	s1, s14
 8001068:	eeb0 1a67 	vmov.f32	s2, s15
 800106c:	372c      	adds	r7, #44	; 0x2c
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <bufHandler_init>:
#include <string.h>

static void _increaseBufIndex(int *pIndex, const int BUF_SIZE);

void bufHandler_init(BufHandler_t *pHandler, MsgBuffer_t *msgBuf, size_t bufSize)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
    if (!pHandler || !msgBuf || bufSize <= 0)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d027      	beq.n	80010d8 <bufHandler_init+0x62>
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d024      	beq.n	80010d8 <bufHandler_init+0x62>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d021      	beq.n	80010d8 <bufHandler_init+0x62>
    {
        return;
    }

    pHandler->msgBuf = msgBuf;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	601a      	str	r2, [r3, #0]
    memset((void *)pHandler->msgBuf, 0, sizeof(MsgBuffer_t) * bufSize);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	461a      	mov	r2, r3
 80010ac:	2100      	movs	r1, #0
 80010ae:	f006 f851 	bl	8007154 <memset>

    pHandler->bufRcvIndex = 0;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
    pHandler->bufSendIndex = 0;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]

    pHandler->pRxUart = NULL;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
    pHandler->pTxUart = NULL;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]

    pHandler->txAvailable = true;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2201      	movs	r2, #1
 80010ce:	751a      	strb	r2, [r3, #20]

    pHandler->BUF_SIZE = bufSize;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
 80010d6:	e000      	b.n	80010da <bufHandler_init+0x64>
        return;
 80010d8:	bf00      	nop
}
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <bufHandler_setUart>:

void bufHandler_setUart(BufHandler_t *pHandler, UART_HandleTypeDef *pTxUart, UART_HandleTypeDef *pRxUart)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
    if (!pHandler || !pTxUart || !pRxUart)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00c      	beq.n	800110c <bufHandler_setUart+0x2c>
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <bufHandler_setUart+0x2c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <bufHandler_setUart+0x2c>
    {
        return;
    }

    pHandler->pRxUart = pRxUart;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	611a      	str	r2, [r3, #16]
    pHandler->pTxUart = pTxUart;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	e000      	b.n	800110e <bufHandler_setUart+0x2e>
        return;
 800110c:	bf00      	nop
}
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <bufHandler_checkEmpty>:

bool bufHandler_checkEmpty(BufHandler_t *pHandler)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <bufHandler_checkEmpty+0x12>
    {
        return true;
 8001126:	2301      	movs	r3, #1
 8001128:	e008      	b.n	800113c <bufHandler_checkEmpty+0x24>
    }

    return pHandler->bufSendIndex == pHandler->bufRcvIndex;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	bf0c      	ite	eq
 8001136:	2301      	moveq	r3, #1
 8001138:	2300      	movne	r3, #0
 800113a:	b2db      	uxtb	r3, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <bufHandler_sendData>:

bool bufHandler_sendData(BufHandler_t *pHandler, MsgBuffer_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
    if (!pHandler)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <bufHandler_sendData+0x14>
    {
        return false;
 8001158:	2300      	movs	r3, #0
 800115a:	e013      	b.n	8001184 <bufHandler_sendData+0x3c>
    }

    if (!pHandler->txAvailable)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7d1b      	ldrb	r3, [r3, #20]
 8001160:	f083 0301 	eor.w	r3, r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <bufHandler_sendData+0x26>
    {
        return false;
 800116a:	2300      	movs	r3, #0
 800116c:	e00a      	b.n	8001184 <bufHandler_sendData+0x3c>
    }

    pHandler->txAvailable = false;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	751a      	strb	r2, [r3, #20]

    HAL_UART_Transmit_IT(pHandler->pTxUart, (uint8_t *)data, MSG_TOTAL_BYTES);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	220d      	movs	r2, #13
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fc88 	bl	8005a92 <HAL_UART_Transmit_IT>

    return true;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <bufHandler_getReceivedData>:

const uint8_t *bufHandler_getReceivedData(BufHandler_t *pHandler)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    if (!pHandler || !pHandler->msgBuf)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <bufHandler_getReceivedData+0x16>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <bufHandler_getReceivedData+0x1a>
    {
        return NULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e00a      	b.n	80011bc <bufHandler_getReceivedData+0x30>
    }

    return pHandler->msgBuf[pHandler->bufRcvIndex];
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	440b      	add	r3, r1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <bufHandler_increaseRcvIndex>:

void bufHandler_increaseRcvIndex(BufHandler_t *pHandler)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d008      	beq.n	80011e8 <bufHandler_increaseRcvIndex+0x20>
    {
        return;
    }

    _increaseBufIndex(&pHandler->bufRcvIndex, pHandler->BUF_SIZE);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1d1a      	adds	r2, r3, #4
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4619      	mov	r1, r3
 80011e0:	4610      	mov	r0, r2
 80011e2:	f000 f8a5 	bl	8001330 <_increaseBufIndex>
 80011e6:	e000      	b.n	80011ea <bufHandler_increaseRcvIndex+0x22>
        return;
 80011e8:	bf00      	nop
}
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <bufHandler_increaseSendIndex>:

void bufHandler_increaseSendIndex(BufHandler_t *pHandler)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <bufHandler_increaseSendIndex+0x22>
    {
        return;
    }

    _increaseBufIndex(&pHandler->bufSendIndex, pHandler->BUF_SIZE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f103 0208 	add.w	r2, r3, #8
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f000 f890 	bl	8001330 <_increaseBufIndex>
 8001210:	e000      	b.n	8001214 <bufHandler_increaseSendIndex+0x24>
        return;
 8001212:	bf00      	nop
}
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <bufHandler_transmitUartData>:

bool bufHandler_transmitUartData(BufHandler_t *pHandler)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
    if (!pHandler || !pHandler->pTxUart || !pHandler->msgBuf)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <bufHandler_transmitUartData+0x1e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <bufHandler_transmitUartData+0x1e>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <bufHandler_transmitUartData+0x22>
    {
        return false;
 8001238:	2300      	movs	r3, #0
 800123a:	e01d      	b.n	8001278 <bufHandler_transmitUartData+0x5e>
    }

    if (!pHandler->txAvailable)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7d1b      	ldrb	r3, [r3, #20]
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <bufHandler_transmitUartData+0x34>
    {
        return false;
 800124a:	2300      	movs	r3, #0
 800124c:	e014      	b.n	8001278 <bufHandler_transmitUartData+0x5e>
    }

    pHandler->txAvailable = false;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	751a      	strb	r2, [r3, #20]

    HAL_UART_Transmit_IT(pHandler->pTxUart, (uint8_t *)&pHandler->msgBuf[pHandler->bufSendIndex], MSG_TOTAL_BYTES);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68d8      	ldr	r0, [r3, #12]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6819      	ldr	r1, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	461a      	mov	r2, r3
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	440b      	add	r3, r1
 800126e:	220d      	movs	r2, #13
 8001270:	4619      	mov	r1, r3
 8001272:	f004 fc0e 	bl	8005a92 <HAL_UART_Transmit_IT>

    return true;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <bufHandler_receiveUartData>:

void bufHandler_receiveUartData(BufHandler_t *pHandler)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    if (!pHandler || !pHandler->pRxUart || !pHandler->msgBuf)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d019      	beq.n	80012c2 <bufHandler_receiveUartData+0x42>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d015      	beq.n	80012c2 <bufHandler_receiveUartData+0x42>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d011      	beq.n	80012c2 <bufHandler_receiveUartData+0x42>
    {
        return;
    }

	HAL_UART_Receive_IT(pHandler->pRxUart, (uint8_t *)&pHandler->msgBuf[pHandler->bufRcvIndex], MSG_TOTAL_BYTES);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6918      	ldr	r0, [r3, #16]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4613      	mov	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	220d      	movs	r2, #13
 80012ba:	4619      	mov	r1, r3
 80012bc:	f004 fc2e 	bl	8005b1c <HAL_UART_Receive_IT>
 80012c0:	e000      	b.n	80012c4 <bufHandler_receiveUartData+0x44>
        return;
 80012c2:	bf00      	nop
}
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <bufHandler_setTxAvailable>:

void bufHandler_setTxAvailable(BufHandler_t *pHandler)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <bufHandler_setTxAvailable+0x16>
    {
        return;
    }

    pHandler->txAvailable = true;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	751a      	strb	r2, [r3, #20]
 80012de:	e000      	b.n	80012e2 <bufHandler_setTxAvailable+0x18>
        return;
 80012e0:	bf00      	nop
}
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <bufHandler_txUart>:

UART_HandleTypeDef *bufHandler_txUart(BufHandler_t *pHandler)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <bufHandler_txUart+0x12>
    {
        return NULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e001      	b.n	8001302 <bufHandler_txUart+0x16>
    }

    return pHandler->pTxUart;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <bufHandler_rxUart>:

UART_HandleTypeDef *bufHandler_rxUart(BufHandler_t *pHandler)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <bufHandler_rxUart+0x12>
    {
        return NULL;
 800131c:	2300      	movs	r3, #0
 800131e:	e001      	b.n	8001324 <bufHandler_rxUart+0x16>
    }

    return pHandler->pRxUart;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_increaseBufIndex>:

static void _increaseBufIndex(int *pIndex, const int BUF_SIZE)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	(*pIndex)++;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
	if (*pIndex >= BUF_SIZE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	dc02      	bgt.n	8001354 <_increaseBufIndex+0x24>
	{
		*pIndex = 0;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
	}
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <ledToggler_init>:
#include "ledToggler.h"

void ledToggler_init(LedToggler_t *ledToggler, uint32_t maxCnt, GPIO_TypeDef *gpio, uint16_t ledPin)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	807b      	strh	r3, [r7, #2]
    ledToggler->ledState = 0;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
    ledToggler->cnt = 0;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
    ledToggler->cntMax = maxCnt;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	609a      	str	r2, [r3, #8]
    ledToggler->gpio = gpio;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	60da      	str	r2, [r3, #12]
    ledToggler->ledPin = ledPin;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	821a      	strh	r2, [r3, #16]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <ledToggler_run>:

void ledToggler_run(LedToggler_t *toggler)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    const uint32_t LED_ON = toggler->ledPin << 16;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	8a1b      	ldrh	r3, [r3, #16]
 80013a4:	041b      	lsls	r3, r3, #16
 80013a6:	60fb      	str	r3, [r7, #12]
	const uint32_t LED_OFF = toggler->ledPin;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8a1b      	ldrh	r3, [r3, #16]
 80013ac:	60bb      	str	r3, [r7, #8]

    toggler->cnt++;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]
    if (toggler->cnt >= toggler->cntMax)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d319      	bcc.n	80013f8 <ledToggler_run+0x60>
    {
        toggler->cnt = 0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
        toggler->ledState = !toggler->ledState;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf0c      	ite	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	2300      	movne	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	701a      	strb	r2, [r3, #0]

        if (toggler->ledState)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <ledToggler_run+0x58>
        {
            toggler->gpio->BSRR = LED_ON;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	619a      	str	r2, [r3, #24]
        else
        {
            toggler->gpio->BSRR = LED_OFF;
        }
    }
 80013ee:	e003      	b.n	80013f8 <ledToggler_run+0x60>
            toggler->gpio->BSRR = LED_OFF;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	619a      	str	r2, [r3, #24]
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <triggerSensorDataSend>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void triggerSensorDataSend()
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
    _sendSensorData = true;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <triggerSensorDataSend+0x14>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	20000719 	.word	0x20000719

0800141c <triggerReadSensorData>:

// Trigger sampling of sensor data
void triggerReadSensorData()
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	_readSensorData = true;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <triggerReadSensorData+0x14>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	2000071a 	.word	0x2000071a

08001434 <transmitEvReqToEm>:


static void transmitEvReqToEm()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
    bool ret = bufHandler_transmitUartData(&_evHandler);
 800143a:	4809      	ldr	r0, [pc, #36]	; (8001460 <transmitEvReqToEm+0x2c>)
 800143c:	f7ff feed 	bl	800121a <bufHandler_transmitUartData>
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]

    if (!ret)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f083 0301 	eor.w	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d103      	bne.n	8001458 <transmitEvReqToEm+0x24>
    {
        return;
    }

	bufHandler_increaseSendIndex(&_evHandler);
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <transmitEvReqToEm+0x2c>)
 8001452:	f7ff fecd 	bl	80011f0 <bufHandler_increaseSendIndex>
 8001456:	e000      	b.n	800145a <transmitEvReqToEm+0x26>
        return;
 8001458:	bf00      	nop
}
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200006f0 	.word	0x200006f0

08001464 <transmitEmDataToEv>:

static void transmitEmDataToEv()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
    bool ret = bufHandler_transmitUartData(&_emHandler);
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <transmitEmDataToEv+0x2c>)
 800146c:	f7ff fed5 	bl	800121a <bufHandler_transmitUartData>
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]

    if (!ret)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f083 0301 	eor.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d103      	bne.n	8001488 <transmitEmDataToEv+0x24>
    {
        return;
    }

	bufHandler_increaseSendIndex(&_emHandler);
 8001480:	4803      	ldr	r0, [pc, #12]	; (8001490 <transmitEmDataToEv+0x2c>)
 8001482:	f7ff feb5 	bl	80011f0 <bufHandler_increaseSendIndex>
 8001486:	e000      	b.n	800148a <transmitEmDataToEv+0x26>
        return;
 8001488:	bf00      	nop
}
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200006d4 	.word	0x200006d4

08001494 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	if (huart == bufHandler_rxUart(&_emHandler))
 800149c:	4814      	ldr	r0, [pc, #80]	; (80014f0 <HAL_UART_RxCpltCallback+0x5c>)
 800149e:	f7ff ff36 	bl	800130e <bufHandler_rxUart>
 80014a2:	4602      	mov	r2, r0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d106      	bne.n	80014b8 <HAL_UART_RxCpltCallback+0x24>
	{
        bufHandler_increaseRcvIndex(&_emHandler);
 80014aa:	4811      	ldr	r0, [pc, #68]	; (80014f0 <HAL_UART_RxCpltCallback+0x5c>)
 80014ac:	f7ff fe8c 	bl	80011c8 <bufHandler_increaseRcvIndex>
        bufHandler_receiveUartData(&_emHandler);
 80014b0:	480f      	ldr	r0, [pc, #60]	; (80014f0 <HAL_UART_RxCpltCallback+0x5c>)
 80014b2:	f7ff fee5 	bl	8001280 <bufHandler_receiveUartData>
            triggerReadSensorData();
        }

        bufHandler_receiveUartData(&_evHandler);
	}
}
 80014b6:	e016      	b.n	80014e6 <HAL_UART_RxCpltCallback+0x52>
	else if (huart == bufHandler_rxUart(&_evHandler))
 80014b8:	480e      	ldr	r0, [pc, #56]	; (80014f4 <HAL_UART_RxCpltCallback+0x60>)
 80014ba:	f7ff ff28 	bl	800130e <bufHandler_rxUart>
 80014be:	4602      	mov	r2, r0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10f      	bne.n	80014e6 <HAL_UART_RxCpltCallback+0x52>
		const uint8_t *msg = bufHandler_getReceivedData(&_evHandler);
 80014c6:	480b      	ldr	r0, [pc, #44]	; (80014f4 <HAL_UART_RxCpltCallback+0x60>)
 80014c8:	f7ff fe60 	bl	800118c <bufHandler_getReceivedData>
 80014cc:	60f8      	str	r0, [r7, #12]
        if (msg[0] == EV_REQ_ID)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2bff      	cmp	r3, #255	; 0xff
 80014d4:	d104      	bne.n	80014e0 <HAL_UART_RxCpltCallback+0x4c>
            bufHandler_increaseRcvIndex(&_evHandler);
 80014d6:	4807      	ldr	r0, [pc, #28]	; (80014f4 <HAL_UART_RxCpltCallback+0x60>)
 80014d8:	f7ff fe76 	bl	80011c8 <bufHandler_increaseRcvIndex>
            triggerReadSensorData();
 80014dc:	f7ff ff9e 	bl	800141c <triggerReadSensorData>
        bufHandler_receiveUartData(&_evHandler);
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <HAL_UART_RxCpltCallback+0x60>)
 80014e2:	f7ff fecd 	bl	8001280 <bufHandler_receiveUartData>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200006d4 	.word	0x200006d4
 80014f4:	200006f0 	.word	0x200006f0

080014f8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	if (huart == bufHandler_txUart(&_emHandler))
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <HAL_UART_TxCpltCallback+0x3c>)
 8001502:	f7ff fef3 	bl	80012ec <bufHandler_txUart>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4293      	cmp	r3, r2
 800150c:	d103      	bne.n	8001516 <HAL_UART_TxCpltCallback+0x1e>
	{
        bufHandler_setTxAvailable(&_emHandler);
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <HAL_UART_TxCpltCallback+0x3c>)
 8001510:	f7ff fedb 	bl	80012ca <bufHandler_setTxAvailable>
	}
	else if (huart == bufHandler_txUart(&_evHandler))
	{
		bufHandler_setTxAvailable(&_evHandler);
	}
}
 8001514:	e009      	b.n	800152a <HAL_UART_TxCpltCallback+0x32>
	else if (huart == bufHandler_txUart(&_evHandler))
 8001516:	4808      	ldr	r0, [pc, #32]	; (8001538 <HAL_UART_TxCpltCallback+0x40>)
 8001518:	f7ff fee8 	bl	80012ec <bufHandler_txUart>
 800151c:	4602      	mov	r2, r0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4293      	cmp	r3, r2
 8001522:	d102      	bne.n	800152a <HAL_UART_TxCpltCallback+0x32>
		bufHandler_setTxAvailable(&_evHandler);
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <HAL_UART_TxCpltCallback+0x40>)
 8001526:	f7ff fed0 	bl	80012ca <bufHandler_setTxAvailable>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200006d4 	.word	0x200006d4
 8001538:	200006f0 	.word	0x200006f0

0800153c <convert_bufType>:

// Convert MEMS_DataScaled_t data type to MsgBuffer_t data type
void convert_bufType(MEMS_DataScaled_t MEMS_data, MsgBuffer_t buf)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	eef0 6a40 	vmov.f32	s13, s0
 8001546:	eeb0 7a60 	vmov.f32	s14, s1
 800154a:	eef0 7a41 	vmov.f32	s15, s2
 800154e:	6038      	str	r0, [r7, #0]
 8001550:	edc7 6a01 	vstr	s13, [r7, #4]
 8001554:	ed87 7a02 	vstr	s14, [r7, #8]
 8001558:	edc7 7a03 	vstr	s15, [r7, #12]
    buf[0] = ID_SELF;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]

    float *sensorData = (float *)&buf[1];
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
    sensorData[0] = MEMSData.x;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <convert_bufType+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	601a      	str	r2, [r3, #0]
    sensorData[1] = MEMSData.y;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3304      	adds	r3, #4
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <convert_bufType+0x54>)
 8001576:	6852      	ldr	r2, [r2, #4]
 8001578:	601a      	str	r2, [r3, #0]
    sensorData[2] = MEMSData.z;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3308      	adds	r3, #8
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <convert_bufType+0x54>)
 8001580:	6892      	ldr	r2, [r2, #8]
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	bf00      	nop
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000030 	.word	0x20000030

08001594 <HAL_TIM_PeriodElapsedCallback>:

// Timer 2 callback -> request sensor read (LED for debug)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	// Request sensor data read
	triggerReadSensorData();
 800159c:	f7ff ff3e 	bl	800141c <triggerReadSensorData>

	// Toggle debug LED
    HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80015a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015a6:	f001 f99a 	bl	80028de <HAL_GPIO_TogglePin>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40020c00 	.word	0x40020c00

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b093      	sub	sp, #76	; 0x4c
 80015bc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f000 fd9f 	bl	8002100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c2:	f000 f8f1 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c6:	f000 fa53 	bl	8001a70 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015ca:	f000 f957 	bl	800187c <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 80015ce:	f000 fa2d 	bl	8001a2c <MX_USB_OTG_FS_HCD_Init>
  MX_UART4_Init();
 80015d2:	f000 f9d7 	bl	8001984 <MX_UART4_Init>
  MX_UART5_Init();
 80015d6:	f000 f9ff 	bl	80019d8 <MX_UART5_Init>
  MX_TIM2_Init();
 80015da:	f000 f985 	bl	80018e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // MEMS Configuration
  MEMSConfig.dataRate   = LIS3DSH_ODR_100;
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <main+0x1b4>)
 80015e0:	2260      	movs	r2, #96	; 0x60
 80015e2:	701a      	strb	r2, [r3, #0]
  MEMSConfig.fullScale  = LIS3DSH_FSCALE_2;
 80015e4:	4b61      	ldr	r3, [pc, #388]	; (800176c <main+0x1b4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	705a      	strb	r2, [r3, #1]
  MEMSConfig.enableAxes = LIS3DSH_XYZ_ENABLE;
 80015ea:	4b60      	ldr	r3, [pc, #384]	; (800176c <main+0x1b4>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	709a      	strb	r2, [r3, #2]

  // MEMS Init
  MEMS_Init(&hMEMS, &hspi1, MEMSConfig);
 80015f0:	4e5e      	ldr	r6, [pc, #376]	; (800176c <main+0x1b4>)
 80015f2:	466d      	mov	r5, sp
 80015f4:	f106 0408 	add.w	r4, r6, #8
 80015f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001600:	e885 0003 	stmia.w	r5, {r0, r1}
 8001604:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001608:	4959      	ldr	r1, [pc, #356]	; (8001770 <main+0x1b8>)
 800160a:	485a      	ldr	r0, [pc, #360]	; (8001774 <main+0x1bc>)
 800160c:	f7ff fb74 	bl	8000cf8 <MEMS_Init>
  //  MEMS_Z_calibrate(-920.0, 1040.0);

    LedToggler_t togglerRed;
    LedToggler_t togglerGreen;

    ledToggler_init(&togglerRed, 250, LD5_GPIO_Port, LD5_Pin);
 8001610:	f107 0018 	add.w	r0, r7, #24
 8001614:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <main+0x1c0>)
 800161a:	21fa      	movs	r1, #250	; 0xfa
 800161c:	f7ff fea0 	bl	8001360 <ledToggler_init>
    ledToggler_init(&togglerGreen, 250, LD4_GPIO_Port, LD4_Pin);
 8001620:	1d38      	adds	r0, r7, #4
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	4a54      	ldr	r2, [pc, #336]	; (8001778 <main+0x1c0>)
 8001628:	21fa      	movs	r1, #250	; 0xfa
 800162a:	f7ff fe99 	bl	8001360 <ledToggler_init>

    bufHandler_init(&_emHandler, _emMsgBuf, BUFFER_MSG_CAPACITY);
 800162e:	2214      	movs	r2, #20
 8001630:	4952      	ldr	r1, [pc, #328]	; (800177c <main+0x1c4>)
 8001632:	4853      	ldr	r0, [pc, #332]	; (8001780 <main+0x1c8>)
 8001634:	f7ff fd1f 	bl	8001076 <bufHandler_init>
    bufHandler_init(&_evHandler, _evMsgBuf, BUFFER_MSG_CAPACITY);
 8001638:	2214      	movs	r2, #20
 800163a:	4952      	ldr	r1, [pc, #328]	; (8001784 <main+0x1cc>)
 800163c:	4852      	ldr	r0, [pc, #328]	; (8001788 <main+0x1d0>)
 800163e:	f7ff fd1a 	bl	8001076 <bufHandler_init>

    bufHandler_setUart(&_emHandler, pEV_UART, pEM_UART);
 8001642:	4b52      	ldr	r3, [pc, #328]	; (800178c <main+0x1d4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a52      	ldr	r2, [pc, #328]	; (8001790 <main+0x1d8>)
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	4619      	mov	r1, r3
 800164c:	484c      	ldr	r0, [pc, #304]	; (8001780 <main+0x1c8>)
 800164e:	f7ff fd47 	bl	80010e0 <bufHandler_setUart>
    bufHandler_setUart(&_evHandler, pEM_UART, pEV_UART);
 8001652:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <main+0x1d8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a4d      	ldr	r2, [pc, #308]	; (800178c <main+0x1d4>)
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	484a      	ldr	r0, [pc, #296]	; (8001788 <main+0x1d0>)
 800165e:	f7ff fd3f 	bl	80010e0 <bufHandler_setUart>

    bufHandler_receiveUartData(&_emHandler);
 8001662:	4847      	ldr	r0, [pc, #284]	; (8001780 <main+0x1c8>)
 8001664:	f7ff fe0c 	bl	8001280 <bufHandler_receiveUartData>
    bufHandler_receiveUartData(&_evHandler);
 8001668:	4847      	ldr	r0, [pc, #284]	; (8001788 <main+0x1d0>)
 800166a:	f7ff fe09 	bl	8001280 <bufHandler_receiveUartData>

    // Dummy test send to check UART reception.
    for (uint8_t i = 0; i < MSG_TOTAL_BYTES; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001674:	e00c      	b.n	8001690 <main+0xd8>
    {
        _sensorData[i] = i + 1;
 8001676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800167a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800167e:	3201      	adds	r2, #1
 8001680:	b2d1      	uxtb	r1, r2
 8001682:	4a44      	ldr	r2, [pc, #272]	; (8001794 <main+0x1dc>)
 8001684:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < MSG_TOTAL_BYTES; i++)
 8001686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800168a:	3301      	adds	r3, #1
 800168c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001694:	2b0c      	cmp	r3, #12
 8001696:	d9ee      	bls.n	8001676 <main+0xbe>
    }
    triggerSensorDataSend();
 8001698:	f7ff feb4 	bl	8001404 <triggerSensorDataSend>

    // Start timer 2
    HAL_TIM_Base_Start_IT(&htim2);
 800169c:	483e      	ldr	r0, [pc, #248]	; (8001798 <main+0x1e0>)
 800169e:	f003 fd79 	bl	8005194 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
        // Sample sensor data if requested ...
        if (_readSensorData)
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <main+0x1e4>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d02d      	beq.n	8001706 <main+0x14e>
        {
            MEMS_processDataRaw(&hMEMS);
 80016aa:	4832      	ldr	r0, [pc, #200]	; (8001774 <main+0x1bc>)
 80016ac:	f7ff fbc8 	bl	8000e40 <MEMS_processDataRaw>
            MEMS_processDataScaled(&hMEMS);
 80016b0:	4830      	ldr	r0, [pc, #192]	; (8001774 <main+0x1bc>)
 80016b2:	f7ff fbeb 	bl	8000e8c <MEMS_processDataScaled>
            MEMS_processDataMS2(&hMEMS);
 80016b6:	482f      	ldr	r0, [pc, #188]	; (8001774 <main+0x1bc>)
 80016b8:	f7ff fc5a 	bl	8000f70 <MEMS_processDataMS2>

        	// Read data from LIS3DSH
        	MEMSData = MEMS_getDataMS2(&hMEMS);
 80016bc:	482d      	ldr	r0, [pc, #180]	; (8001774 <main+0x1bc>)
 80016be:	f7ff fcbb 	bl	8001038 <MEMS_getDataMS2>
 80016c2:	eef0 6a40 	vmov.f32	s13, s0
 80016c6:	eeb0 7a60 	vmov.f32	s14, s1
 80016ca:	eef0 7a41 	vmov.f32	s15, s2
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <main+0x1e8>)
 80016d0:	edc3 6a00 	vstr	s13, [r3]
 80016d4:	ed83 7a01 	vstr	s14, [r3, #4]
 80016d8:	edc3 7a02 	vstr	s15, [r3, #8]

        	// Convert MEMS_DataScaled_t to MsgBuffer_t type
            convert_bufType(MEMSData, _sensorData);
 80016dc:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <main+0x1e8>)
 80016de:	edd3 6a00 	vldr	s13, [r3]
 80016e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80016e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ea:	482a      	ldr	r0, [pc, #168]	; (8001794 <main+0x1dc>)
 80016ec:	eeb0 0a66 	vmov.f32	s0, s13
 80016f0:	eef0 0a47 	vmov.f32	s1, s14
 80016f4:	eeb0 1a67 	vmov.f32	s2, s15
 80016f8:	f7ff ff20 	bl	800153c <convert_bufType>

        	// Trigger UART to send sensor data
        	triggerSensorDataSend();
 80016fc:	f7ff fe82 	bl	8001404 <triggerSensorDataSend>

        	// Clear flag t enable a new sensor read request
        	_readSensorData = false;
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <main+0x1e4>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
        }

        // Check first in order to send as soon as the UART is available
        if (_sendSensorData)
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <main+0x1ec>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00d      	beq.n	800172a <main+0x172>
        {
            // We use the _emHandler because that's where the EV TX UART is
            // configured. It's as if the sensor data had come through the EM
            // UART>
            bool ret = bufHandler_sendData(&_emHandler, _sensorData);
 800170e:	4921      	ldr	r1, [pc, #132]	; (8001794 <main+0x1dc>)
 8001710:	481b      	ldr	r0, [pc, #108]	; (8001780 <main+0x1c8>)
 8001712:	f7ff fd19 	bl	8001148 <bufHandler_sendData>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

            // Will only return true when it successfully sent data.
            if (ret)
 800171c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <main+0x172>
            {
                _sendSensorData = false;
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <main+0x1ec>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
            }
        }

        if (!bufHandler_checkEmpty(&_emHandler))
 800172a:	4815      	ldr	r0, [pc, #84]	; (8001780 <main+0x1c8>)
 800172c:	f7ff fcf4 	bl	8001118 <bufHandler_checkEmpty>
 8001730:	4603      	mov	r3, r0
 8001732:	f083 0301 	eor.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <main+0x192>
        {
            transmitEmDataToEv();
 800173c:	f7ff fe92 	bl	8001464 <transmitEmDataToEv>
            ledToggler_run(&togglerRed);
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fe27 	bl	8001398 <ledToggler_run>
        }

        if (!bufHandler_checkEmpty(&_evHandler))
 800174a:	480f      	ldr	r0, [pc, #60]	; (8001788 <main+0x1d0>)
 800174c:	f7ff fce4 	bl	8001118 <bufHandler_checkEmpty>
 8001750:	4603      	mov	r3, r0
 8001752:	f083 0301 	eor.w	r3, r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0a2      	beq.n	80016a2 <main+0xea>
        {
            transmitEvReqToEm();
 800175c:	f7ff fe6a 	bl	8001434 <transmitEvReqToEm>
            ledToggler_run(&togglerGreen);
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fe18 	bl	8001398 <ledToggler_run>
        if (_readSensorData)
 8001768:	e79b      	b.n	80016a2 <main+0xea>
 800176a:	bf00      	nop
 800176c:	20000080 	.word	0x20000080
 8001770:	200000a0 	.word	0x200000a0
 8001774:	2000003c 	.word	0x2000003c
 8001778:	40020c00 	.word	0x40020c00
 800177c:	200004cc 	.word	0x200004cc
 8001780:	200006d4 	.word	0x200006d4
 8001784:	200005d0 	.word	0x200005d0
 8001788:	200006f0 	.word	0x200006f0
 800178c:	20000004 	.word	0x20000004
 8001790:	20000000 	.word	0x20000000
 8001794:	2000070c 	.word	0x2000070c
 8001798:	200000f8 	.word	0x200000f8
 800179c:	2000071a 	.word	0x2000071a
 80017a0:	20000030 	.word	0x20000030
 80017a4:	20000719 	.word	0x20000719

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2230      	movs	r2, #48	; 0x30
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fccc 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <SystemClock_Config+0xcc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <SystemClock_Config+0xcc>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <SystemClock_Config+0xd0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <SystemClock_Config+0xd0>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001804:	2301      	movs	r3, #1
 8001806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001818:	2308      	movs	r3, #8
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800181c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001822:	2302      	movs	r3, #2
 8001824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001826:	2307      	movs	r3, #7
 8001828:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	4618      	mov	r0, r3
 8001830:	f002 fa20 	bl	8003c74 <HAL_RCC_OscConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800183a:	f000 fa07 	bl	8001c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183e:	230f      	movs	r3, #15
 8001840:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001842:	2302      	movs	r3, #2
 8001844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800184a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800184e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	2105      	movs	r1, #5
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fc81 	bl	8004164 <HAL_RCC_ClockConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001868:	f000 f9f0 	bl	8001c4c <Error_Handler>
  }
}
 800186c:	bf00      	nop
 800186e:	3750      	adds	r7, #80	; 0x50
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000

0800187c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_SPI1_Init+0x64>)
 8001882:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <MX_SPI1_Init+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_SPI1_Init+0x64>)
 8001888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800188c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_SPI1_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_SPI1_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_SPI1_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_SPI1_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_SPI1_Init+0x64>)
 80018a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_SPI1_Init+0x64>)
 80018b0:	2218      	movs	r2, #24
 80018b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_SPI1_Init+0x64>)
 80018c8:	220a      	movs	r2, #10
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_SPI1_Init+0x64>)
 80018ce:	f002 fe69 	bl	80045a4 <HAL_SPI_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018d8:	f000 f9b8 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000a0 	.word	0x200000a0
 80018e4:	40013000 	.word	0x40013000

080018e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	463b      	mov	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <MX_TIM2_Init+0x98>)
 8001906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_TIM2_Init+0x98>)
 800190e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM2_Init+0x98>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <MX_TIM2_Init+0x98>)
 800191c:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8001920:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_TIM2_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_TIM2_Init+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <MX_TIM2_Init+0x98>)
 8001930:	f003 fbe0 	bl	80050f4 <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800193a:	f000 f987 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	4619      	mov	r1, r3
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <MX_TIM2_Init+0x98>)
 800194c:	f003 fd9a 	bl	8005484 <HAL_TIM_ConfigClockSource>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001956:	f000 f979 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001962:	463b      	mov	r3, r7
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <MX_TIM2_Init+0x98>)
 8001968:	f003 ffb6 	bl	80058d8 <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001972:	f000 f96b 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200000f8 	.word	0x200000f8

08001984 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_UART4_Init+0x4c>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <MX_UART4_Init+0x50>)
 800198c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_UART4_Init+0x4c>)
 8001990:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001994:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_UART4_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_UART4_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_UART4_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_UART4_Init+0x4c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_UART4_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_UART4_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_UART4_Init+0x4c>)
 80019bc:	f004 f81c 	bl	80059f8 <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80019c6:	f000 f941 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000140 	.word	0x20000140
 80019d4:	40004c00 	.word	0x40004c00

080019d8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_UART5_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_UART5_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_UART5_Init+0x4c>)
 80019e4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80019e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_UART5_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_UART5_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_UART5_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_UART5_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_UART5_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_UART5_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_UART5_Init+0x4c>)
 8001a10:	f003 fff2 	bl	80059f8 <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f917 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000184 	.word	0x20000184
 8001a28:	40005000 	.word	0x40005000

08001a2c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001a32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a36:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001a58:	f000 ff5b 	bl	8002912 <HAL_HCD_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001a62:	f000 f8f3 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200001c8 	.word	0x200001c8

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a69      	ldr	r2, [pc, #420]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a62      	ldr	r2, [pc, #392]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b60      	ldr	r3, [pc, #384]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a5b      	ldr	r2, [pc, #364]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b52      	ldr	r3, [pc, #328]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a46      	ldr	r2, [pc, #280]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <MX_GPIO_Init+0x1c4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2108      	movs	r1, #8
 8001b32:	4841      	ldr	r0, [pc, #260]	; (8001c38 <MX_GPIO_Init+0x1c8>)
 8001b34:	f000 feba 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	483f      	ldr	r0, [pc, #252]	; (8001c3c <MX_GPIO_Init+0x1cc>)
 8001b3e:	f000 feb5 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001b48:	483d      	ldr	r0, [pc, #244]	; (8001c40 <MX_GPIO_Init+0x1d0>)
 8001b4a:	f000 feaf 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4834      	ldr	r0, [pc, #208]	; (8001c38 <MX_GPIO_Init+0x1c8>)
 8001b66:	f000 fd05 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	482e      	ldr	r0, [pc, #184]	; (8001c3c <MX_GPIO_Init+0x1cc>)
 8001b82:	f000 fcf7 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b86:	2301      	movs	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	482a      	ldr	r0, [pc, #168]	; (8001c44 <MX_GPIO_Init+0x1d4>)
 8001b9c:	f000 fcea 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4825      	ldr	r0, [pc, #148]	; (8001c48 <MX_GPIO_Init+0x1d8>)
 8001bb4:	f000 fcde 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	481c      	ldr	r0, [pc, #112]	; (8001c48 <MX_GPIO_Init+0x1d8>)
 8001bd6:	f000 fccd 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001bda:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4813      	ldr	r0, [pc, #76]	; (8001c40 <MX_GPIO_Init+0x1d0>)
 8001bf4:	f000 fcbe 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480d      	ldr	r0, [pc, #52]	; (8001c40 <MX_GPIO_Init+0x1d0>)
 8001c0c:	f000 fcb2 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_GPIO_Init+0x1c8>)
 8001c26:	f000 fca5 	bl	8002574 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3730      	adds	r7, #48	; 0x30
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020c00 	.word	0x40020c00
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <Error_Handler+0x8>
	...

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c96:	2007      	movs	r0, #7
 8001c98:	f000 fb98 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800

08001ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	; (8001d2c <HAL_SPI_MspInit+0x84>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d12b      	bne.n	8001d22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_SPI_MspInit+0x88>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_SPI_MspInit+0x88>)
 8001cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_SPI_MspInit+0x88>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_SPI_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_SPI_MspInit+0x88>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_SPI_MspInit+0x88>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d02:	23e0      	movs	r3, #224	; 0xe0
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d12:	2305      	movs	r3, #5
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_SPI_MspInit+0x8c>)
 8001d1e:	f000 fc29 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40013000 	.word	0x40013000
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020000 	.word	0x40020000

08001d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d48:	d115      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_TIM_Base_MspInit+0x48>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <HAL_TIM_Base_MspInit+0x48>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_TIM_Base_MspInit+0x48>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	201c      	movs	r0, #28
 8001d6c:	f000 fb39 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d70:	201c      	movs	r0, #28
 8001d72:	f000 fb52 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a59      	ldr	r2, [pc, #356]	; (8001f08 <HAL_UART_MspInit+0x184>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d153      	bne.n	8001e4e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
 8001daa:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4a57      	ldr	r2, [pc, #348]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001db4:	6413      	str	r3, [r2, #64]	; 0x40
 8001db6:	4b55      	ldr	r3, [pc, #340]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dbe:	623b      	str	r3, [r7, #32]
 8001dc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	4b51      	ldr	r3, [pc, #324]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b4e      	ldr	r3, [pc, #312]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a49      	ldr	r2, [pc, #292]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e12:	4619      	mov	r1, r3
 8001e14:	483e      	ldr	r0, [pc, #248]	; (8001f10 <HAL_UART_MspInit+0x18c>)
 8001e16:	f000 fbad 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e34:	4619      	mov	r1, r3
 8001e36:	4837      	ldr	r0, [pc, #220]	; (8001f14 <HAL_UART_MspInit+0x190>)
 8001e38:	f000 fb9c 	bl	8002574 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2034      	movs	r0, #52	; 0x34
 8001e42:	f000 face 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e46:	2034      	movs	r0, #52	; 0x34
 8001e48:	f000 fae7 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001e4c:	e057      	b.n	8001efe <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==UART5)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <HAL_UART_MspInit+0x194>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d152      	bne.n	8001efe <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_UART_MspInit+0x188>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <HAL_UART_MspInit+0x190>)
 8001eca:	f000 fb53 	bl	8002574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <HAL_UART_MspInit+0x198>)
 8001eea:	f000 fb43 	bl	8002574 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	2035      	movs	r0, #53	; 0x35
 8001ef4:	f000 fa75 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ef8:	2035      	movs	r0, #53	; 0x35
 8001efa:	f000 fa8e 	bl	800241a <HAL_NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3738      	adds	r7, #56	; 0x38
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40004c00 	.word	0x40004c00
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40005000 	.word	0x40005000
 8001f1c:	40020c00 	.word	0x40020c00

08001f20 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f40:	d147      	bne.n	8001fd2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <HAL_HCD_MspInit+0xbc>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <HAL_HCD_MspInit+0xbc>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_HCD_MspInit+0xbc>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	481b      	ldr	r0, [pc, #108]	; (8001fe0 <HAL_HCD_MspInit+0xc0>)
 8001f74:	f000 fafe 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001f78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4812      	ldr	r0, [pc, #72]	; (8001fe0 <HAL_HCD_MspInit+0xc0>)
 8001f96:	f000 faed 	bl	8002574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_HCD_MspInit+0xbc>)
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_HCD_MspInit+0xbc>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa4:	6353      	str	r3, [r2, #52]	; 0x34
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_HCD_MspInit+0xbc>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <HAL_HCD_MspInit+0xbc>)
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_HCD_MspInit+0xbc>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2043      	movs	r0, #67	; 0x43
 8001fc8:	f000 fa0b 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001fcc:	2043      	movs	r0, #67	; 0x43
 8001fce:	f000 fa24 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	; 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <NMI_Handler+0x4>

08001fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fee:	e7fe      	b.n	8001fee <HardFault_Handler+0x4>

08001ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <MemManage_Handler+0x4>

08001ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <BusFault_Handler+0x4>

08001ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <UsageFault_Handler+0x4>

08002002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002030:	f000 f8b8 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}

08002038 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <TIM2_IRQHandler+0x10>)
 800203e:	f003 f919 	bl	8005274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200000f8 	.word	0x200000f8

0800204c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <UART4_IRQHandler+0x10>)
 8002052:	f003 fd93 	bl	8005b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000140 	.word	0x20000140

08002060 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <UART5_IRQHandler+0x10>)
 8002066:	f003 fd89 	bl	8005b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000184 	.word	0x20000184

08002074 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <OTG_FS_IRQHandler+0x10>)
 800207a:	f000 fcac 	bl	80029d6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200001c8 	.word	0x200001c8

08002088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <SystemInit+0x20>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <SystemInit+0x20>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020b2:	490e      	ldr	r1, [pc, #56]	; (80020ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c8:	4c0b      	ldr	r4, [pc, #44]	; (80020f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d6:	f7ff ffd7 	bl	8002088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020da:	f005 f817 	bl	800710c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020de:	f7ff fa6b 	bl	80015b8 <main>
  bx  lr    
 80020e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80020f0:	080071a4 	.word	0x080071a4
  ldr r2, =_sbss
 80020f4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80020f8:	20000720 	.word	0x20000720

080020fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>
	...

08002100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_Init+0x40>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_Init+0x40>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_Init+0x40>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 f94f 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212e:	2000      	movs	r0, #0
 8002130:	f000 f808 	bl	8002144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002134:	f7ff fd90 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_InitTick+0x54>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_InitTick+0x58>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	fbb3 f3f1 	udiv	r3, r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f967 	bl	8002436 <HAL_SYSTICK_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e00e      	b.n	8002190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d80a      	bhi.n	800218e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002178:	2200      	movs	r2, #0
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f000 f92f 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <HAL_InitTick+0x5c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000008 	.word	0x20000008
 800219c:	20000010 	.word	0x20000010
 80021a0:	2000000c 	.word	0x2000000c

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x20>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x24>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_IncTick+0x24>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000010 	.word	0x20000010
 80021c8:	2000071c 	.word	0x2000071c

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	2000071c 	.word	0x2000071c

080021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff ffee 	bl	80021cc <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d005      	beq.n	800220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_Delay+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220a:	bf00      	nop
 800220c:	f7ff ffde 	bl	80021cc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d8f7      	bhi.n	800220c <HAL_Delay+0x28>
  {
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000010 	.word	0x20000010

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff8e 	bl	80022cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff29 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff3e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff8e 	bl	8002320 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5d 	bl	80022cc <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff31 	bl	8002290 <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa2 	bl	8002388 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff feb6 	bl	80021cc <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d008      	beq.n	8002480 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e052      	b.n	8002526 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0216 	bic.w	r2, r2, #22
 800248e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800249e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <HAL_DMA_Abort+0x62>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0208 	bic.w	r2, r2, #8
 80024be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d0:	e013      	b.n	80024fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d2:	f7ff fe7b 	bl	80021cc <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d90c      	bls.n	80024fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e015      	b.n	8002526 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e4      	bne.n	80024d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	223f      	movs	r2, #63	; 0x3f
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d004      	beq.n	800254c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e00c      	b.n	8002566 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2205      	movs	r2, #5
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	e16b      	b.n	8002868 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	f040 815a 	bne.w	8002862 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d005      	beq.n	80025c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d130      	bne.n	8002628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025fc:	2201      	movs	r2, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 0201 	and.w	r2, r3, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b03      	cmp	r3, #3
 8002632:	d017      	beq.n	8002664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d123      	bne.n	80026b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	69b9      	ldr	r1, [r7, #24]
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80b4 	beq.w	8002862 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b60      	ldr	r3, [pc, #384]	; (8002880 <HAL_GPIO_Init+0x30c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a5f      	ldr	r2, [pc, #380]	; (8002880 <HAL_GPIO_Init+0x30c>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <HAL_GPIO_Init+0x30c>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002716:	4a5b      	ldr	r2, [pc, #364]	; (8002884 <HAL_GPIO_Init+0x310>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	220f      	movs	r2, #15
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_GPIO_Init+0x314>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02b      	beq.n	800279a <HAL_GPIO_Init+0x226>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a51      	ldr	r2, [pc, #324]	; (800288c <HAL_GPIO_Init+0x318>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d025      	beq.n	8002796 <HAL_GPIO_Init+0x222>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a50      	ldr	r2, [pc, #320]	; (8002890 <HAL_GPIO_Init+0x31c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01f      	beq.n	8002792 <HAL_GPIO_Init+0x21e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x320>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x21a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4e      	ldr	r2, [pc, #312]	; (8002898 <HAL_GPIO_Init+0x324>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x216>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4d      	ldr	r2, [pc, #308]	; (800289c <HAL_GPIO_Init+0x328>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x212>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4c      	ldr	r2, [pc, #304]	; (80028a0 <HAL_GPIO_Init+0x32c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4b      	ldr	r2, [pc, #300]	; (80028a4 <HAL_GPIO_Init+0x330>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x20a>
 800277a:	2307      	movs	r3, #7
 800277c:	e00e      	b.n	800279c <HAL_GPIO_Init+0x228>
 800277e:	2308      	movs	r3, #8
 8002780:	e00c      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002782:	2306      	movs	r3, #6
 8002784:	e00a      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002786:	2305      	movs	r3, #5
 8002788:	e008      	b.n	800279c <HAL_GPIO_Init+0x228>
 800278a:	2304      	movs	r3, #4
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x228>
 800278e:	2303      	movs	r3, #3
 8002790:	e004      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002792:	2302      	movs	r3, #2
 8002794:	e002      	b.n	800279c <HAL_GPIO_Init+0x228>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_GPIO_Init+0x228>
 800279a:	2300      	movs	r3, #0
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	f002 0203 	and.w	r2, r2, #3
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	4093      	lsls	r3, r2
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ac:	4935      	ldr	r1, [pc, #212]	; (8002884 <HAL_GPIO_Init+0x310>)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ba:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <HAL_GPIO_Init+0x334>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027de:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <HAL_GPIO_Init+0x334>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_GPIO_Init+0x334>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_GPIO_Init+0x334>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_GPIO_Init+0x334>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <HAL_GPIO_Init+0x334>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	f67f ae90 	bls.w	8002590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40013800 	.word	0x40013800
 8002888:	40020000 	.word	0x40020000
 800288c:	40020400 	.word	0x40020400
 8002890:	40020800 	.word	0x40020800
 8002894:	40020c00 	.word	0x40020c00
 8002898:	40021000 	.word	0x40021000
 800289c:	40021400 	.word	0x40021400
 80028a0:	40021800 	.word	0x40021800
 80028a4:	40021c00 	.word	0x40021c00
 80028a8:	40013c00 	.word	0x40013c00

080028ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
 80028b8:	4613      	mov	r3, r2
 80028ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c8:	e003      	b.n	80028d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	619a      	str	r2, [r3, #24]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f0:	887a      	ldrh	r2, [r7, #2]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4013      	ands	r3, r2
 80028f6:	041a      	lsls	r2, r3, #16
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43d9      	mvns	r1, r3
 80028fc:	887b      	ldrh	r3, [r7, #2]
 80028fe:	400b      	ands	r3, r1
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	619a      	str	r2, [r3, #24]
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002914:	b08f      	sub	sp, #60	; 0x3c
 8002916:	af0a      	add	r7, sp, #40	; 0x28
 8002918:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e054      	b.n	80029ce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff faee 	bl	8001f20 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2203      	movs	r2, #3
 8002948:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f004 f85b 	bl	8006a1e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	687e      	ldr	r6, [r7, #4]
 8002970:	466d      	mov	r5, sp
 8002972:	f106 0410 	add.w	r4, r6, #16
 8002976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002982:	e885 0003 	stmia.w	r5, {r0, r1}
 8002986:	1d33      	adds	r3, r6, #4
 8002988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800298a:	6838      	ldr	r0, [r7, #0]
 800298c:	f003 ffe6 	bl	800695c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	4618      	mov	r0, r3
 8002998:	f004 f852 	bl	8006a40 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	687e      	ldr	r6, [r7, #4]
 80029a4:	466d      	mov	r5, sp
 80029a6:	f106 0410 	add.w	r4, r6, #16
 80029aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ba:	1d33      	adds	r3, r6, #4
 80029bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029be:	6838      	ldr	r0, [r7, #0]
 80029c0:	f004 f99c 	bl	8006cfc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029d6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 f942 	bl	8006c76 <USB_GetMode>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	f040 80f6 	bne.w	8002be6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 f926 	bl	8006c50 <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80ec 	beq.w	8002be4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 f91d 	bl	8006c50 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a20:	d104      	bne.n	8002a2c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a2a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f004 f90d 	bl	8006c50 <USB_ReadInterrupts>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a40:	d104      	bne.n	8002a4c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a4a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 f8fd 	bl	8006c50 <USB_ReadInterrupts>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a60:	d104      	bne.n	8002a6c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a6a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 f8ed 	bl	8006c50 <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d103      	bne.n	8002a88 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2202      	movs	r2, #2
 8002a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 f8df 	bl	8006c50 <USB_ReadInterrupts>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002aa6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ab8:	2110      	movs	r1, #16
 8002aba:	6938      	ldr	r0, [r7, #16]
 8002abc:	f004 f80c 	bl	8006ad8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ac0:	6938      	ldr	r0, [r7, #16]
 8002ac2:	f004 f83d 	bl	8006b40 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f004 f9d5 	bl	8006e7c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f89e 	bl	8002c14 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 f8b7 	bl	8006c50 <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d102      	bne.n	8002af4 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f001 f84c 	bl	8003b8c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 f8a9 	bl	8006c50 <USB_ReadInterrupts>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d106      	bne.n	8002b16 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f86f 	bl	8002bec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2208      	movs	r2, #8
 8002b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 f898 	bl	8006c50 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d101      	bne.n	8002b2e <HAL_HCD_IRQHandler+0x158>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_HCD_IRQHandler+0x15a>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0210 	bic.w	r2, r2, #16
 8002b42:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 ff4f 	bl	80039e8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0210 	orr.w	r2, r2, #16
 8002b58:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f004 f876 	bl	8006c50 <USB_ReadInterrupts>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6e:	d13a      	bne.n	8002be6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f004 f9bb 	bl	8006ef0 <USB_HC_ReadInterrupt>
 8002b7a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e025      	b.n	8002bce <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bac:	d106      	bne.n	8002bbc <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f859 	bl	8002c6c <HCD_HC_IN_IRQHandler>
 8002bba:	e005      	b.n	8002bc8 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fba7 	bl	8003316 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d3d4      	bcc.n	8002b82 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	e000      	b.n	8002be6 <HAL_HCD_IRQHandler+0x210>
      return;
 8002be4:	bf00      	nop
    }
  }
}
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	70fb      	strb	r3, [r7, #3]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d11a      	bne.n	8002cd2 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2304      	movs	r3, #4
 8002cac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3361      	adds	r3, #97	; 0x61
 8002cbc:	2206      	movs	r2, #6
 8002cbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f004 f921 	bl	8006f12 <USB_HC_Halt>
 8002cd0:	e0af      	b.n	8002e32 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce8:	d11b      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3361      	adds	r3, #97	; 0x61
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 f8f9 	bl	8006f12 <USB_HC_Halt>
 8002d20:	e087      	b.n	8002e32 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d109      	bne.n	8002d4c <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	2320      	movs	r3, #32
 8002d48:	6093      	str	r3, [r2, #8]
 8002d4a:	e072      	b.n	8002e32 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d11a      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2308      	movs	r3, #8
 8002d72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3361      	adds	r3, #97	; 0x61
 8002d82:	2205      	movs	r2, #5
 8002d84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f004 f8be 	bl	8006f12 <USB_HC_Halt>
 8002d96:	e04c      	b.n	8002e32 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dae:	d11b      	bne.n	8002de8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3361      	adds	r3, #97	; 0x61
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 f896 	bl	8006f12 <USB_HC_Halt>
 8002de6:	e024      	b.n	8002e32 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b80      	cmp	r3, #128	; 0x80
 8002dfc:	d119      	bne.n	8002e32 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3361      	adds	r3, #97	; 0x61
 8002e1e:	2206      	movs	r2, #6
 8002e20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f004 f870 	bl	8006f12 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e48:	d112      	bne.n	8002e70 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f004 f85c 	bl	8006f12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e6c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002e6e:	e24e      	b.n	800330e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	f040 80df 	bne.w	8003046 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d019      	beq.n	8002ec4 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3348      	adds	r3, #72	; 0x48
 8002e9e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	0159      	lsls	r1, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002eb2:	1ad2      	subs	r2, r2, r3
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	202c      	movs	r0, #44	; 0x2c
 8002eba:	fb00 f303 	mul.w	r3, r0, r3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3350      	adds	r3, #80	; 0x50
 8002ec2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3361      	adds	r3, #97	; 0x61
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	335c      	adds	r3, #92	; 0x5c
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	333f      	adds	r3, #63	; 0x3f
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	212c      	movs	r1, #44	; 0x2c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	333f      	adds	r3, #63	; 0x3f
 8002f1c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d111      	bne.n	8002f46 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fff0 	bl	8006f12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2310      	movs	r3, #16
 8002f42:	6093      	str	r3, [r2, #8]
 8002f44:	e03a      	b.n	8002fbc <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	333f      	adds	r3, #63	; 0x3f
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d009      	beq.n	8002f6e <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	333f      	adds	r3, #63	; 0x3f
 8002f68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d126      	bne.n	8002fbc <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	0151      	lsls	r1, r2, #5
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	440a      	add	r2, r1
 8002f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f8c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3360      	adds	r3, #96	; 0x60
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	b2d9      	uxtb	r1, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	202c      	movs	r0, #44	; 0x2c
 8002faa:	fb00 f303 	mul.w	r3, r0, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3360      	adds	r3, #96	; 0x60
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fe4a 	bl	8002c50 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d12b      	bne.n	800301c <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3348      	adds	r3, #72	; 0x48
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	202c      	movs	r0, #44	; 0x2c
 8002fda:	fb00 f202 	mul.w	r2, r0, r2
 8002fde:	440a      	add	r2, r1
 8002fe0:	3240      	adds	r2, #64	; 0x40
 8002fe2:	8812      	ldrh	r2, [r2, #0]
 8002fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 818e 	beq.w	800330e <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3354      	adds	r3, #84	; 0x54
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	f083 0301 	eor.w	r3, r3, #1
 8003006:	b2d8      	uxtb	r0, r3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3354      	adds	r3, #84	; 0x54
 8003016:	4602      	mov	r2, r0
 8003018:	701a      	strb	r2, [r3, #0]
}
 800301a:	e178      	b.n	800330e <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3354      	adds	r3, #84	; 0x54
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	f083 0301 	eor.w	r3, r3, #1
 8003030:	b2d8      	uxtb	r0, r3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3354      	adds	r3, #84	; 0x54
 8003040:	4602      	mov	r2, r0
 8003042:	701a      	strb	r2, [r3, #0]
}
 8003044:	e163      	b.n	800330e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	f040 80f6 	bne.w	800324a <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3361      	adds	r3, #97	; 0x61
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d109      	bne.n	8003086 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3360      	adds	r3, #96	; 0x60
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e0c9      	b.n	800321a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3361      	adds	r3, #97	; 0x61
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d109      	bne.n	80030ae <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3360      	adds	r3, #96	; 0x60
 80030a8:	2205      	movs	r2, #5
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e0b5      	b.n	800321a <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3361      	adds	r3, #97	; 0x61
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d009      	beq.n	80030d6 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3361      	adds	r3, #97	; 0x61
 80030d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d150      	bne.n	8003178 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	335c      	adds	r3, #92	; 0x5c
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	202c      	movs	r0, #44	; 0x2c
 80030ee:	fb00 f303 	mul.w	r3, r0, r3
 80030f2:	440b      	add	r3, r1
 80030f4:	335c      	adds	r3, #92	; 0x5c
 80030f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	335c      	adds	r3, #92	; 0x5c
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d912      	bls.n	8003132 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	335c      	adds	r3, #92	; 0x5c
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	3360      	adds	r3, #96	; 0x60
 800312c:	2204      	movs	r2, #4
 800312e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003130:	e073      	b.n	800321a <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	3360      	adds	r3, #96	; 0x60
 8003140:	2202      	movs	r2, #2
 8003142:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800315a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003162:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003176:	e050      	b.n	800321a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3361      	adds	r3, #97	; 0x61
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d122      	bne.n	80031d2 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031b4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031bc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ca:	461a      	mov	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	e023      	b.n	800321a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3361      	adds	r3, #97	; 0x61
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b07      	cmp	r3, #7
 80031e4:	d119      	bne.n	800321a <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	335c      	adds	r3, #92	; 0x5c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	202c      	movs	r0, #44	; 0x2c
 80031fe:	fb00 f303 	mul.w	r3, r0, r3
 8003202:	440b      	add	r3, r1
 8003204:	335c      	adds	r3, #92	; 0x5c
 8003206:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3360      	adds	r3, #96	; 0x60
 8003216:	2204      	movs	r2, #4
 8003218:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	461a      	mov	r2, r3
 8003228:	2302      	movs	r3, #2
 800322a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	b2d9      	uxtb	r1, r3
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	202c      	movs	r0, #44	; 0x2c
 8003236:	fb00 f303 	mul.w	r3, r0, r3
 800323a:	4413      	add	r3, r2
 800323c:	3360      	adds	r3, #96	; 0x60
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fd04 	bl	8002c50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003248:	e061      	b.n	800330e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b10      	cmp	r3, #16
 800325e:	d156      	bne.n	800330e <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	333f      	adds	r3, #63	; 0x3f
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d111      	bne.n	8003298 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	335c      	adds	r3, #92	; 0x5c
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	4611      	mov	r1, r2
 8003290:	4618      	mov	r0, r3
 8003292:	f003 fe3e 	bl	8006f12 <USB_HC_Halt>
 8003296:	e031      	b.n	80032fc <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	333f      	adds	r3, #63	; 0x3f
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	333f      	adds	r3, #63	; 0x3f
 80032ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d11d      	bne.n	80032fc <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	335c      	adds	r3, #92	; 0x5c
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d110      	bne.n	80032fc <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	3361      	adds	r3, #97	; 0x61
 80032e8:	2203      	movs	r2, #3
 80032ea:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 fe0b 	bl	8006f12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	2310      	movs	r3, #16
 800330c:	6093      	str	r3, [r2, #8]
}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b088      	sub	sp, #32
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b04      	cmp	r3, #4
 8003344:	d11a      	bne.n	800337c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	2304      	movs	r3, #4
 8003356:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	3361      	adds	r3, #97	; 0x61
 8003366:	2206      	movs	r2, #6
 8003368:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fdcc 	bl	8006f12 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800337a:	e331      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d12e      	bne.n	80033f0 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4413      	add	r3, r2
 800339a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339e:	461a      	mov	r2, r3
 80033a0:	2320      	movs	r3, #32
 80033a2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	333d      	adds	r3, #61	; 0x3d
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	f040 8313 	bne.w	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	333d      	adds	r3, #61	; 0x3d
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3360      	adds	r3, #96	; 0x60
 80033da:	2202      	movs	r2, #2
 80033dc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 fd92 	bl	8006f12 <USB_HC_Halt>
}
 80033ee:	e2f7      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003406:	d112      	bne.n	800342e <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800341a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f003 fd73 	bl	8006f12 <USB_HC_Halt>
}
 800342c:	e2d8      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d140      	bne.n	80034c6 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	335c      	adds	r3, #92	; 0x5c
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	4413      	add	r3, r2
 800345e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d111      	bne.n	8003490 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	333d      	adds	r3, #61	; 0x3d
 800347a:	2201      	movs	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348a:	461a      	mov	r2, r3
 800348c:	2340      	movs	r3, #64	; 0x40
 800348e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	2301      	movs	r3, #1
 80034a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3361      	adds	r3, #97	; 0x61
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f003 fd27 	bl	8006f12 <USB_HC_Halt>
}
 80034c4:	e28c      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d12c      	bne.n	8003536 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	3361      	adds	r3, #97	; 0x61
 80034ea:	2204      	movs	r2, #4
 80034ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	333d      	adds	r3, #61	; 0x3d
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	212c      	movs	r1, #44	; 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	335c      	adds	r3, #92	; 0x5c
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fcf8 	bl	8006f12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	461a      	mov	r2, r3
 8003530:	2340      	movs	r3, #64	; 0x40
 8003532:	6093      	str	r3, [r2, #8]
}
 8003534:	e254      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b08      	cmp	r3, #8
 800354a:	d11a      	bne.n	8003582 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	461a      	mov	r2, r3
 800355a:	2308      	movs	r3, #8
 800355c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	212c      	movs	r1, #44	; 0x2c
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	4413      	add	r3, r2
 800356a:	3361      	adds	r3, #97	; 0x61
 800356c:	2205      	movs	r2, #5
 800356e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f003 fcc9 	bl	8006f12 <USB_HC_Halt>
}
 8003580:	e22e      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b10      	cmp	r3, #16
 8003596:	d140      	bne.n	800361a <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	335c      	adds	r3, #92	; 0x5c
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	3361      	adds	r3, #97	; 0x61
 80035b8:	2203      	movs	r2, #3
 80035ba:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	333d      	adds	r3, #61	; 0x3d
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d112      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	212c      	movs	r1, #44	; 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	333c      	adds	r3, #60	; 0x3c
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d108      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	333d      	adds	r3, #61	; 0x3d
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f003 fc86 	bl	8006f12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4413      	add	r3, r2
 800360e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003612:	461a      	mov	r2, r3
 8003614:	2310      	movs	r3, #16
 8003616:	6093      	str	r3, [r2, #8]
}
 8003618:	e1e2      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b80      	cmp	r3, #128	; 0x80
 800362e:	d164      	bne.n	80036fa <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d111      	bne.n	800365c <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3361      	adds	r3, #97	; 0x61
 8003646:	2206      	movs	r2, #6
 8003648:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f003 fc5c 	bl	8006f12 <USB_HC_Halt>
 800365a:	e044      	b.n	80036e6 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	335c      	adds	r3, #92	; 0x5c
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	202c      	movs	r0, #44	; 0x2c
 8003674:	fb00 f303 	mul.w	r3, r0, r3
 8003678:	440b      	add	r3, r1
 800367a:	335c      	adds	r3, #92	; 0x5c
 800367c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	335c      	adds	r3, #92	; 0x5c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d920      	bls.n	80036d4 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	335c      	adds	r3, #92	; 0x5c
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3360      	adds	r3, #96	; 0x60
 80036b2:	2204      	movs	r2, #4
 80036b4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	b2d9      	uxtb	r1, r3
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	202c      	movs	r0, #44	; 0x2c
 80036c0:	fb00 f303 	mul.w	r3, r0, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3360      	adds	r3, #96	; 0x60
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fabf 	bl	8002c50 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036d2:	e008      	b.n	80036e6 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	3360      	adds	r3, #96	; 0x60
 80036e2:	2202      	movs	r2, #2
 80036e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f2:	461a      	mov	r2, r3
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	6093      	str	r3, [r2, #8]
}
 80036f8:	e172      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003710:	d11b      	bne.n	800374a <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	3361      	adds	r3, #97	; 0x61
 8003720:	2208      	movs	r2, #8
 8003722:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f003 fbef 	bl	8006f12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	461a      	mov	r2, r3
 8003742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003746:	6093      	str	r3, [r2, #8]
}
 8003748:	e14a      	b.n	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b02      	cmp	r3, #2
 800375e:	f040 813f 	bne.w	80039e0 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	212c      	movs	r1, #44	; 0x2c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	3361      	adds	r3, #97	; 0x61
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d17d      	bne.n	8003872 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	3360      	adds	r3, #96	; 0x60
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	333f      	adds	r3, #63	; 0x3f
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d00a      	beq.n	80037b2 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	333f      	adds	r3, #63	; 0x3f
 80037aa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	f040 8100 	bne.w	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	212c      	movs	r1, #44	; 0x2c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	3355      	adds	r3, #85	; 0x55
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	f083 0301 	eor.w	r3, r3, #1
 80037ce:	b2d8      	uxtb	r0, r3
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	3355      	adds	r3, #85	; 0x55
 80037de:	4602      	mov	r2, r0
 80037e0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	f040 80e3 	bne.w	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	334c      	adds	r3, #76	; 0x4c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80d8 	beq.w	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	334c      	adds	r3, #76	; 0x4c
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	202c      	movs	r0, #44	; 0x2c
 8003818:	fb00 f202 	mul.w	r2, r0, r2
 800381c:	440a      	add	r2, r1
 800381e:	3240      	adds	r2, #64	; 0x40
 8003820:	8812      	ldrh	r2, [r2, #0]
 8003822:	4413      	add	r3, r2
 8003824:	3b01      	subs	r3, #1
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	202c      	movs	r0, #44	; 0x2c
 800382c:	fb00 f202 	mul.w	r2, r0, r2
 8003830:	440a      	add	r2, r1
 8003832:	3240      	adds	r2, #64	; 0x40
 8003834:	8812      	ldrh	r2, [r2, #0]
 8003836:	fbb3 f3f2 	udiv	r3, r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80b5 	beq.w	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	212c      	movs	r1, #44	; 0x2c
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	4413      	add	r3, r2
 8003854:	3355      	adds	r3, #85	; 0x55
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	f083 0301 	eor.w	r3, r3, #1
 800385c:	b2d8      	uxtb	r0, r3
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	3355      	adds	r3, #85	; 0x55
 800386c:	4602      	mov	r2, r0
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e09f      	b.n	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3361      	adds	r3, #97	; 0x61
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d109      	bne.n	800389a <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	3360      	adds	r3, #96	; 0x60
 8003894:	2202      	movs	r2, #2
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e08b      	b.n	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3361      	adds	r3, #97	; 0x61
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d109      	bne.n	80038c2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	212c      	movs	r1, #44	; 0x2c
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	3360      	adds	r3, #96	; 0x60
 80038bc:	2202      	movs	r2, #2
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e077      	b.n	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	212c      	movs	r1, #44	; 0x2c
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	3361      	adds	r3, #97	; 0x61
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d109      	bne.n	80038ea <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	212c      	movs	r1, #44	; 0x2c
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	3360      	adds	r3, #96	; 0x60
 80038e4:	2205      	movs	r2, #5
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e063      	b.n	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3361      	adds	r3, #97	; 0x61
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d009      	beq.n	8003912 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	212c      	movs	r1, #44	; 0x2c
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	4413      	add	r3, r2
 800390a:	3361      	adds	r3, #97	; 0x61
 800390c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800390e:	2b08      	cmp	r3, #8
 8003910:	d14f      	bne.n	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	212c      	movs	r1, #44	; 0x2c
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	4413      	add	r3, r2
 800391e:	335c      	adds	r3, #92	; 0x5c
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	202c      	movs	r0, #44	; 0x2c
 800392a:	fb00 f303 	mul.w	r3, r0, r3
 800392e:	440b      	add	r3, r1
 8003930:	335c      	adds	r3, #92	; 0x5c
 8003932:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	335c      	adds	r3, #92	; 0x5c
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d912      	bls.n	800396e <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	335c      	adds	r3, #92	; 0x5c
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	212c      	movs	r1, #44	; 0x2c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	3360      	adds	r3, #96	; 0x60
 8003968:	2204      	movs	r2, #4
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e021      	b.n	80039b2 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	212c      	movs	r1, #44	; 0x2c
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	4413      	add	r3, r2
 800397a:	3360      	adds	r3, #96	; 0x60
 800397c:	2202      	movs	r2, #2
 800397e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	4413      	add	r3, r2
 8003988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003996:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800399e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ac:	461a      	mov	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039be:	461a      	mov	r2, r3
 80039c0:	2302      	movs	r3, #2
 80039c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	b2d9      	uxtb	r1, r3
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	202c      	movs	r0, #44	; 0x2c
 80039ce:	fb00 f303 	mul.w	r3, r0, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	3360      	adds	r3, #96	; 0x60
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff f938 	bl	8002c50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039e0:	bf00      	nop
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	0c5b      	lsrs	r3, r3, #17
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a1c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d004      	beq.n	8003a2e <HCD_RXQLVL_IRQHandler+0x46>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	f000 80a9 	beq.w	8003b7e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a2c:	e0aa      	b.n	8003b84 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a6 	beq.w	8003b82 <HCD_RXQLVL_IRQHandler+0x19a>
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3344      	adds	r3, #68	; 0x44
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 809b 	beq.w	8003b82 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	212c      	movs	r1, #44	; 0x2c
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	3350      	adds	r3, #80	; 0x50
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	441a      	add	r2, r3
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	202c      	movs	r0, #44	; 0x2c
 8003a66:	fb00 f303 	mul.w	r3, r0, r3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	334c      	adds	r3, #76	; 0x4c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d87a      	bhi.n	8003b6a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	212c      	movs	r1, #44	; 0x2c
 8003a7e:	fb01 f303 	mul.w	r3, r1, r3
 8003a82:	4413      	add	r3, r2
 8003a84:	3344      	adds	r3, #68	; 0x44
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	b292      	uxth	r2, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f003 f887 	bl	8006ba0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3344      	adds	r3, #68	; 0x44
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	441a      	add	r2, r3
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	202c      	movs	r0, #44	; 0x2c
 8003aac:	fb00 f303 	mul.w	r3, r0, r3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3344      	adds	r3, #68	; 0x44
 8003ab4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	212c      	movs	r1, #44	; 0x2c
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3350      	adds	r3, #80	; 0x50
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	441a      	add	r2, r3
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	202c      	movs	r0, #44	; 0x2c
 8003ad0:	fb00 f303 	mul.w	r3, r0, r3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3350      	adds	r3, #80	; 0x50
 8003ad8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	0cdb      	lsrs	r3, r3, #19
 8003aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aee:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3340      	adds	r3, #64	; 0x40
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d13c      	bne.n	8003b82 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d039      	beq.n	8003b82 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b24:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b2c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3354      	adds	r3, #84	; 0x54
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	f083 0301 	eor.w	r3, r3, #1
 8003b54:	b2d8      	uxtb	r0, r3
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	212c      	movs	r1, #44	; 0x2c
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	4413      	add	r3, r2
 8003b62:	3354      	adds	r3, #84	; 0x54
 8003b64:	4602      	mov	r2, r0
 8003b66:	701a      	strb	r2, [r3, #0]
      break;
 8003b68:	e00b      	b.n	8003b82 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	3360      	adds	r3, #96	; 0x60
 8003b78:	2204      	movs	r2, #4
 8003b7a:	701a      	strb	r2, [r3, #0]
      break;
 8003b7c:	e001      	b.n	8003b82 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003b82:	bf00      	nop
  }
}
 8003b84:	bf00      	nop
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003bb8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d10b      	bne.n	8003bdc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d102      	bne.n	8003bd4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff f816 	bl	8002c00 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f043 0302 	orr.w	r3, r3, #2
 8003bda:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d132      	bne.n	8003c4c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d126      	bne.n	8003c46 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d113      	bne.n	8003c28 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c0a:	d106      	bne.n	8003c1a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2102      	movs	r1, #2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f003 f932 	bl	8006e7c <USB_InitFSLSPClkSel>
 8003c18:	e011      	b.n	8003c3e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f003 f92b 	bl	8006e7c <USB_InitFSLSPClkSel>
 8003c26:	e00a      	b.n	8003c3e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c36:	461a      	mov	r2, r3
 8003c38:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c3c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fe fff2 	bl	8002c28 <HAL_HCD_PortEnabled_Callback>
 8003c44:	e002      	b.n	8003c4c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fe fff8 	bl	8002c3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d103      	bne.n	8003c5e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e267      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d075      	beq.n	8003d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c92:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9e:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d112      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003caa:	4b82      	ldr	r3, [pc, #520]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	4b7e      	ldr	r3, [pc, #504]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d05b      	beq.n	8003d7c <HAL_RCC_OscConfig+0x108>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d157      	bne.n	8003d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e242      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x74>
 8003cda:	4b76      	ldr	r3, [pc, #472]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a75      	ldr	r2, [pc, #468]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e01d      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x98>
 8003cf2:	4b70      	ldr	r3, [pc, #448]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6f      	ldr	r2, [pc, #444]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b6d      	ldr	r3, [pc, #436]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a6c      	ldr	r2, [pc, #432]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003d0c:	4b69      	ldr	r3, [pc, #420]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a68      	ldr	r2, [pc, #416]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4b66      	ldr	r3, [pc, #408]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a65      	ldr	r2, [pc, #404]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d013      	beq.n	8003d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fa4e 	bl	80021cc <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe fa4a 	bl	80021cc <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e207      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b5b      	ldr	r3, [pc, #364]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0xc0>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fe fa3a 	bl	80021cc <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fe fa36 	bl	80021cc <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1f3      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	4b51      	ldr	r3, [pc, #324]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0xe8>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d063      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d8a:	4b4a      	ldr	r3, [pc, #296]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d96:	4b47      	ldr	r3, [pc, #284]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d11c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da2:	4b44      	ldr	r3, [pc, #272]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d116      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e1c7      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b3b      	ldr	r3, [pc, #236]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4937      	ldr	r1, [pc, #220]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	e03a      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de4:	4b34      	ldr	r3, [pc, #208]	; (8003eb8 <HAL_RCC_OscConfig+0x244>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fe f9ef 	bl	80021cc <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df2:	f7fe f9eb 	bl	80021cc <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e1a8      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	4b2b      	ldr	r3, [pc, #172]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4925      	ldr	r1, [pc, #148]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_RCC_OscConfig+0x244>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe f9ce 	bl	80021cc <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e34:	f7fe f9ca 	bl	80021cc <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e187      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d036      	beq.n	8003ecc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d016      	beq.n	8003e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_RCC_OscConfig+0x248>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fe f9ae 	bl	80021cc <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fe f9aa 	bl	80021cc <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e167      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x200>
 8003e92:	e01b      	b.n	8003ecc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <HAL_RCC_OscConfig+0x248>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fe f997 	bl	80021cc <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	e00e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea2:	f7fe f993 	bl	80021cc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d907      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e150      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	42470000 	.word	0x42470000
 8003ebc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ea      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8097 	beq.w	8004008 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ede:	4b81      	ldr	r3, [pc, #516]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	4b7d      	ldr	r3, [pc, #500]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a7c      	ldr	r2, [pc, #496]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8003efa:	4b7a      	ldr	r3, [pc, #488]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0a:	4b77      	ldr	r3, [pc, #476]	; (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d118      	bne.n	8003f48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f16:	4b74      	ldr	r3, [pc, #464]	; (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a73      	ldr	r2, [pc, #460]	; (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f22:	f7fe f953 	bl	80021cc <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2a:	f7fe f94f 	bl	80021cc <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e10c      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <HAL_RCC_OscConfig+0x474>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2ea>
 8003f50:	4b64      	ldr	r3, [pc, #400]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	4a63      	ldr	r2, [pc, #396]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5c:	e01c      	b.n	8003f98 <HAL_RCC_OscConfig+0x324>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x30c>
 8003f66:	4b5f      	ldr	r3, [pc, #380]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	4a5e      	ldr	r2, [pc, #376]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f6c:	f043 0304 	orr.w	r3, r3, #4
 8003f70:	6713      	str	r3, [r2, #112]	; 0x70
 8003f72:	4b5c      	ldr	r3, [pc, #368]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	4a5b      	ldr	r2, [pc, #364]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0x324>
 8003f80:	4b58      	ldr	r3, [pc, #352]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4a57      	ldr	r2, [pc, #348]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8c:	4b55      	ldr	r3, [pc, #340]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	4a54      	ldr	r2, [pc, #336]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	f023 0304 	bic.w	r3, r3, #4
 8003f96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d015      	beq.n	8003fcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa0:	f7fe f914 	bl	80021cc <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa8:	f7fe f910 	bl	80021cc <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0cb      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbe:	4b49      	ldr	r3, [pc, #292]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ee      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x334>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fcc:	f7fe f8fe 	bl	80021cc <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fe f8fa 	bl	80021cc <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e0b5      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fea:	4b3e      	ldr	r3, [pc, #248]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1ee      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffc:	4b39      	ldr	r3, [pc, #228]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	4a38      	ldr	r2, [pc, #224]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004006:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80a1 	beq.w	8004154 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004012:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b08      	cmp	r3, #8
 800401c:	d05c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d141      	bne.n	80040aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b31      	ldr	r3, [pc, #196]	; (80040ec <HAL_RCC_OscConfig+0x478>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fe f8ce 	bl	80021cc <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004034:	f7fe f8ca 	bl	80021cc <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e087      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	019b      	lsls	r3, r3, #6
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	3b01      	subs	r3, #1
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	491b      	ldr	r1, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <HAL_RCC_OscConfig+0x478>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fe f8a3 	bl	80021cc <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408a:	f7fe f89f 	bl	80021cc <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e05c      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x416>
 80040a8:	e054      	b.n	8004154 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_RCC_OscConfig+0x478>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe f88c 	bl	80021cc <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fe f888 	bl	80021cc <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e045      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_RCC_OscConfig+0x470>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x444>
 80040d6:	e03d      	b.n	8004154 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e038      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40007000 	.word	0x40007000
 80040ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <HAL_RCC_OscConfig+0x4ec>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d028      	beq.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d121      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d11a      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004126:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004128:	4293      	cmp	r3, r2
 800412a:	d111      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	3b01      	subs	r3, #1
 800413a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800

08004164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cc      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b68      	ldr	r3, [pc, #416]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d90c      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b65      	ldr	r3, [pc, #404]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b63      	ldr	r3, [pc, #396]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b8      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b8:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a58      	ldr	r2, [pc, #352]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d0:	4b53      	ldr	r3, [pc, #332]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a52      	ldr	r2, [pc, #328]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b50      	ldr	r3, [pc, #320]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	494d      	ldr	r1, [pc, #308]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d044      	beq.n	8004284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	4b47      	ldr	r3, [pc, #284]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d119      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e07f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d003      	beq.n	8004222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421e:	2b03      	cmp	r3, #3
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b3f      	ldr	r3, [pc, #252]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3b      	ldr	r3, [pc, #236]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e067      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b37      	ldr	r3, [pc, #220]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4934      	ldr	r1, [pc, #208]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fd ffba 	bl	80021cc <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fd ffb6 	bl	80021cc <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e04f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d20c      	bcs.n	80042ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e032      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4916      	ldr	r1, [pc, #88]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	490e      	ldr	r1, [pc, #56]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ea:	f000 f821 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	490a      	ldr	r1, [pc, #40]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	5ccb      	ldrb	r3, [r1, r3]
 80042fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004306:	4b09      	ldr	r3, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd ff1a 	bl	8002144 <HAL_InitTick>

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00
 8004320:	40023800 	.word	0x40023800
 8004324:	0800717c 	.word	0x0800717c
 8004328:	20000008 	.word	0x20000008
 800432c:	2000000c 	.word	0x2000000c

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b094      	sub	sp, #80	; 0x50
 8004336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	647b      	str	r3, [r7, #68]	; 0x44
 800433c:	2300      	movs	r3, #0
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004340:	2300      	movs	r3, #0
 8004342:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004348:	4b79      	ldr	r3, [pc, #484]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d00d      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x40>
 8004354:	2b08      	cmp	r3, #8
 8004356:	f200 80e1 	bhi.w	800451c <HAL_RCC_GetSysClockFreq+0x1ec>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x34>
 800435e:	2b04      	cmp	r3, #4
 8004360:	d003      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x3a>
 8004362:	e0db      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b73      	ldr	r3, [pc, #460]	; (8004534 <HAL_RCC_GetSysClockFreq+0x204>)
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004368:	e0db      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436a:	4b73      	ldr	r3, [pc, #460]	; (8004538 <HAL_RCC_GetSysClockFreq+0x208>)
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800436e:	e0d8      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004370:	4b6f      	ldr	r3, [pc, #444]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800437a:	4b6d      	ldr	r3, [pc, #436]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d063      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004386:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	2200      	movs	r2, #0
 800438e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004390:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	633b      	str	r3, [r7, #48]	; 0x30
 800439a:	2300      	movs	r3, #0
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
 800439e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b4:	0150      	lsls	r0, r2, #5
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4621      	mov	r1, r4
 80043bc:	1a51      	subs	r1, r2, r1
 80043be:	6139      	str	r1, [r7, #16]
 80043c0:	4629      	mov	r1, r5
 80043c2:	eb63 0301 	sbc.w	r3, r3, r1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d4:	4659      	mov	r1, fp
 80043d6:	018b      	lsls	r3, r1, #6
 80043d8:	4651      	mov	r1, sl
 80043da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043de:	4651      	mov	r1, sl
 80043e0:	018a      	lsls	r2, r1, #6
 80043e2:	4651      	mov	r1, sl
 80043e4:	ebb2 0801 	subs.w	r8, r2, r1
 80043e8:	4659      	mov	r1, fp
 80043ea:	eb63 0901 	sbc.w	r9, r3, r1
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004402:	4690      	mov	r8, r2
 8004404:	4699      	mov	r9, r3
 8004406:	4623      	mov	r3, r4
 8004408:	eb18 0303 	adds.w	r3, r8, r3
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	462b      	mov	r3, r5
 8004410:	eb49 0303 	adc.w	r3, r9, r3
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004422:	4629      	mov	r1, r5
 8004424:	024b      	lsls	r3, r1, #9
 8004426:	4621      	mov	r1, r4
 8004428:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800442c:	4621      	mov	r1, r4
 800442e:	024a      	lsls	r2, r1, #9
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004436:	2200      	movs	r2, #0
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
 800443a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800443c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004440:	f7fc f9f8 	bl	8000834 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800444c:	e058      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444e:	4b38      	ldr	r3, [pc, #224]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	2200      	movs	r2, #0
 8004456:	4618      	mov	r0, r3
 8004458:	4611      	mov	r1, r2
 800445a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
 8004464:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	f04f 0000 	mov.w	r0, #0
 8004470:	f04f 0100 	mov.w	r1, #0
 8004474:	0159      	lsls	r1, r3, #5
 8004476:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800447a:	0150      	lsls	r0, r2, #5
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4641      	mov	r1, r8
 8004482:	ebb2 0a01 	subs.w	sl, r2, r1
 8004486:	4649      	mov	r1, r9
 8004488:	eb63 0b01 	sbc.w	fp, r3, r1
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004498:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800449c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044a0:	ebb2 040a 	subs.w	r4, r2, sl
 80044a4:	eb63 050b 	sbc.w	r5, r3, fp
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	00eb      	lsls	r3, r5, #3
 80044b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b6:	00e2      	lsls	r2, r4, #3
 80044b8:	4614      	mov	r4, r2
 80044ba:	461d      	mov	r5, r3
 80044bc:	4643      	mov	r3, r8
 80044be:	18e3      	adds	r3, r4, r3
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	464b      	mov	r3, r9
 80044c4:	eb45 0303 	adc.w	r3, r5, r3
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044d6:	4629      	mov	r1, r5
 80044d8:	028b      	lsls	r3, r1, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e0:	4621      	mov	r1, r4
 80044e2:	028a      	lsls	r2, r1, #10
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ea:	2200      	movs	r2, #0
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	61fa      	str	r2, [r7, #28]
 80044f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f4:	f7fc f99e 	bl	8000834 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_GetSysClockFreq+0x200>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	3301      	adds	r3, #1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004510:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800451a:	e002      	b.n	8004522 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetSysClockFreq+0x204>)
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004524:	4618      	mov	r0, r3
 8004526:	3750      	adds	r7, #80	; 0x50
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400
 8004538:	007a1200 	.word	0x007a1200

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000008 	.word	0x20000008

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004558:	f7ff fff0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	0800718c 	.word	0x0800718c

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004580:	f7ff ffdc 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4903      	ldr	r1, [pc, #12]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	0800718c 	.word	0x0800718c

080045a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e07b      	b.n	80046ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d108      	bne.n	80045d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c6:	d009      	beq.n	80045dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	61da      	str	r2, [r3, #28]
 80045ce:	e005      	b.n	80045dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fd fb56 	bl	8001ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004612:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004660:	ea42 0103 	orr.w	r1, r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 0104 	and.w	r1, r3, #4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0210 	and.w	r2, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800469c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b088      	sub	sp, #32
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_SPI_Transmit+0x22>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e126      	b.n	8004926 <HAL_SPI_Transmit+0x270>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046e0:	f7fd fd74 	bl	80021cc <HAL_GetTick>
 80046e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d002      	beq.n	80046fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
 80046f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046fa:	e10b      	b.n	8004914 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_SPI_Transmit+0x52>
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800470c:	e102      	b.n	8004914 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2203      	movs	r2, #3
 8004712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	88fa      	ldrh	r2, [r7, #6]
 800472c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004754:	d10f      	bne.n	8004776 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004764:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004774:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d007      	beq.n	8004794 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004792:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479c:	d14b      	bne.n	8004836 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_SPI_Transmit+0xf6>
 80047a6:	8afb      	ldrh	r3, [r7, #22]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d13e      	bne.n	800482a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	881a      	ldrh	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	1c9a      	adds	r2, r3, #2
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047d0:	e02b      	b.n	800482a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d112      	bne.n	8004806 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	881a      	ldrh	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	1c9a      	adds	r2, r3, #2
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	86da      	strh	r2, [r3, #54]	; 0x36
 8004804:	e011      	b.n	800482a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004806:	f7fd fce1 	bl	80021cc <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d803      	bhi.n	800481e <HAL_SPI_Transmit+0x168>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d102      	bne.n	8004824 <HAL_SPI_Transmit+0x16e>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004828:	e074      	b.n	8004914 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ce      	bne.n	80047d2 <HAL_SPI_Transmit+0x11c>
 8004834:	e04c      	b.n	80048d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <HAL_SPI_Transmit+0x18e>
 800483e:	8afb      	ldrh	r3, [r7, #22]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d140      	bne.n	80048c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	7812      	ldrb	r2, [r2, #0]
 8004850:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800486a:	e02c      	b.n	80048c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d113      	bne.n	80048a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	86da      	strh	r2, [r3, #54]	; 0x36
 80048a0:	e011      	b.n	80048c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a2:	f7fd fc93 	bl	80021cc <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d803      	bhi.n	80048ba <HAL_SPI_Transmit+0x204>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d102      	bne.n	80048c0 <HAL_SPI_Transmit+0x20a>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048c4:	e026      	b.n	8004914 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1cd      	bne.n	800486c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 fbcb 	bl	8005070 <SPI_EndRxTxTransaction>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ee:	2300      	movs	r3, #0
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e000      	b.n	8004914 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004924:	7ffb      	ldrb	r3, [r7, #31]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b088      	sub	sp, #32
 8004932:	af02      	add	r7, sp, #8
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494a:	d112      	bne.n	8004972 <HAL_SPI_Receive+0x44>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10e      	bne.n	8004972 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2204      	movs	r2, #4
 8004958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f8f1 	bl	8004b50 <HAL_SPI_TransmitReceive>
 800496e:	4603      	mov	r3, r0
 8004970:	e0ea      	b.n	8004b48 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_SPI_Receive+0x52>
 800497c:	2302      	movs	r3, #2
 800497e:	e0e3      	b.n	8004b48 <HAL_SPI_Receive+0x21a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004988:	f7fd fc20 	bl	80021cc <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d002      	beq.n	80049a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800499a:	2302      	movs	r3, #2
 800499c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800499e:	e0ca      	b.n	8004b36 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_SPI_Receive+0x7e>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049b0:	e0c1      	b.n	8004b36 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2204      	movs	r2, #4
 80049b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f8:	d10f      	bne.n	8004a1a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d007      	beq.n	8004a38 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d162      	bne.n	8004b06 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a40:	e02e      	b.n	8004aa0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d115      	bne.n	8004a7c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f103 020c 	add.w	r2, r3, #12
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a7a:	e011      	b.n	8004aa0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a7c:	f7fd fba6 	bl	80021cc <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d803      	bhi.n	8004a94 <HAL_SPI_Receive+0x166>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d102      	bne.n	8004a9a <HAL_SPI_Receive+0x16c>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a9e:	e04a      	b.n	8004b36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1cb      	bne.n	8004a42 <HAL_SPI_Receive+0x114>
 8004aaa:	e031      	b.n	8004b10 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d113      	bne.n	8004ae2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ae0:	e011      	b.n	8004b06 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae2:	f7fd fb73 	bl	80021cc <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d803      	bhi.n	8004afa <HAL_SPI_Receive+0x1cc>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d102      	bne.n	8004b00 <HAL_SPI_Receive+0x1d2>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b04:	e017      	b.n	8004b36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1cd      	bne.n	8004aac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	6839      	ldr	r1, [r7, #0]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fa45 	bl	8004fa4 <SPI_EndRxTransaction>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	75fb      	strb	r3, [r7, #23]
 8004b32:	e000      	b.n	8004b36 <HAL_SPI_Receive+0x208>
  }

error :
 8004b34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	; 0x30
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x26>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e18a      	b.n	8004e8c <HAL_SPI_TransmitReceive+0x33c>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b7e:	f7fd fb25 	bl	80021cc <HAL_GetTick>
 8004b82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d00f      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x70>
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba6:	d107      	bne.n	8004bb8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <HAL_SPI_TransmitReceive+0x68>
 8004bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d003      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bbe:	e15b      	b.n	8004e78 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_SPI_TransmitReceive+0x82>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_SPI_TransmitReceive+0x82>
 8004bcc:	887b      	ldrh	r3, [r7, #2]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bd8:	e14e      	b.n	8004e78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d003      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2205      	movs	r2, #5
 8004bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	887a      	ldrh	r2, [r7, #2]
 8004bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	887a      	ldrh	r2, [r7, #2]
 8004c10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	887a      	ldrh	r2, [r7, #2]
 8004c16:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d007      	beq.n	8004c42 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4a:	d178      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_SPI_TransmitReceive+0x10a>
 8004c54:	8b7b      	ldrh	r3, [r7, #26]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d166      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	881a      	ldrh	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	1c9a      	adds	r2, r3, #2
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c7e:	e053      	b.n	8004d28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d11b      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x176>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d016      	beq.n	8004cc6 <HAL_SPI_TransmitReceive+0x176>
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d113      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	881a      	ldrh	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d119      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x1b8>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d014      	beq.n	8004d08 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	1c9a      	adds	r2, r3, #2
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d04:	2301      	movs	r3, #1
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d08:	f7fd fa60 	bl	80021cc <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d807      	bhi.n	8004d28 <HAL_SPI_TransmitReceive+0x1d8>
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d003      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d26:	e0a7      	b.n	8004e78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1a6      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x130>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1a1      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x130>
 8004d3c:	e07c      	b.n	8004e38 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x1fc>
 8004d46:	8b7b      	ldrh	r3, [r7, #26]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d16b      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	7812      	ldrb	r2, [r2, #0]
 8004d58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d72:	e057      	b.n	8004e24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d11c      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x26c>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d017      	beq.n	8004dbc <HAL_SPI_TransmitReceive+0x26c>
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d114      	bne.n	8004dbc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	7812      	ldrb	r2, [r2, #0]
 8004d9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d119      	bne.n	8004dfe <HAL_SPI_TransmitReceive+0x2ae>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d014      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004dfe:	f7fd f9e5 	bl	80021cc <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d803      	bhi.n	8004e16 <HAL_SPI_TransmitReceive+0x2c6>
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d102      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x2cc>
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d103      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e22:	e029      	b.n	8004e78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1a2      	bne.n	8004d74 <HAL_SPI_TransmitReceive+0x224>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d19d      	bne.n	8004d74 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f917 	bl	8005070 <SPI_EndRxTxTransaction>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d006      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e54:	e010      	b.n	8004e78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10b      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	e000      	b.n	8004e78 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004e76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3730      	adds	r7, #48	; 0x30
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ea4:	f7fd f992 	bl	80021cc <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eb4:	f7fd f98a 	bl	80021cc <HAL_GetTick>
 8004eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eba:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	015b      	lsls	r3, r3, #5
 8004ec0:	0d1b      	lsrs	r3, r3, #20
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eca:	e054      	b.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d050      	beq.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ed4:	f7fd f97a 	bl	80021cc <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d902      	bls.n	8004eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d13d      	bne.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f02:	d111      	bne.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0c:	d004      	beq.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f16:	d107      	bne.n	8004f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f30:	d10f      	bne.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e017      	b.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	bf0c      	ite	eq
 8004f86:	2301      	moveq	r3, #1
 8004f88:	2300      	movne	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d19b      	bne.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000008 	.word	0x20000008

08004fa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb8:	d111      	bne.n	8004fde <SPI_EndRxTransaction+0x3a>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc2:	d004      	beq.n	8004fce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fcc:	d107      	bne.n	8004fde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fdc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe6:	d12a      	bne.n	800503e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff0:	d012      	beq.n	8005018 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff ff49 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02d      	beq.n	8005064 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e026      	b.n	8005066 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2200      	movs	r2, #0
 8005020:	2101      	movs	r1, #1
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff ff36 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d01a      	beq.n	8005064 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e013      	b.n	8005066 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2200      	movs	r2, #0
 8005046:	2101      	movs	r1, #1
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff ff23 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d007      	beq.n	8005064 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e000      	b.n	8005066 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800507c:	4b1b      	ldr	r3, [pc, #108]	; (80050ec <SPI_EndRxTxTransaction+0x7c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <SPI_EndRxTxTransaction+0x80>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0d5b      	lsrs	r3, r3, #21
 8005088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800508c:	fb02 f303 	mul.w	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800509a:	d112      	bne.n	80050c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2200      	movs	r2, #0
 80050a4:	2180      	movs	r1, #128	; 0x80
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff fef4 	bl	8004e94 <SPI_WaitFlagStateUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d016      	beq.n	80050e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e00f      	b.n	80050e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d8:	2b80      	cmp	r3, #128	; 0x80
 80050da:	d0f2      	beq.n	80050c2 <SPI_EndRxTxTransaction+0x52>
 80050dc:	e000      	b.n	80050e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80050de:	bf00      	nop
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000008 	.word	0x20000008
 80050f0:	165e9f81 	.word	0x165e9f81

080050f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e041      	b.n	800518a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fc fe0c 	bl	8001d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f000 fa96 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d001      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e04e      	b.n	800524a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a23      	ldr	r2, [pc, #140]	; (8005258 <HAL_TIM_Base_Start_IT+0xc4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d022      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d6:	d01d      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1f      	ldr	r2, [pc, #124]	; (800525c <HAL_TIM_Base_Start_IT+0xc8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d018      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <HAL_TIM_Base_Start_IT+0xcc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <HAL_TIM_Base_Start_IT+0xd0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00e      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <HAL_TIM_Base_Start_IT+0xd4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d009      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a19      	ldr	r2, [pc, #100]	; (800526c <HAL_TIM_Base_Start_IT+0xd8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a18      	ldr	r2, [pc, #96]	; (8005270 <HAL_TIM_Base_Start_IT+0xdc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d111      	bne.n	8005238 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b06      	cmp	r3, #6
 8005224:	d010      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005236:	e007      	b.n	8005248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40010400 	.word	0x40010400
 800526c:	40014000 	.word	0x40014000
 8005270:	40001800 	.word	0x40001800

08005274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b02      	cmp	r3, #2
 8005288:	d122      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b02      	cmp	r3, #2
 8005296:	d11b      	bne.n	80052d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0202 	mvn.w	r2, #2
 80052a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f9b5 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f9a7 	bl	8005612 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f9b8 	bl	800563a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d122      	bne.n	8005324 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d11b      	bne.n	8005324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0204 	mvn.w	r2, #4
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f98b 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f97d 	bl	8005612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f98e 	bl	800563a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b08      	cmp	r3, #8
 8005330:	d122      	bne.n	8005378 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b08      	cmp	r3, #8
 800533e:	d11b      	bne.n	8005378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0208 	mvn.w	r2, #8
 8005348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2204      	movs	r2, #4
 800534e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f961 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
 8005364:	e005      	b.n	8005372 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f953 	bl	8005612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f964 	bl	800563a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b10      	cmp	r3, #16
 8005384:	d122      	bne.n	80053cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b10      	cmp	r3, #16
 8005392:	d11b      	bne.n	80053cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0210 	mvn.w	r2, #16
 800539c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2208      	movs	r2, #8
 80053a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f937 	bl	8005626 <HAL_TIM_IC_CaptureCallback>
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f929 	bl	8005612 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f93a 	bl	800563a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d10e      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d107      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f06f 0201 	mvn.w	r2, #1
 80053f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fc f8ce 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b80      	cmp	r3, #128	; 0x80
 8005404:	d10e      	bne.n	8005424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005410:	2b80      	cmp	r3, #128	; 0x80
 8005412:	d107      	bne.n	8005424 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800541c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fae0 	bl	80059e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	d10e      	bne.n	8005450 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	d107      	bne.n	8005450 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f8ff 	bl	800564e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b20      	cmp	r3, #32
 800545c:	d10e      	bne.n	800547c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b20      	cmp	r3, #32
 800546a:	d107      	bne.n	800547c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0220 	mvn.w	r2, #32
 8005474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 faaa 	bl	80059d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_TIM_ConfigClockSource+0x1c>
 800549c:	2302      	movs	r3, #2
 800549e:	e0b4      	b.n	800560a <HAL_TIM_ConfigClockSource+0x186>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d8:	d03e      	beq.n	8005558 <HAL_TIM_ConfigClockSource+0xd4>
 80054da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054de:	f200 8087 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x16c>
 80054e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e6:	f000 8086 	beq.w	80055f6 <HAL_TIM_ConfigClockSource+0x172>
 80054ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ee:	d87f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x16c>
 80054f0:	2b70      	cmp	r3, #112	; 0x70
 80054f2:	d01a      	beq.n	800552a <HAL_TIM_ConfigClockSource+0xa6>
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d87b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x16c>
 80054f8:	2b60      	cmp	r3, #96	; 0x60
 80054fa:	d050      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x11a>
 80054fc:	2b60      	cmp	r3, #96	; 0x60
 80054fe:	d877      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d03c      	beq.n	800557e <HAL_TIM_ConfigClockSource+0xfa>
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d873      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d058      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x13a>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d86f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005510:	2b30      	cmp	r3, #48	; 0x30
 8005512:	d064      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x15a>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d86b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d060      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x15a>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d867      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05c      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x15a>
 8005524:	2b10      	cmp	r3, #16
 8005526:	d05a      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x15a>
 8005528:	e062      	b.n	80055f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6899      	ldr	r1, [r3, #8]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f000 f9ad 	bl	8005898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800554c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	609a      	str	r2, [r3, #8]
      break;
 8005556:	e04f      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6899      	ldr	r1, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f000 f996 	bl	8005898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557a:	609a      	str	r2, [r3, #8]
      break;
 800557c:	e03c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	f000 f90a 	bl	80057a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2150      	movs	r1, #80	; 0x50
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f963 	bl	8005862 <TIM_ITRx_SetConfig>
      break;
 800559c:	e02c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f000 f929 	bl	8005802 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2160      	movs	r1, #96	; 0x60
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f953 	bl	8005862 <TIM_ITRx_SetConfig>
      break;
 80055bc:	e01c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f000 f8ea 	bl	80057a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2140      	movs	r1, #64	; 0x40
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f943 	bl	8005862 <TIM_ITRx_SetConfig>
      break;
 80055dc:	e00c      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f000 f93a 	bl	8005862 <TIM_ITRx_SetConfig>
      break;
 80055ee:	e003      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      break;
 80055f4:	e000      	b.n	80055f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
	...

08005664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a40      	ldr	r2, [pc, #256]	; (8005778 <TIM_Base_SetConfig+0x114>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d013      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	d00f      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3d      	ldr	r2, [pc, #244]	; (800577c <TIM_Base_SetConfig+0x118>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3c      	ldr	r2, [pc, #240]	; (8005780 <TIM_Base_SetConfig+0x11c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3b      	ldr	r2, [pc, #236]	; (8005784 <TIM_Base_SetConfig+0x120>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3a      	ldr	r2, [pc, #232]	; (8005788 <TIM_Base_SetConfig+0x124>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d108      	bne.n	80056b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2f      	ldr	r2, [pc, #188]	; (8005778 <TIM_Base_SetConfig+0x114>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d027      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2c      	ldr	r2, [pc, #176]	; (800577c <TIM_Base_SetConfig+0x118>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d023      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2b      	ldr	r2, [pc, #172]	; (8005780 <TIM_Base_SetConfig+0x11c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01f      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2a      	ldr	r2, [pc, #168]	; (8005784 <TIM_Base_SetConfig+0x120>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a29      	ldr	r2, [pc, #164]	; (8005788 <TIM_Base_SetConfig+0x124>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d017      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a28      	ldr	r2, [pc, #160]	; (800578c <TIM_Base_SetConfig+0x128>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a27      	ldr	r2, [pc, #156]	; (8005790 <TIM_Base_SetConfig+0x12c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a26      	ldr	r2, [pc, #152]	; (8005794 <TIM_Base_SetConfig+0x130>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a25      	ldr	r2, [pc, #148]	; (8005798 <TIM_Base_SetConfig+0x134>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a24      	ldr	r2, [pc, #144]	; (800579c <TIM_Base_SetConfig+0x138>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a23      	ldr	r2, [pc, #140]	; (80057a0 <TIM_Base_SetConfig+0x13c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d108      	bne.n	8005728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <TIM_Base_SetConfig+0x114>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0xf8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <TIM_Base_SetConfig+0x124>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d103      	bne.n	8005764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	615a      	str	r2, [r3, #20]
}
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40010400 	.word	0x40010400
 800578c:	40014000 	.word	0x40014000
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800
 8005798:	40001800 	.word	0x40001800
 800579c:	40001c00 	.word	0x40001c00
 80057a0:	40002000 	.word	0x40002000

080057a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f023 030a 	bic.w	r3, r3, #10
 80057e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005802:	b480      	push	{r7}
 8005804:	b087      	sub	sp, #28
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f023 0210 	bic.w	r2, r3, #16
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800582c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	031b      	lsls	r3, r3, #12
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800583e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	f043 0307 	orr.w	r3, r3, #7
 8005884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	609a      	str	r2, [r3, #8]
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	021a      	lsls	r2, r3, #8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4313      	orrs	r3, r2
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	609a      	str	r2, [r3, #8]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e05a      	b.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d022      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593c:	d01d      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d018      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1b      	ldr	r2, [pc, #108]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1a      	ldr	r2, [pc, #104]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00e      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d009      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a17      	ldr	r2, [pc, #92]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d004      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a15      	ldr	r2, [pc, #84]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d10c      	bne.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4313      	orrs	r3, r2
 800598a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40001800 	.word	0x40001800

080059d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e03f      	b.n	8005a8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fc f9b0 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2224      	movs	r2, #36	; 0x24
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fd19 	bl	8006474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695a      	ldr	r2, [r3, #20]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d130      	bne.n	8005b0e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_UART_Transmit_IT+0x26>
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e029      	b.n	8005b10 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Transmit_IT+0x38>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e022      	b.n	8005b10 <HAL_UART_Transmit_IT+0x7e>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	88fa      	ldrh	r2, [r7, #6]
 8005adc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	88fa      	ldrh	r2, [r7, #6]
 8005ae2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2221      	movs	r2, #33	; 0x21
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b08:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d11d      	bne.n	8005b72 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_UART_Receive_IT+0x26>
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e016      	b.n	8005b74 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_UART_Receive_IT+0x38>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e00f      	b.n	8005b74 <HAL_UART_Receive_IT+0x58>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	461a      	mov	r2, r3
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 faab 	bl	80060c4 <UART_Start_Receive_IT>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	e000      	b.n	8005b74 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b72:	2302      	movs	r3, #2
  }
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b0ba      	sub	sp, #232	; 0xe8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10f      	bne.n	8005be2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <HAL_UART_IRQHandler+0x66>
 8005bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fb8f 	bl	80062fe <UART_Receive_IT>
      return;
 8005be0:	e256      	b.n	8006090 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 80de 	beq.w	8005da8 <HAL_UART_IRQHandler+0x22c>
 8005bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80d1 	beq.w	8005da8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00b      	beq.n	8005c2a <HAL_UART_IRQHandler+0xae>
 8005c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <HAL_UART_IRQHandler+0xd2>
 8005c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d005      	beq.n	8005c4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0202 	orr.w	r2, r3, #2
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <HAL_UART_IRQHandler+0xf6>
 8005c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	f043 0204 	orr.w	r2, r3, #4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d011      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x126>
 8005c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d105      	bne.n	8005c96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f043 0208 	orr.w	r2, r3, #8
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 81ed 	beq.w	8006086 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_UART_IRQHandler+0x14e>
 8005cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fb1a 	bl	80062fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2301      	moveq	r3, #1
 8005cda:	2300      	movne	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x17a>
 8005cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d04f      	beq.n	8005d96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa22 	bl	8006140 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b40      	cmp	r3, #64	; 0x40
 8005d08:	d141      	bne.n	8005d8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3314      	adds	r3, #20
 8005d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1d9      	bne.n	8005d0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d013      	beq.n	8005d86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	4a7d      	ldr	r2, [pc, #500]	; (8005f58 <HAL_UART_IRQHandler+0x3dc>)
 8005d64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fc fbdf 	bl	800252e <HAL_DMA_Abort_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d80:	4610      	mov	r0, r2
 8005d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d84:	e00e      	b.n	8005da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f986 	bl	8006098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	e00a      	b.n	8005da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f982 	bl	8006098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	e006      	b.n	8005da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f97e 	bl	8006098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005da2:	e170      	b.n	8006086 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	bf00      	nop
    return;
 8005da6:	e16e      	b.n	8006086 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	f040 814a 	bne.w	8006046 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8143 	beq.w	8006046 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 813c 	beq.w	8006046 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	f040 80b4 	bne.w	8005f5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8140 	beq.w	800608a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e12:	429a      	cmp	r2, r3
 8005e14:	f080 8139 	bcs.w	800608a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e2a:	f000 8088 	beq.w	8005f3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1d9      	bne.n	8005e2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3314      	adds	r3, #20
 8005e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e8c:	f023 0301 	bic.w	r3, r3, #1
 8005e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3314      	adds	r3, #20
 8005e9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ea6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e1      	bne.n	8005e7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3314      	adds	r3, #20
 8005ebc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3314      	adds	r3, #20
 8005ed6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005eda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005edc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ee0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e3      	bne.n	8005eb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0e:	f023 0310 	bic.w	r3, r3, #16
 8005f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f20:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e3      	bne.n	8005efc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fc fa88 	bl	800244e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8ac 	bl	80060ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f54:	e099      	b.n	800608a <HAL_UART_IRQHandler+0x50e>
 8005f56:	bf00      	nop
 8005f58:	08006207 	.word	0x08006207
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 808b 	beq.w	800608e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8086 	beq.w	800608e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	330c      	adds	r3, #12
 8005f88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	330c      	adds	r3, #12
 8005fa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fa6:	647a      	str	r2, [r7, #68]	; 0x44
 8005fa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e3      	bne.n	8005f82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3314      	adds	r3, #20
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3314      	adds	r3, #20
 8005fda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fde:	633a      	str	r2, [r7, #48]	; 0x30
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e3      	bne.n	8005fba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	330c      	adds	r3, #12
 8006006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0310 	bic.w	r3, r3, #16
 8006016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	330c      	adds	r3, #12
 8006020:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006024:	61fa      	str	r2, [r7, #28]
 8006026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	69b9      	ldr	r1, [r7, #24]
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	617b      	str	r3, [r7, #20]
   return(result);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e3      	bne.n	8006000 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f834 	bl	80060ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006044:	e023      	b.n	800608e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <HAL_UART_IRQHandler+0x4ea>
 8006052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f8e5 	bl	800622e <UART_Transmit_IT>
    return;
 8006064:	e014      	b.n	8006090 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00e      	beq.n	8006090 <HAL_UART_IRQHandler+0x514>
 8006072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f925 	bl	80062ce <UART_EndTransmit_IT>
    return;
 8006084:	e004      	b.n	8006090 <HAL_UART_IRQHandler+0x514>
    return;
 8006086:	bf00      	nop
 8006088:	e002      	b.n	8006090 <HAL_UART_IRQHandler+0x514>
      return;
 800608a:	bf00      	nop
 800608c:	e000      	b.n	8006090 <HAL_UART_IRQHandler+0x514>
      return;
 800608e:	bf00      	nop
  }
}
 8006090:	37e8      	adds	r7, #232	; 0xe8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop

08006098 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	88fa      	ldrh	r2, [r7, #6]
 80060dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2222      	movs	r2, #34	; 0x22
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006110:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0201 	orr.w	r2, r2, #1
 8006120:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0220 	orr.w	r2, r2, #32
 8006130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b095      	sub	sp, #84	; 0x54
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006168:	643a      	str	r2, [r7, #64]	; 0x40
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800616e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e5      	bne.n	8006148 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3314      	adds	r3, #20
 8006182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	61fb      	str	r3, [r7, #28]
   return(result);
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f023 0301 	bic.w	r3, r3, #1
 8006192:	64bb      	str	r3, [r7, #72]	; 0x48
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3314      	adds	r3, #20
 800619a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800619c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e5      	bne.n	800617c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d119      	bne.n	80061ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f023 0310 	bic.w	r3, r3, #16
 80061ce:	647b      	str	r3, [r7, #68]	; 0x44
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061d8:	61ba      	str	r2, [r7, #24]
 80061da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6979      	ldr	r1, [r7, #20]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	613b      	str	r3, [r7, #16]
   return(result);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061fa:	bf00      	nop
 80061fc:	3754      	adds	r7, #84	; 0x54
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff ff39 	bl	8006098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b21      	cmp	r3, #33	; 0x21
 8006240:	d13e      	bne.n	80062c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624a:	d114      	bne.n	8006276 <UART_Transmit_IT+0x48>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d110      	bne.n	8006276 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006268:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	621a      	str	r2, [r3, #32]
 8006274:	e008      	b.n	8006288 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	1c59      	adds	r1, r3, #1
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6211      	str	r1, [r2, #32]
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29b      	uxth	r3, r3
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4619      	mov	r1, r3
 8006296:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10f      	bne.n	80062bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fb f902 	bl	80014f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b08c      	sub	sp, #48	; 0x30
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b22      	cmp	r3, #34	; 0x22
 8006310:	f040 80ab 	bne.w	800646a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d117      	bne.n	800634e <UART_Receive_IT+0x50>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d113      	bne.n	800634e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633c:	b29a      	uxth	r2, r3
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	; 0x28
 800634c:	e026      	b.n	800639c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006360:	d007      	beq.n	8006372 <UART_Receive_IT+0x74>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <UART_Receive_IT+0x82>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e008      	b.n	8006392 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	4619      	mov	r1, r3
 80063aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d15a      	bne.n	8006466 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0220 	bic.w	r2, r2, #32
 80063be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d135      	bne.n	800645c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	613b      	str	r3, [r7, #16]
   return(result);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f023 0310 	bic.w	r3, r3, #16
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	330c      	adds	r3, #12
 8006414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006416:	623a      	str	r2, [r7, #32]
 8006418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	69f9      	ldr	r1, [r7, #28]
 800641c:	6a3a      	ldr	r2, [r7, #32]
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	61bb      	str	r3, [r7, #24]
   return(result);
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e5      	bne.n	80063f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b10      	cmp	r3, #16
 8006436:	d10a      	bne.n	800644e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fe29 	bl	80060ac <HAL_UARTEx_RxEventCallback>
 800645a:	e002      	b.n	8006462 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7fb f819 	bl	8001494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e002      	b.n	800646c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	e000      	b.n	800646c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800646a:	2302      	movs	r3, #2
  }
}
 800646c:	4618      	mov	r0, r3
 800646e:	3730      	adds	r7, #48	; 0x30
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006478:	b0c0      	sub	sp, #256	; 0x100
 800647a:	af00      	add	r7, sp, #0
 800647c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	68d9      	ldr	r1, [r3, #12]
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	ea40 0301 	orr.w	r3, r0, r1
 800649c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064cc:	f021 010c 	bic.w	r1, r1, #12
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064da:	430b      	orrs	r3, r1
 80064dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ee:	6999      	ldr	r1, [r3, #24]
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	ea40 0301 	orr.w	r3, r0, r1
 80064fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b8f      	ldr	r3, [pc, #572]	; (8006740 <UART_SetConfig+0x2cc>)
 8006504:	429a      	cmp	r2, r3
 8006506:	d005      	beq.n	8006514 <UART_SetConfig+0xa0>
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b8d      	ldr	r3, [pc, #564]	; (8006744 <UART_SetConfig+0x2d0>)
 8006510:	429a      	cmp	r2, r3
 8006512:	d104      	bne.n	800651e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006514:	f7fe f832 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8006518:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800651c:	e003      	b.n	8006526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800651e:	f7fe f819 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8006522:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006530:	f040 810c 	bne.w	800674c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006538:	2200      	movs	r2, #0
 800653a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800653e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006546:	4622      	mov	r2, r4
 8006548:	462b      	mov	r3, r5
 800654a:	1891      	adds	r1, r2, r2
 800654c:	65b9      	str	r1, [r7, #88]	; 0x58
 800654e:	415b      	adcs	r3, r3
 8006550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006556:	4621      	mov	r1, r4
 8006558:	eb12 0801 	adds.w	r8, r2, r1
 800655c:	4629      	mov	r1, r5
 800655e:	eb43 0901 	adc.w	r9, r3, r1
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800656e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006576:	4690      	mov	r8, r2
 8006578:	4699      	mov	r9, r3
 800657a:	4623      	mov	r3, r4
 800657c:	eb18 0303 	adds.w	r3, r8, r3
 8006580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006584:	462b      	mov	r3, r5
 8006586:	eb49 0303 	adc.w	r3, r9, r3
 800658a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800659a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800659e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065a2:	460b      	mov	r3, r1
 80065a4:	18db      	adds	r3, r3, r3
 80065a6:	653b      	str	r3, [r7, #80]	; 0x50
 80065a8:	4613      	mov	r3, r2
 80065aa:	eb42 0303 	adc.w	r3, r2, r3
 80065ae:	657b      	str	r3, [r7, #84]	; 0x54
 80065b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065b8:	f7fa f93c 	bl	8000834 <__aeabi_uldivmod>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4b61      	ldr	r3, [pc, #388]	; (8006748 <UART_SetConfig+0x2d4>)
 80065c2:	fba3 2302 	umull	r2, r3, r3, r2
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	011c      	lsls	r4, r3, #4
 80065ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065dc:	4642      	mov	r2, r8
 80065de:	464b      	mov	r3, r9
 80065e0:	1891      	adds	r1, r2, r2
 80065e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80065e4:	415b      	adcs	r3, r3
 80065e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065ec:	4641      	mov	r1, r8
 80065ee:	eb12 0a01 	adds.w	sl, r2, r1
 80065f2:	4649      	mov	r1, r9
 80065f4:	eb43 0b01 	adc.w	fp, r3, r1
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800660c:	4692      	mov	sl, r2
 800660e:	469b      	mov	fp, r3
 8006610:	4643      	mov	r3, r8
 8006612:	eb1a 0303 	adds.w	r3, sl, r3
 8006616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800661a:	464b      	mov	r3, r9
 800661c:	eb4b 0303 	adc.w	r3, fp, r3
 8006620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006630:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006638:	460b      	mov	r3, r1
 800663a:	18db      	adds	r3, r3, r3
 800663c:	643b      	str	r3, [r7, #64]	; 0x40
 800663e:	4613      	mov	r3, r2
 8006640:	eb42 0303 	adc.w	r3, r2, r3
 8006644:	647b      	str	r3, [r7, #68]	; 0x44
 8006646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800664a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800664e:	f7fa f8f1 	bl	8000834 <__aeabi_uldivmod>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4611      	mov	r1, r2
 8006658:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <UART_SetConfig+0x2d4>)
 800665a:	fba3 2301 	umull	r2, r3, r3, r1
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	2264      	movs	r2, #100	; 0x64
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	1acb      	subs	r3, r1, r3
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <UART_SetConfig+0x2d4>)
 8006670:	fba3 2302 	umull	r2, r3, r3, r2
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800667c:	441c      	add	r4, r3
 800667e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006682:	2200      	movs	r2, #0
 8006684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006688:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800668c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	1891      	adds	r1, r2, r2
 8006696:	63b9      	str	r1, [r7, #56]	; 0x38
 8006698:	415b      	adcs	r3, r3
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800669c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066a0:	4641      	mov	r1, r8
 80066a2:	1851      	adds	r1, r2, r1
 80066a4:	6339      	str	r1, [r7, #48]	; 0x30
 80066a6:	4649      	mov	r1, r9
 80066a8:	414b      	adcs	r3, r1
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066b8:	4659      	mov	r1, fp
 80066ba:	00cb      	lsls	r3, r1, #3
 80066bc:	4651      	mov	r1, sl
 80066be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066c2:	4651      	mov	r1, sl
 80066c4:	00ca      	lsls	r2, r1, #3
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	4642      	mov	r2, r8
 80066ce:	189b      	adds	r3, r3, r2
 80066d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066d4:	464b      	mov	r3, r9
 80066d6:	460a      	mov	r2, r1
 80066d8:	eb42 0303 	adc.w	r3, r2, r3
 80066dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066f4:	460b      	mov	r3, r1
 80066f6:	18db      	adds	r3, r3, r3
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fa:	4613      	mov	r3, r2
 80066fc:	eb42 0303 	adc.w	r3, r2, r3
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800670a:	f7fa f893 	bl	8000834 <__aeabi_uldivmod>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <UART_SetConfig+0x2d4>)
 8006714:	fba3 1302 	umull	r1, r3, r3, r2
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	2164      	movs	r1, #100	; 0x64
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	3332      	adds	r3, #50	; 0x32
 8006726:	4a08      	ldr	r2, [pc, #32]	; (8006748 <UART_SetConfig+0x2d4>)
 8006728:	fba2 2303 	umull	r2, r3, r2, r3
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	f003 0207 	and.w	r2, r3, #7
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4422      	add	r2, r4
 800673a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800673c:	e105      	b.n	800694a <UART_SetConfig+0x4d6>
 800673e:	bf00      	nop
 8006740:	40011000 	.word	0x40011000
 8006744:	40011400 	.word	0x40011400
 8006748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800674c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006750:	2200      	movs	r2, #0
 8006752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006756:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800675a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800675e:	4642      	mov	r2, r8
 8006760:	464b      	mov	r3, r9
 8006762:	1891      	adds	r1, r2, r2
 8006764:	6239      	str	r1, [r7, #32]
 8006766:	415b      	adcs	r3, r3
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
 800676a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800676e:	4641      	mov	r1, r8
 8006770:	1854      	adds	r4, r2, r1
 8006772:	4649      	mov	r1, r9
 8006774:	eb43 0501 	adc.w	r5, r3, r1
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	00eb      	lsls	r3, r5, #3
 8006782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006786:	00e2      	lsls	r2, r4, #3
 8006788:	4614      	mov	r4, r2
 800678a:	461d      	mov	r5, r3
 800678c:	4643      	mov	r3, r8
 800678e:	18e3      	adds	r3, r4, r3
 8006790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006794:	464b      	mov	r3, r9
 8006796:	eb45 0303 	adc.w	r3, r5, r3
 800679a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800679e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067ae:	f04f 0200 	mov.w	r2, #0
 80067b2:	f04f 0300 	mov.w	r3, #0
 80067b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067ba:	4629      	mov	r1, r5
 80067bc:	008b      	lsls	r3, r1, #2
 80067be:	4621      	mov	r1, r4
 80067c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067c4:	4621      	mov	r1, r4
 80067c6:	008a      	lsls	r2, r1, #2
 80067c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067cc:	f7fa f832 	bl	8000834 <__aeabi_uldivmod>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4b60      	ldr	r3, [pc, #384]	; (8006958 <UART_SetConfig+0x4e4>)
 80067d6:	fba3 2302 	umull	r2, r3, r3, r2
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	011c      	lsls	r4, r3, #4
 80067de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067f0:	4642      	mov	r2, r8
 80067f2:	464b      	mov	r3, r9
 80067f4:	1891      	adds	r1, r2, r2
 80067f6:	61b9      	str	r1, [r7, #24]
 80067f8:	415b      	adcs	r3, r3
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006800:	4641      	mov	r1, r8
 8006802:	1851      	adds	r1, r2, r1
 8006804:	6139      	str	r1, [r7, #16]
 8006806:	4649      	mov	r1, r9
 8006808:	414b      	adcs	r3, r1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006818:	4659      	mov	r1, fp
 800681a:	00cb      	lsls	r3, r1, #3
 800681c:	4651      	mov	r1, sl
 800681e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006822:	4651      	mov	r1, sl
 8006824:	00ca      	lsls	r2, r1, #3
 8006826:	4610      	mov	r0, r2
 8006828:	4619      	mov	r1, r3
 800682a:	4603      	mov	r3, r0
 800682c:	4642      	mov	r2, r8
 800682e:	189b      	adds	r3, r3, r2
 8006830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006834:	464b      	mov	r3, r9
 8006836:	460a      	mov	r2, r1
 8006838:	eb42 0303 	adc.w	r3, r2, r3
 800683c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	67bb      	str	r3, [r7, #120]	; 0x78
 800684a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006858:	4649      	mov	r1, r9
 800685a:	008b      	lsls	r3, r1, #2
 800685c:	4641      	mov	r1, r8
 800685e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006862:	4641      	mov	r1, r8
 8006864:	008a      	lsls	r2, r1, #2
 8006866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800686a:	f7f9 ffe3 	bl	8000834 <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4b39      	ldr	r3, [pc, #228]	; (8006958 <UART_SetConfig+0x4e4>)
 8006874:	fba3 1302 	umull	r1, r3, r3, r2
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	2164      	movs	r1, #100	; 0x64
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	3332      	adds	r3, #50	; 0x32
 8006886:	4a34      	ldr	r2, [pc, #208]	; (8006958 <UART_SetConfig+0x4e4>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006892:	441c      	add	r4, r3
 8006894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006898:	2200      	movs	r2, #0
 800689a:	673b      	str	r3, [r7, #112]	; 0x70
 800689c:	677a      	str	r2, [r7, #116]	; 0x74
 800689e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068a2:	4642      	mov	r2, r8
 80068a4:	464b      	mov	r3, r9
 80068a6:	1891      	adds	r1, r2, r2
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	415b      	adcs	r3, r3
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068b2:	4641      	mov	r1, r8
 80068b4:	1851      	adds	r1, r2, r1
 80068b6:	6039      	str	r1, [r7, #0]
 80068b8:	4649      	mov	r1, r9
 80068ba:	414b      	adcs	r3, r1
 80068bc:	607b      	str	r3, [r7, #4]
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068ca:	4659      	mov	r1, fp
 80068cc:	00cb      	lsls	r3, r1, #3
 80068ce:	4651      	mov	r1, sl
 80068d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068d4:	4651      	mov	r1, sl
 80068d6:	00ca      	lsls	r2, r1, #3
 80068d8:	4610      	mov	r0, r2
 80068da:	4619      	mov	r1, r3
 80068dc:	4603      	mov	r3, r0
 80068de:	4642      	mov	r2, r8
 80068e0:	189b      	adds	r3, r3, r2
 80068e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80068e4:	464b      	mov	r3, r9
 80068e6:	460a      	mov	r2, r1
 80068e8:	eb42 0303 	adc.w	r3, r2, r3
 80068ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	663b      	str	r3, [r7, #96]	; 0x60
 80068f8:	667a      	str	r2, [r7, #100]	; 0x64
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006906:	4649      	mov	r1, r9
 8006908:	008b      	lsls	r3, r1, #2
 800690a:	4641      	mov	r1, r8
 800690c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006910:	4641      	mov	r1, r8
 8006912:	008a      	lsls	r2, r1, #2
 8006914:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006918:	f7f9 ff8c 	bl	8000834 <__aeabi_uldivmod>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <UART_SetConfig+0x4e4>)
 8006922:	fba3 1302 	umull	r1, r3, r3, r2
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	2164      	movs	r1, #100	; 0x64
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	3332      	adds	r3, #50	; 0x32
 8006934:	4a08      	ldr	r2, [pc, #32]	; (8006958 <UART_SetConfig+0x4e4>)
 8006936:	fba2 2303 	umull	r2, r3, r2, r3
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	f003 020f 	and.w	r2, r3, #15
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4422      	add	r2, r4
 8006948:	609a      	str	r2, [r3, #8]
}
 800694a:	bf00      	nop
 800694c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006950:	46bd      	mov	sp, r7
 8006952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006956:	bf00      	nop
 8006958:	51eb851f 	.word	0x51eb851f

0800695c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800695c:	b084      	sub	sp, #16
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	f107 001c 	add.w	r0, r7, #28
 800696a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	2b01      	cmp	r3, #1
 8006972:	d122      	bne.n	80069ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d105      	bne.n	80069ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f970 	bl	8006c94 <USB_CoreReset>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
 80069b8:	e01a      	b.n	80069f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f964 	bl	8006c94 <USB_CoreReset>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38
 80069e2:	e005      	b.n	80069f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d10b      	bne.n	8006a0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f043 0206 	orr.w	r2, r3, #6
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f043 0220 	orr.w	r2, r3, #32
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a1a:	b004      	add	sp, #16
 8006a1c:	4770      	bx	lr

08006a1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f023 0201 	bic.w	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d115      	bne.n	8006a8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a6e:	2001      	movs	r0, #1
 8006a70:	f7fb fbb8 	bl	80021e4 <HAL_Delay>
      ms++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f8fb 	bl	8006c76 <USB_GetMode>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d01e      	beq.n	8006ac4 <USB_SetCurrentMode+0x84>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b31      	cmp	r3, #49	; 0x31
 8006a8a:	d9f0      	bls.n	8006a6e <USB_SetCurrentMode+0x2e>
 8006a8c:	e01a      	b.n	8006ac4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d115      	bne.n	8006ac0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	f7fb fb9f 	bl	80021e4 <HAL_Delay>
      ms++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f8e2 	bl	8006c76 <USB_GetMode>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <USB_SetCurrentMode+0x84>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b31      	cmp	r3, #49	; 0x31
 8006abc:	d9f0      	bls.n	8006aa0 <USB_SetCurrentMode+0x60>
 8006abe:	e001      	b.n	8006ac4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e005      	b.n	8006ad0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b32      	cmp	r3, #50	; 0x32
 8006ac8:	d101      	bne.n	8006ace <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a13      	ldr	r2, [pc, #76]	; (8006b3c <USB_FlushTxFifo+0x64>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d901      	bls.n	8006af8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e01b      	b.n	8006b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	daf2      	bge.n	8006ae6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	019b      	lsls	r3, r3, #6
 8006b08:	f043 0220 	orr.w	r2, r3, #32
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3301      	adds	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <USB_FlushTxFifo+0x64>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e006      	b.n	8006b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0320 	and.w	r3, r3, #32
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d0f0      	beq.n	8006b10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	00030d40 	.word	0x00030d40

08006b40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a11      	ldr	r2, [pc, #68]	; (8006b9c <USB_FlushRxFifo+0x5c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e018      	b.n	8006b90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	daf2      	bge.n	8006b4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2210      	movs	r2, #16
 8006b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <USB_FlushRxFifo+0x5c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e006      	b.n	8006b90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d0f0      	beq.n	8006b70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	00030d40 	.word	0x00030d40

08006ba0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b08b      	sub	sp, #44	; 0x2c
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4613      	mov	r3, r2
 8006bac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006bb6:	88fb      	ldrh	r3, [r7, #6]
 8006bb8:	089b      	lsrs	r3, r3, #2
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	e014      	b.n	8006bf6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	3301      	adds	r3, #1
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	3301      	adds	r3, #1
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	3301      	adds	r3, #1
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	3301      	adds	r3, #1
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	623b      	str	r3, [r7, #32]
 8006bf6:	6a3a      	ldr	r2, [r7, #32]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d3e6      	bcc.n	8006bcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bfe:	8bfb      	ldrh	r3, [r7, #30]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01e      	beq.n	8006c42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f107 0310 	add.w	r3, r7, #16
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	701a      	strb	r2, [r3, #0]
      i++;
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	3301      	adds	r3, #1
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c36:	8bfb      	ldrh	r3, [r7, #30]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c3c:	8bfb      	ldrh	r3, [r7, #30]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1ea      	bne.n	8006c18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	372c      	adds	r7, #44	; 0x2c
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4013      	ands	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c68:	68fb      	ldr	r3, [r7, #12]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f003 0301 	and.w	r3, r3, #1
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <USB_CoreReset+0x64>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d901      	bls.n	8006cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e01b      	b.n	8006cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	daf2      	bge.n	8006ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f043 0201 	orr.w	r2, r3, #1
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4a09      	ldr	r2, [pc, #36]	; (8006cf8 <USB_CoreReset+0x64>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d901      	bls.n	8006cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e006      	b.n	8006cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d0f0      	beq.n	8006cca <USB_CoreReset+0x36>

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	00030d40 	.word	0x00030d40

08006cfc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b086      	sub	sp, #24
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d32:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d018      	beq.n	8006d84 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d10a      	bne.n	8006d6e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d66:	f043 0304 	orr.w	r3, r3, #4
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	e014      	b.n	8006d98 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d7c:	f023 0304 	bic.w	r3, r3, #4
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	e009      	b.n	8006d98 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d92:	f023 0304 	bic.w	r3, r3, #4
 8006d96:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d98:	2110      	movs	r1, #16
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fe9c 	bl	8006ad8 <USB_FlushTxFifo>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fec8 	bl	8006b40 <USB_FlushRxFifo>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006dba:	2300      	movs	r3, #0
 8006dbc:	613b      	str	r3, [r7, #16]
 8006dbe:	e015      	b.n	8006dec <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de0:	461a      	mov	r2, r3
 8006de2:	2300      	movs	r3, #0
 8006de4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	3301      	adds	r3, #1
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d3e5      	bcc.n	8006dc0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006e00:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00b      	beq.n	8006e26 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e14:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <USB_HostInit+0x16c>)
 8006e1a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a13      	ldr	r2, [pc, #76]	; (8006e6c <USB_HostInit+0x170>)
 8006e20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006e24:	e009      	b.n	8006e3a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2280      	movs	r2, #128	; 0x80
 8006e2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <USB_HostInit+0x174>)
 8006e30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a0f      	ldr	r2, [pc, #60]	; (8006e74 <USB_HostInit+0x178>)
 8006e36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	f043 0210 	orr.w	r2, r3, #16
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699a      	ldr	r2, [r3, #24]
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <USB_HostInit+0x17c>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e64:	b004      	add	sp, #16
 8006e66:	4770      	bx	lr
 8006e68:	01000200 	.word	0x01000200
 8006e6c:	00e00300 	.word	0x00e00300
 8006e70:	00600080 	.word	0x00600080
 8006e74:	004000e0 	.word	0x004000e0
 8006e78:	a3200008 	.word	0xa3200008

08006e7c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d107      	bne.n	8006ece <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006eca:	6053      	str	r3, [r2, #4]
 8006ecc:	e009      	b.n	8006ee2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006ece:	78fb      	ldrb	r3, [r7, #3]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d106      	bne.n	8006ee2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eda:	461a      	mov	r2, r3
 8006edc:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ee0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	b29b      	uxth	r3, r3
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b089      	sub	sp, #36	; 0x24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f22:	78fb      	ldrb	r3, [r7, #3]
 8006f24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	0c9b      	lsrs	r3, r3, #18
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	0fdb      	lsrs	r3, r3, #31
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d104      	bne.n	8006f6c <USB_HC_Halt+0x5a>
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e0c8      	b.n	80070fe <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <USB_HC_Halt+0x66>
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d163      	bne.n	8007040 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 80ab 	bne.w	80070fc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d133      	bne.n	800701a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fd0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ff0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ffe:	d81d      	bhi.n	800703c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	4413      	add	r3, r2
 8007008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007016:	d0ec      	beq.n	8006ff2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007018:	e070      	b.n	80070fc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	4413      	add	r3, r2
 8007022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	0151      	lsls	r1, r2, #5
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	440a      	add	r2, r1
 8007030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007038:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800703a:	e05f      	b.n	80070fc <USB_HC_Halt+0x1ea>
            break;
 800703c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800703e:	e05d      	b.n	80070fc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	4413      	add	r3, r2
 8007048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	440a      	add	r2, r1
 8007056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800705a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800705e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d133      	bne.n	80070d8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	440a      	add	r2, r1
 8007086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800708a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800708e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070ae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3301      	adds	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070bc:	d81d      	bhi.n	80070fa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d4:	d0ec      	beq.n	80070b0 <USB_HC_Halt+0x19e>
 80070d6:	e011      	b.n	80070fc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	e000      	b.n	80070fc <USB_HC_Halt+0x1ea>
          break;
 80070fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3724      	adds	r7, #36	; 0x24
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
	...

0800710c <__libc_init_array>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	4d0d      	ldr	r5, [pc, #52]	; (8007144 <__libc_init_array+0x38>)
 8007110:	4c0d      	ldr	r4, [pc, #52]	; (8007148 <__libc_init_array+0x3c>)
 8007112:	1b64      	subs	r4, r4, r5
 8007114:	10a4      	asrs	r4, r4, #2
 8007116:	2600      	movs	r6, #0
 8007118:	42a6      	cmp	r6, r4
 800711a:	d109      	bne.n	8007130 <__libc_init_array+0x24>
 800711c:	4d0b      	ldr	r5, [pc, #44]	; (800714c <__libc_init_array+0x40>)
 800711e:	4c0c      	ldr	r4, [pc, #48]	; (8007150 <__libc_init_array+0x44>)
 8007120:	f000 f820 	bl	8007164 <_init>
 8007124:	1b64      	subs	r4, r4, r5
 8007126:	10a4      	asrs	r4, r4, #2
 8007128:	2600      	movs	r6, #0
 800712a:	42a6      	cmp	r6, r4
 800712c:	d105      	bne.n	800713a <__libc_init_array+0x2e>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	f855 3b04 	ldr.w	r3, [r5], #4
 8007134:	4798      	blx	r3
 8007136:	3601      	adds	r6, #1
 8007138:	e7ee      	b.n	8007118 <__libc_init_array+0xc>
 800713a:	f855 3b04 	ldr.w	r3, [r5], #4
 800713e:	4798      	blx	r3
 8007140:	3601      	adds	r6, #1
 8007142:	e7f2      	b.n	800712a <__libc_init_array+0x1e>
 8007144:	0800719c 	.word	0x0800719c
 8007148:	0800719c 	.word	0x0800719c
 800714c:	0800719c 	.word	0x0800719c
 8007150:	080071a0 	.word	0x080071a0

08007154 <memset>:
 8007154:	4402      	add	r2, r0
 8007156:	4603      	mov	r3, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <_init>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr

08007170 <_fini>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	bf00      	nop
 8007174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007176:	bc08      	pop	{r3}
 8007178:	469e      	mov	lr, r3
 800717a:	4770      	bx	lr
