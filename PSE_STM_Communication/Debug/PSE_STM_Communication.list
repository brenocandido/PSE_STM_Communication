
PSE_STM_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fcc  08004fcc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd4  08004fd4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000065c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000670  20000670  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eccc  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b8  00000000  00000000  0002ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b48  00000000  00000000  000319c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b23  00000000  00000000  00032510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd39  00000000  00000000  00053033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c57e2  00000000  00000000  00060d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012654e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000323c  00000000  00000000  001265a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f9c 	.word	0x08004f9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004f9c 	.word	0x08004f9c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <bufHandler_init>:
#include <string.h>

static void _increaseBufIndex(int *pIndex, const int BUF_SIZE);

void bufHandler_init(BufHandler_t *pHandler, MsgBuffer_t *msgBuf, size_t bufSize)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
    if (!pHandler || !msgBuf || bufSize <= 0)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d027      	beq.n	800052e <bufHandler_init+0x62>
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d024      	beq.n	800052e <bufHandler_init+0x62>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d021      	beq.n	800052e <bufHandler_init+0x62>
    {
        return;
    }

    pHandler->msgBuf = msgBuf;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	601a      	str	r2, [r3, #0]
    memset((void *)pHandler->msgBuf, 0, sizeof(MsgBuffer_t) * bufSize);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6818      	ldr	r0, [r3, #0]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	461a      	mov	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f004 fd42 	bl	8004f8c <memset>

    pHandler->bufRcvIndex = 0;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
    pHandler->bufSendIndex = 0;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]

    pHandler->pRxUart = NULL;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
    pHandler->pTxUart = NULL;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]

    pHandler->txAvailable = true;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2201      	movs	r2, #1
 8000524:	751a      	strb	r2, [r3, #20]

    pHandler->BUF_SIZE = bufSize;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	619a      	str	r2, [r3, #24]
 800052c:	e000      	b.n	8000530 <bufHandler_init+0x64>
        return;
 800052e:	bf00      	nop
}
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <bufHandler_setUart>:

void bufHandler_setUart(BufHandler_t *pHandler, UART_HandleTypeDef *pTxUart, UART_HandleTypeDef *pRxUart)
{
 8000536:	b480      	push	{r7}
 8000538:	b085      	sub	sp, #20
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
    if (!pHandler || !pTxUart || !pRxUart)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00c      	beq.n	8000562 <bufHandler_setUart+0x2c>
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d009      	beq.n	8000562 <bufHandler_setUart+0x2c>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d006      	beq.n	8000562 <bufHandler_setUart+0x2c>
    {
        return;
    }

    pHandler->pRxUart = pRxUart;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	611a      	str	r2, [r3, #16]
    pHandler->pTxUart = pTxUart;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	e000      	b.n	8000564 <bufHandler_setUart+0x2e>
        return;
 8000562:	bf00      	nop
}
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <bufHandler_checkEmpty>:

bool bufHandler_checkEmpty(BufHandler_t *pHandler)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d101      	bne.n	8000580 <bufHandler_checkEmpty+0x12>
    {
        return true;
 800057c:	2301      	movs	r3, #1
 800057e:	e008      	b.n	8000592 <bufHandler_checkEmpty+0x24>
    }

    return pHandler->bufSendIndex == pHandler->bufRcvIndex;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	bf0c      	ite	eq
 800058c:	2301      	moveq	r3, #1
 800058e:	2300      	movne	r3, #0
 8000590:	b2db      	uxtb	r3, r3
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <bufHandler_sendData>:

bool bufHandler_sendData(BufHandler_t *pHandler, MsgBuffer_t data)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	6039      	str	r1, [r7, #0]
    if (!pHandler)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <bufHandler_sendData+0x14>
    {
        return false;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e013      	b.n	80005da <bufHandler_sendData+0x3c>
    }

    if (!pHandler->txAvailable)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7d1b      	ldrb	r3, [r3, #20]
 80005b6:	f083 0301 	eor.w	r3, r3, #1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <bufHandler_sendData+0x26>
    {
        return false;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e00a      	b.n	80005da <bufHandler_sendData+0x3c>
    }

    pHandler->txAvailable = false;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	751a      	strb	r2, [r3, #20]

    HAL_UART_Transmit_IT(pHandler->pTxUart, (uint8_t *)data, MSG_TOTAL_BYTES);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	220d      	movs	r2, #13
 80005d0:	6839      	ldr	r1, [r7, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f978 	bl	80038c8 <HAL_UART_Transmit_IT>

    return true;
 80005d8:	2301      	movs	r3, #1
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <bufHandler_getReceivedData>:

const uint8_t *bufHandler_getReceivedData(BufHandler_t *pHandler)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
    if (!pHandler || !pHandler->msgBuf)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d003      	beq.n	80005f8 <bufHandler_getReceivedData+0x16>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <bufHandler_getReceivedData+0x1a>
    {
        return NULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e00a      	b.n	8000612 <bufHandler_getReceivedData+0x30>
    }

    return pHandler->msgBuf[pHandler->bufRcvIndex];
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6819      	ldr	r1, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	461a      	mov	r2, r3
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	440b      	add	r3, r1
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <bufHandler_increaseRcvIndex>:

void bufHandler_increaseRcvIndex(BufHandler_t *pHandler)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d008      	beq.n	800063e <bufHandler_increaseRcvIndex+0x20>
    {
        return;
    }

    _increaseBufIndex(&pHandler->bufRcvIndex, pHandler->BUF_SIZE);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1d1a      	adds	r2, r3, #4
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4619      	mov	r1, r3
 8000636:	4610      	mov	r0, r2
 8000638:	f000 f8a5 	bl	8000786 <_increaseBufIndex>
 800063c:	e000      	b.n	8000640 <bufHandler_increaseRcvIndex+0x22>
        return;
 800063e:	bf00      	nop
}
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <bufHandler_increaseSendIndex>:

void bufHandler_increaseSendIndex(BufHandler_t *pHandler)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d009      	beq.n	8000668 <bufHandler_increaseSendIndex+0x22>
    {
        return;
    }

    _increaseBufIndex(&pHandler->bufSendIndex, pHandler->BUF_SIZE);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f103 0208 	add.w	r2, r3, #8
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	4619      	mov	r1, r3
 8000660:	4610      	mov	r0, r2
 8000662:	f000 f890 	bl	8000786 <_increaseBufIndex>
 8000666:	e000      	b.n	800066a <bufHandler_increaseSendIndex+0x24>
        return;
 8000668:	bf00      	nop
}
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <bufHandler_transmitUartData>:

bool bufHandler_transmitUartData(BufHandler_t *pHandler)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    if (!pHandler || !pHandler->pTxUart || !pHandler->msgBuf)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d007      	beq.n	800068e <bufHandler_transmitUartData+0x1e>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d003      	beq.n	800068e <bufHandler_transmitUartData+0x1e>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <bufHandler_transmitUartData+0x22>
    {
        return false;
 800068e:	2300      	movs	r3, #0
 8000690:	e01d      	b.n	80006ce <bufHandler_transmitUartData+0x5e>
    }

    if (!pHandler->txAvailable)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7d1b      	ldrb	r3, [r3, #20]
 8000696:	f083 0301 	eor.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <bufHandler_transmitUartData+0x34>
    {
        return false;
 80006a0:	2300      	movs	r3, #0
 80006a2:	e014      	b.n	80006ce <bufHandler_transmitUartData+0x5e>
    }

    pHandler->txAvailable = false;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	751a      	strb	r2, [r3, #20]

    HAL_UART_Transmit_IT(pHandler->pTxUart, (uint8_t *)&pHandler->msgBuf[pHandler->bufSendIndex], MSG_TOTAL_BYTES);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	68d8      	ldr	r0, [r3, #12]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4613      	mov	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	220d      	movs	r2, #13
 80006c6:	4619      	mov	r1, r3
 80006c8:	f003 f8fe 	bl	80038c8 <HAL_UART_Transmit_IT>

    return true;
 80006cc:	2301      	movs	r3, #1
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <bufHandler_receiveUartData>:

void bufHandler_receiveUartData(BufHandler_t *pHandler)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
    if (!pHandler || !pHandler->pRxUart || !pHandler->msgBuf)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d019      	beq.n	8000718 <bufHandler_receiveUartData+0x42>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d015      	beq.n	8000718 <bufHandler_receiveUartData+0x42>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d011      	beq.n	8000718 <bufHandler_receiveUartData+0x42>
    {
        return;
    }

	HAL_UART_Receive_IT(pHandler->pRxUart, (uint8_t *)&pHandler->msgBuf[pHandler->bufRcvIndex], MSG_TOTAL_BYTES);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6918      	ldr	r0, [r3, #16]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6819      	ldr	r1, [r3, #0]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	461a      	mov	r2, r3
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	440b      	add	r3, r1
 800070e:	220d      	movs	r2, #13
 8000710:	4619      	mov	r1, r3
 8000712:	f003 f91e 	bl	8003952 <HAL_UART_Receive_IT>
 8000716:	e000      	b.n	800071a <bufHandler_receiveUartData+0x44>
        return;
 8000718:	bf00      	nop
}
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <bufHandler_setTxAvailable>:

void bufHandler_setTxAvailable(BufHandler_t *pHandler)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <bufHandler_setTxAvailable+0x16>
    {
        return;
    }

    pHandler->txAvailable = true;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	751a      	strb	r2, [r3, #20]
 8000734:	e000      	b.n	8000738 <bufHandler_setTxAvailable+0x18>
        return;
 8000736:	bf00      	nop
}
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <bufHandler_txUart>:

UART_HandleTypeDef *bufHandler_txUart(BufHandler_t *pHandler)
{
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <bufHandler_txUart+0x12>
    {
        return NULL;
 8000750:	2300      	movs	r3, #0
 8000752:	e001      	b.n	8000758 <bufHandler_txUart+0x16>
    }

    return pHandler->pTxUart;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <bufHandler_rxUart>:

UART_HandleTypeDef *bufHandler_rxUart(BufHandler_t *pHandler)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
    if (!pHandler)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <bufHandler_rxUart+0x12>
    {
        return NULL;
 8000772:	2300      	movs	r3, #0
 8000774:	e001      	b.n	800077a <bufHandler_rxUart+0x16>
    }

    return pHandler->pRxUart;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	691b      	ldr	r3, [r3, #16]
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <_increaseBufIndex>:

static void _increaseBufIndex(int *pIndex, const int BUF_SIZE)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	6039      	str	r1, [r7, #0]
	(*pIndex)++;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
	if (*pIndex >= BUF_SIZE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dc02      	bgt.n	80007aa <_increaseBufIndex+0x24>
	{
		*pIndex = 0;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
	}
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <dummyTestFunc>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For signaling reception reception
static void dummyTestFunc()
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
    const uint32_t LED_ON = LD3_Pin << 16;
 80007be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007c2:	60fb      	str	r3, [r7, #12]
	const uint32_t LED_OFF = LD3_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	60bb      	str	r3, [r7, #8]
	const uint32_t CNT_MAX = 250;
 80007ca:	23fa      	movs	r3, #250	; 0xfa
 80007cc:	607b      	str	r3, [r7, #4]

	static uint32_t cnt = 0;
	static uint8_t ledState = 0;

    cnt++;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <dummyTestFunc+0x68>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a12      	ldr	r2, [pc, #72]	; (8000820 <dummyTestFunc+0x68>)
 80007d6:	6013      	str	r3, [r2, #0]
    if (cnt >= CNT_MAX)
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <dummyTestFunc+0x68>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d817      	bhi.n	8000812 <dummyTestFunc+0x5a>
    {
        cnt = 0;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <dummyTestFunc+0x68>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
        ledState = !ledState;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <dummyTestFunc+0x6c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf0c      	ite	eq
 80007f0:	2301      	moveq	r3, #1
 80007f2:	2300      	movne	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <dummyTestFunc+0x6c>)
 80007fa:	701a      	strb	r2, [r3, #0]

        if (ledState)
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <dummyTestFunc+0x6c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d003      	beq.n	800080c <dummyTestFunc+0x54>
        {
            LD3_GPIO_Port->BSRR = LED_ON;
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <dummyTestFunc+0x70>)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6193      	str	r3, [r2, #24]
        else
        {
            LD3_GPIO_Port->BSRR = LED_OFF;
        }
    }
}
 800080a:	e002      	b.n	8000812 <dummyTestFunc+0x5a>
            LD3_GPIO_Port->BSRR = LED_OFF;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <dummyTestFunc+0x70>)
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	6193      	str	r3, [r2, #24]
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000664 	.word	0x20000664
 8000824:	20000668 	.word	0x20000668
 8000828:	40020c00 	.word	0x40020c00

0800082c <triggerSensorDataSend>:

static void triggerSensorDataSend()
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
    _sendSensorData = true;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <triggerSensorDataSend+0x14>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	20000661 	.word	0x20000661

08000844 <transmitEvReqToEm>:

static void transmitEvReqToEm()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
    bool ret = bufHandler_transmitUartData(&_evHandler);
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <transmitEvReqToEm+0x2c>)
 800084c:	f7ff ff10 	bl	8000670 <bufHandler_transmitUartData>
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]

    if (!ret)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f083 0301 	eor.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d103      	bne.n	8000868 <transmitEvReqToEm+0x24>
    {
        return;
    }

	bufHandler_increaseSendIndex(&_evHandler);
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <transmitEvReqToEm+0x2c>)
 8000862:	f7ff fef0 	bl	8000646 <bufHandler_increaseSendIndex>
 8000866:	e000      	b.n	800086a <transmitEvReqToEm+0x26>
        return;
 8000868:	bf00      	nop
}
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000638 	.word	0x20000638

08000874 <transmitEmDataToEv>:

static void transmitEmDataToEv()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    bool ret = bufHandler_transmitUartData(&_emHandler);
 800087a:	4809      	ldr	r0, [pc, #36]	; (80008a0 <transmitEmDataToEv+0x2c>)
 800087c:	f7ff fef8 	bl	8000670 <bufHandler_transmitUartData>
 8000880:	4603      	mov	r3, r0
 8000882:	71fb      	strb	r3, [r7, #7]

    if (!ret)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f083 0301 	eor.w	r3, r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <transmitEmDataToEv+0x24>
    {
        return;
    }

	bufHandler_increaseSendIndex(&_emHandler);
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <transmitEmDataToEv+0x2c>)
 8000892:	f7ff fed8 	bl	8000646 <bufHandler_increaseSendIndex>
 8000896:	e000      	b.n	800089a <transmitEmDataToEv+0x26>
        return;
 8000898:	bf00      	nop
}
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000061c 	.word	0x2000061c

080008a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	if (huart == bufHandler_rxUart(&_emHandler))
 80008ac:	4814      	ldr	r0, [pc, #80]	; (8000900 <HAL_UART_RxCpltCallback+0x5c>)
 80008ae:	f7ff ff59 	bl	8000764 <bufHandler_rxUart>
 80008b2:	4602      	mov	r2, r0
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <HAL_UART_RxCpltCallback+0x24>
	{
        bufHandler_increaseRcvIndex(&_emHandler);
 80008ba:	4811      	ldr	r0, [pc, #68]	; (8000900 <HAL_UART_RxCpltCallback+0x5c>)
 80008bc:	f7ff feaf 	bl	800061e <bufHandler_increaseRcvIndex>
        bufHandler_receiveUartData(&_emHandler);
 80008c0:	480f      	ldr	r0, [pc, #60]	; (8000900 <HAL_UART_RxCpltCallback+0x5c>)
 80008c2:	f7ff ff08 	bl	80006d6 <bufHandler_receiveUartData>
            triggerSensorDataSend();
        }

        bufHandler_receiveUartData(&_evHandler);
	}
}
 80008c6:	e016      	b.n	80008f6 <HAL_UART_RxCpltCallback+0x52>
	else if (huart == bufHandler_rxUart(&_evHandler))
 80008c8:	480e      	ldr	r0, [pc, #56]	; (8000904 <HAL_UART_RxCpltCallback+0x60>)
 80008ca:	f7ff ff4b 	bl	8000764 <bufHandler_rxUart>
 80008ce:	4602      	mov	r2, r0
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d10f      	bne.n	80008f6 <HAL_UART_RxCpltCallback+0x52>
		const uint8_t *msg = bufHandler_getReceivedData(&_evHandler);
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <HAL_UART_RxCpltCallback+0x60>)
 80008d8:	f7ff fe83 	bl	80005e2 <bufHandler_getReceivedData>
 80008dc:	60f8      	str	r0, [r7, #12]
        if (msg[0] == EV_REQ_ID)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2bff      	cmp	r3, #255	; 0xff
 80008e4:	d104      	bne.n	80008f0 <HAL_UART_RxCpltCallback+0x4c>
            bufHandler_increaseRcvIndex(&_evHandler);
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <HAL_UART_RxCpltCallback+0x60>)
 80008e8:	f7ff fe99 	bl	800061e <bufHandler_increaseRcvIndex>
            triggerSensorDataSend();
 80008ec:	f7ff ff9e 	bl	800082c <triggerSensorDataSend>
        bufHandler_receiveUartData(&_evHandler);
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <HAL_UART_RxCpltCallback+0x60>)
 80008f2:	f7ff fef0 	bl	80006d6 <bufHandler_receiveUartData>
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000061c 	.word	0x2000061c
 8000904:	20000638 	.word	0x20000638

08000908 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if (huart == bufHandler_txUart(&_emHandler))
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <HAL_UART_TxCpltCallback+0x3c>)
 8000912:	f7ff ff16 	bl	8000742 <bufHandler_txUart>
 8000916:	4602      	mov	r2, r0
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4293      	cmp	r3, r2
 800091c:	d103      	bne.n	8000926 <HAL_UART_TxCpltCallback+0x1e>
	{
        bufHandler_setTxAvailable(&_emHandler);
 800091e:	4809      	ldr	r0, [pc, #36]	; (8000944 <HAL_UART_TxCpltCallback+0x3c>)
 8000920:	f7ff fefe 	bl	8000720 <bufHandler_setTxAvailable>
	}
	else if (huart == bufHandler_txUart(&_evHandler))
	{
		bufHandler_setTxAvailable(&_evHandler);
	}
}
 8000924:	e009      	b.n	800093a <HAL_UART_TxCpltCallback+0x32>
	else if (huart == bufHandler_txUart(&_evHandler))
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <HAL_UART_TxCpltCallback+0x40>)
 8000928:	f7ff ff0b 	bl	8000742 <bufHandler_txUart>
 800092c:	4602      	mov	r2, r0
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4293      	cmp	r3, r2
 8000932:	d102      	bne.n	800093a <HAL_UART_TxCpltCallback+0x32>
		bufHandler_setTxAvailable(&_evHandler);
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <HAL_UART_TxCpltCallback+0x40>)
 8000936:	f7ff fef3 	bl	8000720 <bufHandler_setTxAvailable>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000061c 	.word	0x2000061c
 8000948:	20000638 	.word	0x20000638

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f000 fcab 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f87b 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f000 f98f 	bl	8000c7c <MX_GPIO_Init>
  MX_SPI1_Init();
 800095e:	f000 f8e1 	bl	8000b24 <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000962:	f000 f969 	bl	8000c38 <MX_USB_OTG_FS_HCD_Init>
  MX_UART4_Init();
 8000966:	f000 f913 	bl	8000b90 <MX_UART4_Init>
  MX_UART5_Init();
 800096a:	f000 f93b 	bl	8000be4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

    bufHandler_init(&_emHandler, _emMsgBuf, BUFFER_MSG_CAPACITY);
 800096e:	2214      	movs	r2, #20
 8000970:	492f      	ldr	r1, [pc, #188]	; (8000a30 <main+0xe4>)
 8000972:	4830      	ldr	r0, [pc, #192]	; (8000a34 <main+0xe8>)
 8000974:	f7ff fdaa 	bl	80004cc <bufHandler_init>
    bufHandler_init(&_evHandler, _evMsgBuf, BUFFER_MSG_CAPACITY);
 8000978:	2214      	movs	r2, #20
 800097a:	492f      	ldr	r1, [pc, #188]	; (8000a38 <main+0xec>)
 800097c:	482f      	ldr	r0, [pc, #188]	; (8000a3c <main+0xf0>)
 800097e:	f7ff fda5 	bl	80004cc <bufHandler_init>

    bufHandler_setUart(&_emHandler, pEV_UART, pEM_UART);
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <main+0xf4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a2f      	ldr	r2, [pc, #188]	; (8000a44 <main+0xf8>)
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	4829      	ldr	r0, [pc, #164]	; (8000a34 <main+0xe8>)
 800098e:	f7ff fdd2 	bl	8000536 <bufHandler_setUart>
    bufHandler_setUart(&_evHandler, pEM_UART, pEV_UART);
 8000992:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <main+0xf8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <main+0xf4>)
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	4619      	mov	r1, r3
 800099c:	4827      	ldr	r0, [pc, #156]	; (8000a3c <main+0xf0>)
 800099e:	f7ff fdca 	bl	8000536 <bufHandler_setUart>

    bufHandler_receiveUartData(&_emHandler);
 80009a2:	4824      	ldr	r0, [pc, #144]	; (8000a34 <main+0xe8>)
 80009a4:	f7ff fe97 	bl	80006d6 <bufHandler_receiveUartData>
    bufHandler_receiveUartData(&_evHandler);
 80009a8:	4824      	ldr	r0, [pc, #144]	; (8000a3c <main+0xf0>)
 80009aa:	f7ff fe94 	bl	80006d6 <bufHandler_receiveUartData>

    // Dummy test send to check UART reception.
    for (uint8_t i = 0; i < MSG_TOTAL_BYTES; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	e008      	b.n	80009c6 <main+0x7a>
    {
        _sensorData[i] = i + 1;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	3201      	adds	r2, #1
 80009ba:	b2d1      	uxtb	r1, r2
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <main+0xfc>)
 80009be:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < MSG_TOTAL_BYTES; i++)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	3301      	adds	r3, #1
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b0c      	cmp	r3, #12
 80009ca:	d9f3      	bls.n	80009b4 <main+0x68>
    }
    // triggerSensorDataSend();
    bool ret = bufHandler_sendData(&_evHandler, _sensorData);
 80009cc:	491e      	ldr	r1, [pc, #120]	; (8000a48 <main+0xfc>)
 80009ce:	481b      	ldr	r0, [pc, #108]	; (8000a3c <main+0xf0>)
 80009d0:	f7ff fde5 	bl	800059e <bufHandler_sendData>
 80009d4:	4603      	mov	r3, r0
 80009d6:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
        // Check first in order to send as soon as the UART is available
        if (_sendSensorData)
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <main+0x100>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00b      	beq.n	80009f8 <main+0xac>
        {
            // We use the _emHandler because that's where the EV TX UART is
            // configured. It's as if the sensor data had come through the EM
            // UART>
            bool ret = bufHandler_sendData(&_emHandler, _sensorData);
 80009e0:	4919      	ldr	r1, [pc, #100]	; (8000a48 <main+0xfc>)
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <main+0xe8>)
 80009e4:	f7ff fddb 	bl	800059e <bufHandler_sendData>
 80009e8:	4603      	mov	r3, r0
 80009ea:	717b      	strb	r3, [r7, #5]

            // Will only return true when it successfully sent data.
            if (ret)
 80009ec:	797b      	ldrb	r3, [r7, #5]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <main+0xac>
            {
                _sendSensorData = false;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <main+0x100>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
            }
        }

		if (!bufHandler_checkEmpty(&_emHandler))
 80009f8:	480e      	ldr	r0, [pc, #56]	; (8000a34 <main+0xe8>)
 80009fa:	f7ff fdb8 	bl	800056e <bufHandler_checkEmpty>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f083 0301 	eor.w	r3, r3, #1
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <main+0xc6>
		{
			transmitEmDataToEv();
 8000a0a:	f7ff ff33 	bl	8000874 <transmitEmDataToEv>

            dummyTestFunc();
 8000a0e:	f7ff fed3 	bl	80007b8 <dummyTestFunc>
		}

		if (!bufHandler_checkEmpty(&_evHandler))
 8000a12:	480a      	ldr	r0, [pc, #40]	; (8000a3c <main+0xf0>)
 8000a14:	f7ff fdab 	bl	800056e <bufHandler_checkEmpty>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f083 0301 	eor.w	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0d9      	beq.n	80009d8 <main+0x8c>
		{
			transmitEvReqToEm();
 8000a24:	f7ff ff0e 	bl	8000844 <transmitEvReqToEm>

			dummyTestFunc();
 8000a28:	f7ff fec6 	bl	80007b8 <dummyTestFunc>
        if (_sendSensorData)
 8000a2c:	e7d4      	b.n	80009d8 <main+0x8c>
 8000a2e:	bf00      	nop
 8000a30:	20000414 	.word	0x20000414
 8000a34:	2000061c 	.word	0x2000061c
 8000a38:	20000518 	.word	0x20000518
 8000a3c:	20000638 	.word	0x20000638
 8000a40:	20000004 	.word	0x20000004
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000654 	.word	0x20000654
 8000a4c:	20000661 	.word	0x20000661

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	; 0x50
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fa94 	bl	8004f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <SystemClock_Config+0xd0>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ac8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 f988 	bl	8002dec <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ae2:	f000 f9b9 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2105      	movs	r1, #5
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fbe9 	bl	80032dc <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b10:	f000 f9a2 	bl	8000e58 <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3750      	adds	r7, #80	; 0x50
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b2a:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <MX_SPI1_Init+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b70:	220a      	movs	r2, #10
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_SPI1_Init+0x64>)
 8000b76:	f002 fdd1 	bl	800371c <HAL_SPI_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b80:	f000 f96a 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000030 	.word	0x20000030
 8000b8c:	40013000 	.word	0x40013000

08000b90 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_UART4_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_UART4_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_UART4_Init+0x4c>)
 8000b9c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000ba0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_UART4_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_UART4_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_UART4_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_UART4_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_UART4_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_UART4_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_UART4_Init+0x4c>)
 8000bc8:	f002 fe31 	bl	800382e <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f941 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000088 	.word	0x20000088
 8000be0:	40004c00 	.word	0x40004c00

08000be4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_UART5_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MX_UART5_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_UART5_Init+0x4c>)
 8000bf0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000bf4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_UART5_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_UART5_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_UART5_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_UART5_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_UART5_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_UART5_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_UART5_Init+0x4c>)
 8000c1c:	f002 fe07 	bl	800382e <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000c26:	f000 f917 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000cc 	.word	0x200000cc
 8000c34:	40005000 	.word	0x40005000

08000c38 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c42:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c58:	2202      	movs	r2, #2
 8000c5a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000c64:	f000 ff11 	bl	8001a8a <HAL_HCD_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000c6e:	f000 f8f3 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000110 	.word	0x20000110

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
 8000c96:	4b6a      	ldr	r3, [pc, #424]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a69      	ldr	r2, [pc, #420]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	61bb      	str	r3, [r7, #24]
 8000cac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	4b63      	ldr	r3, [pc, #396]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a62      	ldr	r2, [pc, #392]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b5c      	ldr	r3, [pc, #368]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a5b      	ldr	r2, [pc, #364]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b59      	ldr	r3, [pc, #356]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b55      	ldr	r3, [pc, #340]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a54      	ldr	r2, [pc, #336]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b52      	ldr	r3, [pc, #328]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b4e      	ldr	r3, [pc, #312]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a4d      	ldr	r2, [pc, #308]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b4b      	ldr	r3, [pc, #300]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b47      	ldr	r3, [pc, #284]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a46      	ldr	r2, [pc, #280]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	4841      	ldr	r0, [pc, #260]	; (8000e44 <MX_GPIO_Init+0x1c8>)
 8000d40:	f000 fe8a 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2101      	movs	r1, #1
 8000d48:	483f      	ldr	r0, [pc, #252]	; (8000e48 <MX_GPIO_Init+0x1cc>)
 8000d4a:	f000 fe85 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d54:	483d      	ldr	r0, [pc, #244]	; (8000e4c <MX_GPIO_Init+0x1d0>)
 8000d56:	f000 fe7f 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4834      	ldr	r0, [pc, #208]	; (8000e44 <MX_GPIO_Init+0x1c8>)
 8000d72:	f000 fcd5 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	482e      	ldr	r0, [pc, #184]	; (8000e48 <MX_GPIO_Init+0x1cc>)
 8000d8e:	f000 fcc7 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d92:	2301      	movs	r3, #1
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d96:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	482a      	ldr	r0, [pc, #168]	; (8000e50 <MX_GPIO_Init+0x1d4>)
 8000da8:	f000 fcba 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dac:	2304      	movs	r3, #4
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4825      	ldr	r0, [pc, #148]	; (8000e54 <MX_GPIO_Init+0x1d8>)
 8000dc0:	f000 fcae 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	481c      	ldr	r0, [pc, #112]	; (8000e54 <MX_GPIO_Init+0x1d8>)
 8000de2:	f000 fc9d 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000de6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4813      	ldr	r0, [pc, #76]	; (8000e4c <MX_GPIO_Init+0x1d0>)
 8000e00:	f000 fc8e 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e04:	2320      	movs	r3, #32
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_GPIO_Init+0x1d0>)
 8000e18:	f000 fc82 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e20:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_GPIO_Init+0x1c8>)
 8000e32:	f000 fc75 	bl	8001720 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e36:	bf00      	nop
 8000e38:	3730      	adds	r7, #48	; 0x30
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020c00 	.word	0x40020c00
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40020400 	.word	0x40020400

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ea2:	2007      	movs	r0, #7
 8000ea4:	f000 fb68 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <HAL_SPI_MspInit+0x84>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d12b      	bne.n	8000f2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_SPI_MspInit+0x88>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_SPI_MspInit+0x88>)
 8000ee0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_SPI_MspInit+0x88>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_SPI_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_SPI_MspInit+0x88>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_SPI_MspInit+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f0e:	23e0      	movs	r3, #224	; 0xe0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f1e:	2305      	movs	r3, #5
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_SPI_MspInit+0x8c>)
 8000f2a:	f000 fbf9 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000

08000f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a59      	ldr	r2, [pc, #356]	; (80010c8 <HAL_UART_MspInit+0x184>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d153      	bne.n	800100e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
 8000f6a:	4b58      	ldr	r3, [pc, #352]	; (80010cc <HAL_UART_MspInit+0x188>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a57      	ldr	r2, [pc, #348]	; (80010cc <HAL_UART_MspInit+0x188>)
 8000f70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b55      	ldr	r3, [pc, #340]	; (80010cc <HAL_UART_MspInit+0x188>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f7e:	623b      	str	r3, [r7, #32]
 8000f80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	4b51      	ldr	r3, [pc, #324]	; (80010cc <HAL_UART_MspInit+0x188>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a50      	ldr	r2, [pc, #320]	; (80010cc <HAL_UART_MspInit+0x188>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <HAL_UART_MspInit+0x188>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_UART_MspInit+0x188>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a49      	ldr	r2, [pc, #292]	; (80010cc <HAL_UART_MspInit+0x188>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_UART_MspInit+0x188>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	483e      	ldr	r0, [pc, #248]	; (80010d0 <HAL_UART_MspInit+0x18c>)
 8000fd6:	f000 fba3 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fec:	2308      	movs	r3, #8
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4837      	ldr	r0, [pc, #220]	; (80010d4 <HAL_UART_MspInit+0x190>)
 8000ff8:	f000 fb92 	bl	8001720 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	2034      	movs	r0, #52	; 0x34
 8001002:	f000 fac4 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001006:	2034      	movs	r0, #52	; 0x34
 8001008:	f000 fadd 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800100c:	e057      	b.n	80010be <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==UART5)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_UART_MspInit+0x194>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d152      	bne.n	80010be <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <HAL_UART_MspInit+0x188>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <HAL_UART_MspInit+0x188>)
 8001022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <HAL_UART_MspInit+0x188>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_UART_MspInit+0x188>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a23      	ldr	r2, [pc, #140]	; (80010cc <HAL_UART_MspInit+0x188>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_UART_MspInit+0x188>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_UART_MspInit+0x188>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_UART_MspInit+0x188>)
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6313      	str	r3, [r2, #48]	; 0x30
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <HAL_UART_MspInit+0x188>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800107e:	2308      	movs	r3, #8
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	4812      	ldr	r0, [pc, #72]	; (80010d4 <HAL_UART_MspInit+0x190>)
 800108a:	f000 fb49 	bl	8001720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800109e:	2308      	movs	r3, #8
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <HAL_UART_MspInit+0x198>)
 80010aa:	f000 fb39 	bl	8001720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2035      	movs	r0, #53	; 0x35
 80010b4:	f000 fa6b 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80010b8:	2035      	movs	r0, #53	; 0x35
 80010ba:	f000 fa84 	bl	80015c6 <HAL_NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3738      	adds	r7, #56	; 0x38
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40004c00 	.word	0x40004c00
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40005000 	.word	0x40005000
 80010dc:	40020c00 	.word	0x40020c00

080010e0 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001100:	d147      	bne.n	8001192 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_HCD_MspInit+0xbc>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a24      	ldr	r2, [pc, #144]	; (800119c <HAL_HCD_MspInit+0xbc>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <HAL_HCD_MspInit+0xbc>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800111e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	481b      	ldr	r0, [pc, #108]	; (80011a0 <HAL_HCD_MspInit+0xc0>)
 8001134:	f000 faf4 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001138:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800114a:	230a      	movs	r3, #10
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4812      	ldr	r0, [pc, #72]	; (80011a0 <HAL_HCD_MspInit+0xc0>)
 8001156:	f000 fae3 	bl	8001720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_HCD_MspInit+0xbc>)
 800115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_HCD_MspInit+0xbc>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	6353      	str	r3, [r2, #52]	; 0x34
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_HCD_MspInit+0xbc>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_HCD_MspInit+0xbc>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_HCD_MspInit+0xbc>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2043      	movs	r0, #67	; 0x43
 8001188:	f000 fa01 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800118c:	2043      	movs	r0, #67	; 0x43
 800118e:	f000 fa1a 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f8ae 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <UART4_IRQHandler+0x10>)
 80011fe:	f002 fbd9 	bl	80039b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000088 	.word	0x20000088

0800120c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <UART5_IRQHandler+0x10>)
 8001212:	f002 fbcf 	bl	80039b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000cc 	.word	0x200000cc

08001220 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <OTG_FS_IRQHandler+0x10>)
 8001226:	f000 fc92 	bl	8001b4e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000110 	.word	0x20000110

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125e:	490e      	ldr	r1, [pc, #56]	; (8001298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001274:	4c0b      	ldr	r4, [pc, #44]	; (80012a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001282:	f7ff ffd7 	bl	8001234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f003 fe5d 	bl	8004f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fb5f 	bl	800094c <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800129c:	08004fdc 	.word	0x08004fdc
  ldr r2, =_sbss
 80012a0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80012a4:	20000670 	.word	0x20000670

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f94f 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fdc0 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f967 	bl	80015e2 <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 f92f 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000008 	.word	0x20000008
 8001348:	20000010 	.word	0x20000010
 800134c:	2000000c 	.word	0x2000000c

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000010 	.word	0x20000010
 8001374:	2000066c 	.word	0x2000066c

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2000066c 	.word	0x2000066c

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_Delay+0x44>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000010 	.word	0x20000010

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db0b      	blt.n	8001466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <__NVIC_EnableIRQ+0x38>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	; (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f7ff ff8e 	bl	8001478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff29 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff3e 	bl	8001420 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff8e 	bl	80014cc <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5d 	bl	8001478 <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff31 	bl	800143c <__NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffa2 	bl	8001534 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff feb6 	bl	8001378 <HAL_GetTick>
 800160c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d008      	beq.n	800162c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e052      	b.n	80016d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0216 	bic.w	r2, r2, #22
 800163a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800164a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	2b00      	cmp	r3, #0
 8001652:	d103      	bne.n	800165c <HAL_DMA_Abort+0x62>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001658:	2b00      	cmp	r3, #0
 800165a:	d007      	beq.n	800166c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0208 	bic.w	r2, r2, #8
 800166a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167c:	e013      	b.n	80016a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800167e:	f7ff fe7b 	bl	8001378 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b05      	cmp	r3, #5
 800168a:	d90c      	bls.n	80016a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2203      	movs	r2, #3
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e015      	b.n	80016d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e4      	bne.n	800167e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	223f      	movs	r2, #63	; 0x3f
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d004      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e00c      	b.n	8001712 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2205      	movs	r2, #5
 80016fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e16b      	b.n	8001a14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 815a 	bne.w	8001a0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d005      	beq.n	8001772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176e:	2b02      	cmp	r3, #2
 8001770:	d130      	bne.n	80017d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80b4 	beq.w	8001a0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b60      	ldr	r3, [pc, #384]	; (8001a2c <HAL_GPIO_Init+0x30c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a5f      	ldr	r2, [pc, #380]	; (8001a2c <HAL_GPIO_Init+0x30c>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_GPIO_Init+0x30c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c2:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_GPIO_Init+0x310>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <HAL_GPIO_Init+0x314>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d02b      	beq.n	8001946 <HAL_GPIO_Init+0x226>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_GPIO_Init+0x318>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d025      	beq.n	8001942 <HAL_GPIO_Init+0x222>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a50      	ldr	r2, [pc, #320]	; (8001a3c <HAL_GPIO_Init+0x31c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01f      	beq.n	800193e <HAL_GPIO_Init+0x21e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4f      	ldr	r2, [pc, #316]	; (8001a40 <HAL_GPIO_Init+0x320>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x21a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4e      	ldr	r2, [pc, #312]	; (8001a44 <HAL_GPIO_Init+0x324>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x216>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_GPIO_Init+0x328>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x212>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4c      	ldr	r2, [pc, #304]	; (8001a4c <HAL_GPIO_Init+0x32c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x20e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4b      	ldr	r2, [pc, #300]	; (8001a50 <HAL_GPIO_Init+0x330>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x20a>
 8001926:	2307      	movs	r3, #7
 8001928:	e00e      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800192a:	2308      	movs	r3, #8
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800192e:	2306      	movs	r3, #6
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001946:	2300      	movs	r3, #0
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001958:	4935      	ldr	r1, [pc, #212]	; (8001a30 <HAL_GPIO_Init+0x310>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_GPIO_Init+0x334>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198a:	4a32      	ldr	r2, [pc, #200]	; (8001a54 <HAL_GPIO_Init+0x334>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <HAL_GPIO_Init+0x334>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a08:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <HAL_GPIO_Init+0x334>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	f67f ae90 	bls.w	800173c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40021400 	.word	0x40021400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40021c00 	.word	0x40021c00
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8c:	b08f      	sub	sp, #60	; 0x3c
 8001a8e:	af0a      	add	r7, sp, #40	; 0x28
 8001a90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e054      	b.n	8001b46 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fb12 	bl	80010e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 febb 	bl	8004856 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	687e      	ldr	r6, [r7, #4]
 8001ae8:	466d      	mov	r5, sp
 8001aea:	f106 0410 	add.w	r4, r6, #16
 8001aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001afa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001afe:	1d33      	adds	r3, r6, #4
 8001b00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	f002 fe46 	bl	8004794 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 feb2 	bl	8004878 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	687e      	ldr	r6, [r7, #4]
 8001b1c:	466d      	mov	r5, sp
 8001b1e:	f106 0410 	add.w	r4, r6, #16
 8001b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b32:	1d33      	adds	r3, r6, #4
 8001b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b36:	6838      	ldr	r0, [r7, #0]
 8001b38:	f002 fffc 	bl	8004b34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b4e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 ffa2 	bl	8004aae <USB_GetMode>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	f040 80f6 	bne.w	8001d5e <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 ff86 	bl	8004a88 <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80ec 	beq.w	8001d5c <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 ff7d 	bl	8004a88 <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b98:	d104      	bne.n	8001ba4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ba2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 ff6d 	bl	8004a88 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bb8:	d104      	bne.n	8001bc4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bc2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 ff5d 	bl	8004a88 <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bd8:	d104      	bne.n	8001be4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001be2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 ff4d 	bl	8004a88 <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d103      	bne.n	8001c00 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 ff3f 	bl	8004a88 <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c14:	d11c      	bne.n	8001c50 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c1e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10f      	bne.n	8001c50 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c30:	2110      	movs	r1, #16
 8001c32:	6938      	ldr	r0, [r7, #16]
 8001c34:	f002 fe6c 	bl	8004910 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c38:	6938      	ldr	r0, [r7, #16]
 8001c3a:	f002 fe9d 	bl	8004978 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2101      	movs	r1, #1
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 f835 	bl	8004cb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f89e 	bl	8001d8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 ff17 	bl	8004a88 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d102      	bne.n	8001c6c <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f001 f84c 	bl	8002d04 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 ff09 	bl	8004a88 <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d106      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f86f 	bl	8001d64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fef8 	bl	8004a88 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b10      	cmp	r3, #16
 8001ca0:	d101      	bne.n	8001ca6 <HAL_HCD_IRQHandler+0x158>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_HCD_IRQHandler+0x15a>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d012      	beq.n	8001cd2 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0210 	bic.w	r2, r2, #16
 8001cba:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 ff4f 	bl	8002b60 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0210 	orr.w	r2, r2, #16
 8001cd0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 fed6 	bl	8004a88 <USB_ReadInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce6:	d13a      	bne.n	8001d5e <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 f81b 	bl	8004d28 <USB_HC_ReadInterrupt>
 8001cf2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e025      	b.n	8001d46 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d018      	beq.n	8001d40 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d24:	d106      	bne.n	8001d34 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f859 	bl	8001de4 <HCD_HC_IN_IRQHandler>
 8001d32:	e005      	b.n	8001d40 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fba7 	bl	800248e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d3d4      	bcc.n	8001cfa <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d58:	615a      	str	r2, [r3, #20]
 8001d5a:	e000      	b.n	8001d5e <HAL_HCD_IRQHandler+0x210>
      return;
 8001d5c:	bf00      	nop
    }
  }
}
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	70fb      	strb	r3, [r7, #3]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d11a      	bne.n	8001e4a <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	2304      	movs	r3, #4
 8001e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3361      	adds	r3, #97	; 0x61
 8001e34:	2206      	movs	r2, #6
 8001e36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 ff81 	bl	8004d4a <USB_HC_Halt>
 8001e48:	e0af      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e60:	d11b      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	3361      	adds	r3, #97	; 0x61
 8001e84:	2207      	movs	r2, #7
 8001e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 ff59 	bl	8004d4a <USB_HC_Halt>
 8001e98:	e087      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d109      	bne.n	8001ec4 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	6093      	str	r3, [r2, #8]
 8001ec2:	e072      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11a      	bne.n	8001f10 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	2308      	movs	r3, #8
 8001eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3361      	adds	r3, #97	; 0x61
 8001efa:	2205      	movs	r2, #5
 8001efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 ff1e 	bl	8004d4a <USB_HC_Halt>
 8001f0e:	e04c      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f26:	d11b      	bne.n	8001f60 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	461a      	mov	r2, r3
 8001f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3361      	adds	r3, #97	; 0x61
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fef6 	bl	8004d4a <USB_HC_Halt>
 8001f5e:	e024      	b.n	8001faa <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b80      	cmp	r3, #128	; 0x80
 8001f74:	d119      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	461a      	mov	r2, r3
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3361      	adds	r3, #97	; 0x61
 8001f96:	2206      	movs	r2, #6
 8001f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 fed0 	bl	8004d4a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc0:	d112      	bne.n	8001fe8 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 febc 	bl	8004d4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fe6:	e24e      	b.n	8002486 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	f040 80df 	bne.w	80021be <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d019      	beq.n	800203c <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	3348      	adds	r3, #72	; 0x48
 8002016:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	0159      	lsls	r1, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	440b      	add	r3, r1
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800202a:	1ad2      	subs	r2, r2, r3
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	202c      	movs	r0, #44	; 0x2c
 8002032:	fb00 f303 	mul.w	r3, r0, r3
 8002036:	440b      	add	r3, r1
 8002038:	3350      	adds	r3, #80	; 0x50
 800203a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	3361      	adds	r3, #97	; 0x61
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	335c      	adds	r3, #92	; 0x5c
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	461a      	mov	r2, r3
 800206e:	2301      	movs	r3, #1
 8002070:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	333f      	adds	r3, #63	; 0x3f
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	333f      	adds	r3, #63	; 0x3f
 8002094:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002096:	2b02      	cmp	r3, #2
 8002098:	d111      	bne.n	80020be <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 fe50 	bl	8004d4a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	461a      	mov	r2, r3
 80020b8:	2310      	movs	r3, #16
 80020ba:	6093      	str	r3, [r2, #8]
 80020bc:	e03a      	b.n	8002134 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	212c      	movs	r1, #44	; 0x2c
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	333f      	adds	r3, #63	; 0x3f
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d009      	beq.n	80020e6 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	212c      	movs	r1, #44	; 0x2c
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	333f      	adds	r3, #63	; 0x3f
 80020e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d126      	bne.n	8002134 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	0151      	lsls	r1, r2, #5
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	440a      	add	r2, r1
 80020fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002104:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3360      	adds	r3, #96	; 0x60
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	b2d9      	uxtb	r1, r3
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	202c      	movs	r0, #44	; 0x2c
 8002122:	fb00 f303 	mul.w	r3, r0, r3
 8002126:	4413      	add	r3, r2
 8002128:	3360      	adds	r3, #96	; 0x60
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fe4a 	bl	8001dc8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d12b      	bne.n	8002194 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3348      	adds	r3, #72	; 0x48
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	202c      	movs	r0, #44	; 0x2c
 8002152:	fb00 f202 	mul.w	r2, r0, r2
 8002156:	440a      	add	r2, r1
 8002158:	3240      	adds	r2, #64	; 0x40
 800215a:	8812      	ldrh	r2, [r2, #0]
 800215c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 818e 	beq.w	8002486 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3354      	adds	r3, #84	; 0x54
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2d8      	uxtb	r0, r3
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3354      	adds	r3, #84	; 0x54
 800218e:	4602      	mov	r2, r0
 8002190:	701a      	strb	r2, [r3, #0]
}
 8002192:	e178      	b.n	8002486 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3354      	adds	r3, #84	; 0x54
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2d8      	uxtb	r0, r3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	3354      	adds	r3, #84	; 0x54
 80021b8:	4602      	mov	r2, r0
 80021ba:	701a      	strb	r2, [r3, #0]
}
 80021bc:	e163      	b.n	8002486 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	f040 80f6 	bne.w	80023c2 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3361      	adds	r3, #97	; 0x61
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d109      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3360      	adds	r3, #96	; 0x60
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e0c9      	b.n	8002392 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3361      	adds	r3, #97	; 0x61
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b05      	cmp	r3, #5
 8002210:	d109      	bne.n	8002226 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3360      	adds	r3, #96	; 0x60
 8002220:	2205      	movs	r2, #5
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e0b5      	b.n	8002392 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3361      	adds	r3, #97	; 0x61
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b06      	cmp	r3, #6
 8002238:	d009      	beq.n	800224e <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	3361      	adds	r3, #97	; 0x61
 8002248:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800224a:	2b08      	cmp	r3, #8
 800224c:	d150      	bne.n	80022f0 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	335c      	adds	r3, #92	; 0x5c
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	202c      	movs	r0, #44	; 0x2c
 8002266:	fb00 f303 	mul.w	r3, r0, r3
 800226a:	440b      	add	r3, r1
 800226c:	335c      	adds	r3, #92	; 0x5c
 800226e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	335c      	adds	r3, #92	; 0x5c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d912      	bls.n	80022aa <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	335c      	adds	r3, #92	; 0x5c
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3360      	adds	r3, #96	; 0x60
 80022a4:	2204      	movs	r2, #4
 80022a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022a8:	e073      	b.n	8002392 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3360      	adds	r3, #96	; 0x60
 80022b8:	2202      	movs	r2, #2
 80022ba:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022d2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022da:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ee:	e050      	b.n	8002392 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3361      	adds	r3, #97	; 0x61
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d122      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3360      	adds	r3, #96	; 0x60
 8002312:	2202      	movs	r2, #2
 8002314:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800232c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002334:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e023      	b.n	8002392 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3361      	adds	r3, #97	; 0x61
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b07      	cmp	r3, #7
 800235c:	d119      	bne.n	8002392 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	335c      	adds	r3, #92	; 0x5c
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	202c      	movs	r0, #44	; 0x2c
 8002376:	fb00 f303 	mul.w	r3, r0, r3
 800237a:	440b      	add	r3, r1
 800237c:	335c      	adds	r3, #92	; 0x5c
 800237e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3360      	adds	r3, #96	; 0x60
 800238e:	2204      	movs	r2, #4
 8002390:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	461a      	mov	r2, r3
 80023a0:	2302      	movs	r3, #2
 80023a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	b2d9      	uxtb	r1, r3
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	202c      	movs	r0, #44	; 0x2c
 80023ae:	fb00 f303 	mul.w	r3, r0, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3360      	adds	r3, #96	; 0x60
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fd04 	bl	8001dc8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023c0:	e061      	b.n	8002486 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d156      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	333f      	adds	r3, #63	; 0x3f
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d111      	bne.n	8002410 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	335c      	adds	r3, #92	; 0x5c
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fc9e 	bl	8004d4a <USB_HC_Halt>
 800240e:	e031      	b.n	8002474 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	333f      	adds	r3, #63	; 0x3f
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	333f      	adds	r3, #63	; 0x3f
 8002432:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002434:	2b02      	cmp	r3, #2
 8002436:	d11d      	bne.n	8002474 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	335c      	adds	r3, #92	; 0x5c
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d110      	bne.n	8002474 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	3361      	adds	r3, #97	; 0x61
 8002460:	2203      	movs	r2, #3
 8002462:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f002 fc6b 	bl	8004d4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	461a      	mov	r2, r3
 8002482:	2310      	movs	r3, #16
 8002484:	6093      	str	r3, [r2, #8]
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b088      	sub	sp, #32
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d11a      	bne.n	80024f4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2304      	movs	r3, #4
 80024ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3361      	adds	r3, #97	; 0x61
 80024de:	2206      	movs	r2, #6
 80024e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fc2c 	bl	8004d4a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024f2:	e331      	b.n	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b20      	cmp	r3, #32
 8002508:	d12e      	bne.n	8002568 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	461a      	mov	r2, r3
 8002518:	2320      	movs	r3, #32
 800251a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	333d      	adds	r3, #61	; 0x3d
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	f040 8313 	bne.w	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	333d      	adds	r3, #61	; 0x3d
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3360      	adds	r3, #96	; 0x60
 8002552:	2202      	movs	r2, #2
 8002554:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f002 fbf2 	bl	8004d4a <USB_HC_Halt>
}
 8002566:	e2f7      	b.n	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257e:	d112      	bne.n	80025a6 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	461a      	mov	r2, r3
 800258e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002592:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 fbd3 	bl	8004d4a <USB_HC_Halt>
}
 80025a4:	e2d8      	b.n	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d140      	bne.n	800263e <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	335c      	adds	r3, #92	; 0x5c
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d111      	bne.n	8002608 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	333d      	adds	r3, #61	; 0x3d
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	2340      	movs	r3, #64	; 0x40
 8002606:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	2301      	movs	r3, #1
 8002618:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3361      	adds	r3, #97	; 0x61
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f002 fb87 	bl	8004d4a <USB_HC_Halt>
}
 800263c:	e28c      	b.n	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d12c      	bne.n	80026ae <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3361      	adds	r3, #97	; 0x61
 8002662:	2204      	movs	r2, #4
 8002664:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	333d      	adds	r3, #61	; 0x3d
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	335c      	adds	r3, #92	; 0x5c
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f002 fb58 	bl	8004d4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	461a      	mov	r2, r3
 80026a8:	2340      	movs	r3, #64	; 0x40
 80026aa:	6093      	str	r3, [r2, #8]
}
 80026ac:	e254      	b.n	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d11a      	bne.n	80026fa <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	461a      	mov	r2, r3
 80026d2:	2308      	movs	r3, #8
 80026d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	3361      	adds	r3, #97	; 0x61
 80026e4:	2205      	movs	r2, #5
 80026e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fb29 	bl	8004d4a <USB_HC_Halt>
}
 80026f8:	e22e      	b.n	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b10      	cmp	r3, #16
 800270e:	d140      	bne.n	8002792 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	335c      	adds	r3, #92	; 0x5c
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3361      	adds	r3, #97	; 0x61
 8002730:	2203      	movs	r2, #3
 8002732:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	333d      	adds	r3, #61	; 0x3d
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d112      	bne.n	800276e <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	333c      	adds	r3, #60	; 0x3c
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d108      	bne.n	800276e <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	212c      	movs	r1, #44	; 0x2c
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4413      	add	r3, r2
 8002768:	333d      	adds	r3, #61	; 0x3d
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fae6 	bl	8004d4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2310      	movs	r3, #16
 800278e:	6093      	str	r3, [r2, #8]
}
 8002790:	e1e2      	b.n	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d164      	bne.n	8002872 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3361      	adds	r3, #97	; 0x61
 80027be:	2206      	movs	r2, #6
 80027c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 fabc 	bl	8004d4a <USB_HC_Halt>
 80027d2:	e044      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	335c      	adds	r3, #92	; 0x5c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	202c      	movs	r0, #44	; 0x2c
 80027ec:	fb00 f303 	mul.w	r3, r0, r3
 80027f0:	440b      	add	r3, r1
 80027f2:	335c      	adds	r3, #92	; 0x5c
 80027f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	335c      	adds	r3, #92	; 0x5c
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d920      	bls.n	800284c <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3360      	adds	r3, #96	; 0x60
 800282a:	2204      	movs	r2, #4
 800282c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	b2d9      	uxtb	r1, r3
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	202c      	movs	r0, #44	; 0x2c
 8002838:	fb00 f303 	mul.w	r3, r0, r3
 800283c:	4413      	add	r3, r2
 800283e:	3360      	adds	r3, #96	; 0x60
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff fabf 	bl	8001dc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800284a:	e008      	b.n	800285e <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	461a      	mov	r2, r3
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	6093      	str	r3, [r2, #8]
}
 8002870:	e172      	b.n	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002888:	d11b      	bne.n	80028c2 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	3361      	adds	r3, #97	; 0x61
 8002898:	2208      	movs	r2, #8
 800289a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fa4f 	bl	8004d4a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	461a      	mov	r2, r3
 80028ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028be:	6093      	str	r3, [r2, #8]
}
 80028c0:	e14a      	b.n	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	f040 813f 	bne.w	8002b58 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3361      	adds	r3, #97	; 0x61
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d17d      	bne.n	80029ea <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3360      	adds	r3, #96	; 0x60
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	333f      	adds	r3, #63	; 0x3f
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d00a      	beq.n	800292a <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	333f      	adds	r3, #63	; 0x3f
 8002922:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002924:	2b03      	cmp	r3, #3
 8002926:	f040 8100 	bne.w	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d113      	bne.n	800295a <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3355      	adds	r3, #85	; 0x55
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2d8      	uxtb	r0, r3
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3355      	adds	r3, #85	; 0x55
 8002956:	4602      	mov	r2, r0
 8002958:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b01      	cmp	r3, #1
 8002960:	f040 80e3 	bne.w	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	334c      	adds	r3, #76	; 0x4c
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80d8 	beq.w	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	334c      	adds	r3, #76	; 0x4c
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	202c      	movs	r0, #44	; 0x2c
 8002990:	fb00 f202 	mul.w	r2, r0, r2
 8002994:	440a      	add	r2, r1
 8002996:	3240      	adds	r2, #64	; 0x40
 8002998:	8812      	ldrh	r2, [r2, #0]
 800299a:	4413      	add	r3, r2
 800299c:	3b01      	subs	r3, #1
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	202c      	movs	r0, #44	; 0x2c
 80029a4:	fb00 f202 	mul.w	r2, r0, r2
 80029a8:	440a      	add	r2, r1
 80029aa:	3240      	adds	r2, #64	; 0x40
 80029ac:	8812      	ldrh	r2, [r2, #0]
 80029ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80b5 	beq.w	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3355      	adds	r3, #85	; 0x55
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f083 0301 	eor.w	r3, r3, #1
 80029d4:	b2d8      	uxtb	r0, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3355      	adds	r3, #85	; 0x55
 80029e4:	4602      	mov	r2, r0
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e09f      	b.n	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3361      	adds	r3, #97	; 0x61
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d109      	bne.n	8002a12 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3360      	adds	r3, #96	; 0x60
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e08b      	b.n	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3361      	adds	r3, #97	; 0x61
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d109      	bne.n	8002a3a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3360      	adds	r3, #96	; 0x60
 8002a34:	2202      	movs	r2, #2
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e077      	b.n	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3361      	adds	r3, #97	; 0x61
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d109      	bne.n	8002a62 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3360      	adds	r3, #96	; 0x60
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e063      	b.n	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3361      	adds	r3, #97	; 0x61
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d009      	beq.n	8002a8a <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	3361      	adds	r3, #97	; 0x61
 8002a84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d14f      	bne.n	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	202c      	movs	r0, #44	; 0x2c
 8002aa2:	fb00 f303 	mul.w	r3, r0, r3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	335c      	adds	r3, #92	; 0x5c
 8002aaa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d912      	bls.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	335c      	adds	r3, #92	; 0x5c
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3360      	adds	r3, #96	; 0x60
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e021      	b.n	8002b2a <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3360      	adds	r3, #96	; 0x60
 8002af4:	2202      	movs	r2, #2
 8002af6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b0e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b16:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	461a      	mov	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	2302      	movs	r3, #2
 8002b3a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	b2d9      	uxtb	r1, r3
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	202c      	movs	r0, #44	; 0x2c
 8002b46:	fb00 f303 	mul.w	r3, r0, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3360      	adds	r3, #96	; 0x60
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff f938 	bl	8001dc8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b58:	bf00      	nop
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	0c5b      	lsrs	r3, r3, #17
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b94:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d004      	beq.n	8002ba6 <HCD_RXQLVL_IRQHandler+0x46>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	f000 80a9 	beq.w	8002cf6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ba4:	e0aa      	b.n	8002cfc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a6 	beq.w	8002cfa <HCD_RXQLVL_IRQHandler+0x19a>
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3344      	adds	r3, #68	; 0x44
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 809b 	beq.w	8002cfa <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3350      	adds	r3, #80	; 0x50
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	441a      	add	r2, r3
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	202c      	movs	r0, #44	; 0x2c
 8002bde:	fb00 f303 	mul.w	r3, r0, r3
 8002be2:	440b      	add	r3, r1
 8002be4:	334c      	adds	r3, #76	; 0x4c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d87a      	bhi.n	8002ce2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3344      	adds	r3, #68	; 0x44
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	b292      	uxth	r2, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	f001 fee7 	bl	80049d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3344      	adds	r3, #68	; 0x44
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	441a      	add	r2, r3
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	202c      	movs	r0, #44	; 0x2c
 8002c24:	fb00 f303 	mul.w	r3, r0, r3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3344      	adds	r3, #68	; 0x44
 8002c2c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3350      	adds	r3, #80	; 0x50
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	441a      	add	r2, r3
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	202c      	movs	r0, #44	; 0x2c
 8002c48:	fb00 f303 	mul.w	r3, r0, r3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3350      	adds	r3, #80	; 0x50
 8002c50:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	0cdb      	lsrs	r3, r3, #19
 8002c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c66:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3340      	adds	r3, #64	; 0x40
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d13c      	bne.n	8002cfa <HCD_RXQLVL_IRQHandler+0x19a>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d039      	beq.n	8002cfa <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c9c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ca4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3354      	adds	r3, #84	; 0x54
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	f083 0301 	eor.w	r3, r3, #1
 8002ccc:	b2d8      	uxtb	r0, r3
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3354      	adds	r3, #84	; 0x54
 8002cdc:	4602      	mov	r2, r0
 8002cde:	701a      	strb	r2, [r3, #0]
      break;
 8002ce0:	e00b      	b.n	8002cfa <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3360      	adds	r3, #96	; 0x60
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	701a      	strb	r2, [r3, #0]
      break;
 8002cf4:	e001      	b.n	8002cfa <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e000      	b.n	8002cfc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cfa:	bf00      	nop
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d30:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d10b      	bne.n	8002d54 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff f816 	bl	8001d78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d132      	bne.n	8002dc4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d126      	bne.n	8002dbe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d113      	bne.n	8002da0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d82:	d106      	bne.n	8002d92 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2102      	movs	r1, #2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 ff92 	bl	8004cb4 <USB_InitFSLSPClkSel>
 8002d90:	e011      	b.n	8002db6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 ff8b 	bl	8004cb4 <USB_InitFSLSPClkSel>
 8002d9e:	e00a      	b.n	8002db6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d106      	bne.n	8002db6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dae:	461a      	mov	r2, r3
 8002db0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002db4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fff2 	bl	8001da0 <HAL_HCD_PortEnabled_Callback>
 8002dbc:	e002      	b.n	8002dc4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fff8 	bl	8001db4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d103      	bne.n	8002dd6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f043 0320 	orr.w	r3, r3, #32
 8002dd4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	6013      	str	r3, [r2, #0]
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e267      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d075      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e0a:	4b88      	ldr	r3, [pc, #544]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d00c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e16:	4b85      	ldr	r3, [pc, #532]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d112      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e22:	4b82      	ldr	r3, [pc, #520]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2e:	d10b      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	4b7e      	ldr	r3, [pc, #504]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05b      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x108>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d157      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e242      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e50:	d106      	bne.n	8002e60 <HAL_RCC_OscConfig+0x74>
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a75      	ldr	r2, [pc, #468]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e01d      	b.n	8002e9c <HAL_RCC_OscConfig+0xb0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x98>
 8002e6a:	4b70      	ldr	r3, [pc, #448]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6f      	ldr	r2, [pc, #444]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6c      	ldr	r2, [pc, #432]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e00b      	b.n	8002e9c <HAL_RCC_OscConfig+0xb0>
 8002e84:	4b69      	ldr	r3, [pc, #420]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a68      	ldr	r2, [pc, #416]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b66      	ldr	r3, [pc, #408]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a65      	ldr	r2, [pc, #404]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fa68 	bl	8001378 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fe fa64 	bl	8001378 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e207      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b5b      	ldr	r3, [pc, #364]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0xc0>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fa54 	bl	8001378 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe fa50 	bl	8001378 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1f3      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	4b51      	ldr	r3, [pc, #324]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xe8>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f02:	4b4a      	ldr	r3, [pc, #296]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0e:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d11c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b44      	ldr	r3, [pc, #272]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_RCC_OscConfig+0x152>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e1c7      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4937      	ldr	r1, [pc, #220]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	e03a      	b.n	8002fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5c:	4b34      	ldr	r3, [pc, #208]	; (8003030 <HAL_RCC_OscConfig+0x244>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fe fa09 	bl	8001378 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7fe fa05 	bl	8001378 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1a8      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4925      	ldr	r1, [pc, #148]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	e015      	b.n	8002fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9e:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_RCC_OscConfig+0x244>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f9e8 	bl	8001378 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fe f9e4 	bl	8001378 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e187      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d036      	beq.n	8003044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d016      	beq.n	800300c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_RCC_OscConfig+0x248>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fe f9c8 	bl	8001378 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fec:	f7fe f9c4 	bl	8001378 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e167      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x240>)
 8003000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x200>
 800300a:	e01b      	b.n	8003044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_OscConfig+0x248>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003012:	f7fe f9b1 	bl	8001378 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	e00e      	b.n	8003038 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301a:	f7fe f9ad 	bl	8001378 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d907      	bls.n	8003038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e150      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
 800302c:	40023800 	.word	0x40023800
 8003030:	42470000 	.word	0x42470000
 8003034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800303a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ea      	bne.n	800301a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8097 	beq.w	8003180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003056:	4b81      	ldr	r3, [pc, #516]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b7d      	ldr	r3, [pc, #500]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a7c      	ldr	r2, [pc, #496]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b7a      	ldr	r3, [pc, #488]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b77      	ldr	r3, [pc, #476]	; (8003260 <HAL_RCC_OscConfig+0x474>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b74      	ldr	r3, [pc, #464]	; (8003260 <HAL_RCC_OscConfig+0x474>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a73      	ldr	r2, [pc, #460]	; (8003260 <HAL_RCC_OscConfig+0x474>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fe f96d 	bl	8001378 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a2:	f7fe f969 	bl	8001378 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e10c      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_RCC_OscConfig+0x474>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x2ea>
 80030c8:	4b64      	ldr	r3, [pc, #400]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a63      	ldr	r2, [pc, #396]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
 80030d4:	e01c      	b.n	8003110 <HAL_RCC_OscConfig+0x324>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x30c>
 80030de:	4b5f      	ldr	r3, [pc, #380]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a5e      	ldr	r2, [pc, #376]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	4b5c      	ldr	r3, [pc, #368]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a5b      	ldr	r2, [pc, #364]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0x324>
 80030f8:	4b58      	ldr	r3, [pc, #352]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a57      	ldr	r2, [pc, #348]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	4b55      	ldr	r3, [pc, #340]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a54      	ldr	r2, [pc, #336]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800310a:	f023 0304 	bic.w	r3, r3, #4
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d015      	beq.n	8003144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fe f92e 	bl	8001378 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311e:	e00a      	b.n	8003136 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fe f92a 	bl	8001378 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e0cb      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0ee      	beq.n	8003120 <HAL_RCC_OscConfig+0x334>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003144:	f7fe f918 	bl	8001378 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fe f914 	bl	8001378 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e0b5      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003162:	4b3e      	ldr	r3, [pc, #248]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1ee      	bne.n	800314c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	4a38      	ldr	r2, [pc, #224]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800317a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80a1 	beq.w	80032cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800318a:	4b34      	ldr	r3, [pc, #208]	; (800325c <HAL_RCC_OscConfig+0x470>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b08      	cmp	r3, #8
 8003194:	d05c      	beq.n	8003250 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d141      	bne.n	8003222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCC_OscConfig+0x478>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fe f8e8 	bl	8001378 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe f8e4 	bl	8001378 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e087      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	491b      	ldr	r1, [pc, #108]	; (800325c <HAL_RCC_OscConfig+0x470>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x478>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe f8bd 	bl	8001378 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003202:	f7fe f8b9 	bl	8001378 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e05c      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x416>
 8003220:	e054      	b.n	80032cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <HAL_RCC_OscConfig+0x478>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe f8a6 	bl	8001378 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe f8a2 	bl	8001378 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e045      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_RCC_OscConfig+0x470>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x444>
 800324e:	e03d      	b.n	80032cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e038      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
 800325c:	40023800 	.word	0x40023800
 8003260:	40007000 	.word	0x40007000
 8003264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x4ec>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d028      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d121      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d11a      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003298:	4013      	ands	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800329e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d111      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	3b01      	subs	r3, #1
 80032b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800

080032dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0cc      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f0:	4b68      	ldr	r3, [pc, #416]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d90c      	bls.n	8003318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b63      	ldr	r3, [pc, #396]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0b8      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003330:	4b59      	ldr	r3, [pc, #356]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a58      	ldr	r2, [pc, #352]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800333a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a52      	ldr	r2, [pc, #328]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	494d      	ldr	r1, [pc, #308]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d044      	beq.n	80033fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d119      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e07f      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d003      	beq.n	800339a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003396:	2b03      	cmp	r3, #3
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339a:	4b3f      	ldr	r3, [pc, #252]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e06f      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e067      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ba:	4b37      	ldr	r3, [pc, #220]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4934      	ldr	r1, [pc, #208]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033cc:	f7fd ffd4 	bl	8001378 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7fd ffd0 	bl	8001378 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e04f      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 020c 	and.w	r2, r3, #12
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d1eb      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033fc:	4b25      	ldr	r3, [pc, #148]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d20c      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b22      	ldr	r3, [pc, #136]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e032      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4916      	ldr	r1, [pc, #88]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344e:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	490e      	ldr	r1, [pc, #56]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003462:	f000 f821 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8003466:	4602      	mov	r2, r0
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	490a      	ldr	r1, [pc, #40]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	5ccb      	ldrb	r3, [r1, r3]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd ff34 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023c00 	.word	0x40023c00
 8003498:	40023800 	.word	0x40023800
 800349c:	08004fb4 	.word	0x08004fb4
 80034a0:	20000008 	.word	0x20000008
 80034a4:	2000000c 	.word	0x2000000c

080034a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ac:	b094      	sub	sp, #80	; 0x50
 80034ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	647b      	str	r3, [r7, #68]	; 0x44
 80034b4:	2300      	movs	r3, #0
 80034b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034b8:	2300      	movs	r3, #0
 80034ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c0:	4b79      	ldr	r3, [pc, #484]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d00d      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x40>
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	f200 80e1 	bhi.w	8003694 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x34>
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034da:	e0db      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034dc:	4b73      	ldr	r3, [pc, #460]	; (80036ac <HAL_RCC_GetSysClockFreq+0x204>)
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034e0:	e0db      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034e2:	4b73      	ldr	r3, [pc, #460]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80034e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034e6:	e0d8      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e8:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f2:	4b6d      	ldr	r3, [pc, #436]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d063      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	2200      	movs	r2, #0
 8003506:	63bb      	str	r3, [r7, #56]	; 0x38
 8003508:	63fa      	str	r2, [r7, #60]	; 0x3c
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
 8003512:	2300      	movs	r3, #0
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
 8003516:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800351a:	4622      	mov	r2, r4
 800351c:	462b      	mov	r3, r5
 800351e:	f04f 0000 	mov.w	r0, #0
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	0159      	lsls	r1, r3, #5
 8003528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800352c:	0150      	lsls	r0, r2, #5
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4621      	mov	r1, r4
 8003534:	1a51      	subs	r1, r2, r1
 8003536:	6139      	str	r1, [r7, #16]
 8003538:	4629      	mov	r1, r5
 800353a:	eb63 0301 	sbc.w	r3, r3, r1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800354c:	4659      	mov	r1, fp
 800354e:	018b      	lsls	r3, r1, #6
 8003550:	4651      	mov	r1, sl
 8003552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003556:	4651      	mov	r1, sl
 8003558:	018a      	lsls	r2, r1, #6
 800355a:	4651      	mov	r1, sl
 800355c:	ebb2 0801 	subs.w	r8, r2, r1
 8003560:	4659      	mov	r1, fp
 8003562:	eb63 0901 	sbc.w	r9, r3, r1
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800357a:	4690      	mov	r8, r2
 800357c:	4699      	mov	r9, r3
 800357e:	4623      	mov	r3, r4
 8003580:	eb18 0303 	adds.w	r3, r8, r3
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	462b      	mov	r3, r5
 8003588:	eb49 0303 	adc.w	r3, r9, r3
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800359a:	4629      	mov	r1, r5
 800359c:	024b      	lsls	r3, r1, #9
 800359e:	4621      	mov	r1, r4
 80035a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035a4:	4621      	mov	r1, r4
 80035a6:	024a      	lsls	r2, r1, #9
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ae:	2200      	movs	r2, #0
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035b8:	f7fc fe06 	bl	80001c8 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4613      	mov	r3, r2
 80035c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c4:	e058      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c6:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	2200      	movs	r2, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	4611      	mov	r1, r2
 80035d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035d6:	623b      	str	r3, [r7, #32]
 80035d8:	2300      	movs	r3, #0
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
 80035dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	f04f 0000 	mov.w	r0, #0
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	0159      	lsls	r1, r3, #5
 80035ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f2:	0150      	lsls	r0, r2, #5
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4641      	mov	r1, r8
 80035fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80035fe:	4649      	mov	r1, r9
 8003600:	eb63 0b01 	sbc.w	fp, r3, r1
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003610:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003614:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003618:	ebb2 040a 	subs.w	r4, r2, sl
 800361c:	eb63 050b 	sbc.w	r5, r3, fp
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	00eb      	lsls	r3, r5, #3
 800362a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800362e:	00e2      	lsls	r2, r4, #3
 8003630:	4614      	mov	r4, r2
 8003632:	461d      	mov	r5, r3
 8003634:	4643      	mov	r3, r8
 8003636:	18e3      	adds	r3, r4, r3
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	464b      	mov	r3, r9
 800363c:	eb45 0303 	adc.w	r3, r5, r3
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800364e:	4629      	mov	r1, r5
 8003650:	028b      	lsls	r3, r1, #10
 8003652:	4621      	mov	r1, r4
 8003654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003658:	4621      	mov	r1, r4
 800365a:	028a      	lsls	r2, r1, #10
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003662:	2200      	movs	r2, #0
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	61fa      	str	r2, [r7, #28]
 8003668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800366c:	f7fc fdac 	bl	80001c8 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4613      	mov	r3, r2
 8003676:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	3301      	adds	r3, #1
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800368a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003692:	e002      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003696:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800369c:	4618      	mov	r0, r3
 800369e:	3750      	adds	r7, #80	; 0x50
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	00f42400 	.word	0x00f42400
 80036b0:	007a1200 	.word	0x007a1200

080036b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000008 	.word	0x20000008

080036cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d0:	f7ff fff0 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	0a9b      	lsrs	r3, r3, #10
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	08004fc4 	.word	0x08004fc4

080036f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036f8:	f7ff ffdc 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0b5b      	lsrs	r3, r3, #13
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	; (8003718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	08004fc4 	.word	0x08004fc4

0800371c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07b      	b.n	8003826 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800373e:	d009      	beq.n	8003754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	61da      	str	r2, [r3, #28]
 8003746:	e005      	b.n	8003754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fba0 	bl	8000eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	ea42 0103 	orr.w	r1, r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	f003 0104 	and.w	r1, r3, #4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f003 0210 	and.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003814:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e03f      	b.n	80038c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fd fb75 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2224      	movs	r2, #36	; 0x24
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003870:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fd1a 	bl	80042ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003886:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003896:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d130      	bne.n	8003944 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_UART_Transmit_IT+0x26>
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e029      	b.n	8003946 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_UART_Transmit_IT+0x38>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e022      	b.n	8003946 <HAL_UART_Transmit_IT+0x7e>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	88fa      	ldrh	r2, [r7, #6]
 8003918:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2221      	movs	r2, #33	; 0x21
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800393e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b20      	cmp	r3, #32
 800396a:	d11d      	bne.n	80039a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_UART_Receive_IT+0x26>
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e016      	b.n	80039aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_UART_Receive_IT+0x38>
 8003986:	2302      	movs	r3, #2
 8003988:	e00f      	b.n	80039aa <HAL_UART_Receive_IT+0x58>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	461a      	mov	r2, r3
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 faac 	bl	8003efc <UART_Start_Receive_IT>
 80039a4:	4603      	mov	r3, r0
 80039a6:	e000      	b.n	80039aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b0ba      	sub	sp, #232	; 0xe8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_UART_IRQHandler+0x66>
 8003a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fb8f 	bl	8004136 <UART_Receive_IT>
      return;
 8003a18:	e256      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80de 	beq.w	8003be0 <HAL_UART_IRQHandler+0x22c>
 8003a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80d1 	beq.w	8003be0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_UART_IRQHandler+0xae>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
 8003a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_UART_IRQHandler+0xf6>
 8003a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d011      	beq.n	8003ada <HAL_UART_IRQHandler+0x126>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0208 	orr.w	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 81ed 	beq.w	8003ebe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_UART_IRQHandler+0x14e>
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fb1a 	bl	8004136 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_UART_IRQHandler+0x17a>
 8003b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d04f      	beq.n	8003bce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa22 	bl	8003f78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d141      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3314      	adds	r3, #20
 8003b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1d9      	bne.n	8003b42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d013      	beq.n	8003bbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	4a7d      	ldr	r2, [pc, #500]	; (8003d90 <HAL_UART_IRQHandler+0x3dc>)
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fd99 	bl	80016da <HAL_DMA_Abort_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	e00e      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f986 	bl	8003ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	e00a      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f982 	bl	8003ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bcc:	e006      	b.n	8003bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f97e 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bda:	e170      	b.n	8003ebe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	bf00      	nop
    return;
 8003bde:	e16e      	b.n	8003ebe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f040 814a 	bne.w	8003e7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8143 	beq.w	8003e7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 813c 	beq.w	8003e7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	f040 80b4 	bne.w	8003d94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8140 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	f080 8139 	bcs.w	8003ec2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c62:	f000 8088 	beq.w	8003d76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1d9      	bne.n	8003c66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e1      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e3      	bne.n	8003cee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d58:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e3      	bne.n	8003d34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fd fc42 	bl	80015fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8ac 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d8c:	e099      	b.n	8003ec2 <HAL_UART_IRQHandler+0x50e>
 8003d8e:	bf00      	nop
 8003d90:	0800403f 	.word	0x0800403f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 808b 	beq.w	8003ec6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8086 	beq.w	8003ec6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dde:	647a      	str	r2, [r7, #68]	; 0x44
 8003de0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e3      	bne.n	8003dba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	623b      	str	r3, [r7, #32]
   return(result);
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e16:	633a      	str	r2, [r7, #48]	; 0x30
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e3      	bne.n	8003df2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0310 	bic.w	r3, r3, #16
 8003e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e5c:	61fa      	str	r2, [r7, #28]
 8003e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	69b9      	ldr	r1, [r7, #24]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	617b      	str	r3, [r7, #20]
   return(result);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e3      	bne.n	8003e38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f834 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e7c:	e023      	b.n	8003ec6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_UART_IRQHandler+0x4ea>
 8003e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f8e5 	bl	8004066 <UART_Transmit_IT>
    return;
 8003e9c:	e014      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x514>
 8003eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f925 	bl	8004106 <UART_EndTransmit_IT>
    return;
 8003ebc:	e004      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
    return;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ec6:	bf00      	nop
  }
}
 8003ec8:	37e8      	adds	r7, #232	; 0xe8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop

08003ed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	88fa      	ldrh	r2, [r7, #6]
 8003f14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2222      	movs	r2, #34	; 0x22
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0201 	orr.w	r2, r2, #1
 8003f58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0220 	orr.w	r2, r2, #32
 8003f68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b095      	sub	sp, #84	; 0x54
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa0:	643a      	str	r2, [r7, #64]	; 0x40
 8003fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d119      	bne.n	8004024 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f023 0310 	bic.w	r3, r3, #16
 8004006:	647b      	str	r3, [r7, #68]	; 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004010:	61ba      	str	r2, [r7, #24]
 8004012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6979      	ldr	r1, [r7, #20]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	613b      	str	r3, [r7, #16]
   return(result);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e5      	bne.n	8003ff0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004032:	bf00      	nop
 8004034:	3754      	adds	r7, #84	; 0x54
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f7ff ff39 	bl	8003ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b21      	cmp	r3, #33	; 0x21
 8004078:	d13e      	bne.n	80040f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004082:	d114      	bne.n	80040ae <UART_Transmit_IT+0x48>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d110      	bne.n	80040ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	1c9a      	adds	r2, r3, #2
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	621a      	str	r2, [r3, #32]
 80040ac:	e008      	b.n	80040c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	1c59      	adds	r1, r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6211      	str	r1, [r2, #32]
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4619      	mov	r1, r3
 80040ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10f      	bne.n	80040f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fc fbee 	bl	8000908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b08c      	sub	sp, #48	; 0x30
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b22      	cmp	r3, #34	; 0x22
 8004148:	f040 80ab 	bne.w	80042a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d117      	bne.n	8004186 <UART_Receive_IT+0x50>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d113      	bne.n	8004186 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004174:	b29a      	uxth	r2, r3
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	1c9a      	adds	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
 8004184:	e026      	b.n	80041d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004198:	d007      	beq.n	80041aa <UART_Receive_IT+0x74>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <UART_Receive_IT+0x82>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e008      	b.n	80041ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29b      	uxth	r3, r3
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4619      	mov	r1, r3
 80041e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d15a      	bne.n	800429e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0220 	bic.w	r2, r2, #32
 80041f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	2b01      	cmp	r3, #1
 8004226:	d135      	bne.n	8004294 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	613b      	str	r3, [r7, #16]
   return(result);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f023 0310 	bic.w	r3, r3, #16
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	623a      	str	r2, [r7, #32]
 8004250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	69f9      	ldr	r1, [r7, #28]
 8004254:	6a3a      	ldr	r2, [r7, #32]
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	61bb      	str	r3, [r7, #24]
   return(result);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e5      	bne.n	800422e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b10      	cmp	r3, #16
 800426e:	d10a      	bne.n	8004286 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff fe29 	bl	8003ee4 <HAL_UARTEx_RxEventCallback>
 8004292:	e002      	b.n	800429a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fc fb05 	bl	80008a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e002      	b.n	80042a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3730      	adds	r7, #48	; 0x30
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b0:	b0c0      	sub	sp, #256	; 0x100
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	68d9      	ldr	r1, [r3, #12]
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	ea40 0301 	orr.w	r3, r0, r1
 80042d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004304:	f021 010c 	bic.w	r1, r1, #12
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004312:	430b      	orrs	r3, r1
 8004314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004326:	6999      	ldr	r1, [r3, #24]
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	ea40 0301 	orr.w	r3, r0, r1
 8004332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b8f      	ldr	r3, [pc, #572]	; (8004578 <UART_SetConfig+0x2cc>)
 800433c:	429a      	cmp	r2, r3
 800433e:	d005      	beq.n	800434c <UART_SetConfig+0xa0>
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b8d      	ldr	r3, [pc, #564]	; (800457c <UART_SetConfig+0x2d0>)
 8004348:	429a      	cmp	r2, r3
 800434a:	d104      	bne.n	8004356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800434c:	f7ff f9d2 	bl	80036f4 <HAL_RCC_GetPCLK2Freq>
 8004350:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004354:	e003      	b.n	800435e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004356:	f7ff f9b9 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 800435a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	f040 810c 	bne.w	8004584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800436c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004370:	2200      	movs	r2, #0
 8004372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004376:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800437a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800437e:	4622      	mov	r2, r4
 8004380:	462b      	mov	r3, r5
 8004382:	1891      	adds	r1, r2, r2
 8004384:	65b9      	str	r1, [r7, #88]	; 0x58
 8004386:	415b      	adcs	r3, r3
 8004388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800438a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800438e:	4621      	mov	r1, r4
 8004390:	eb12 0801 	adds.w	r8, r2, r1
 8004394:	4629      	mov	r1, r5
 8004396:	eb43 0901 	adc.w	r9, r3, r1
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ae:	4690      	mov	r8, r2
 80043b0:	4699      	mov	r9, r3
 80043b2:	4623      	mov	r3, r4
 80043b4:	eb18 0303 	adds.w	r3, r8, r3
 80043b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043bc:	462b      	mov	r3, r5
 80043be:	eb49 0303 	adc.w	r3, r9, r3
 80043c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043da:	460b      	mov	r3, r1
 80043dc:	18db      	adds	r3, r3, r3
 80043de:	653b      	str	r3, [r7, #80]	; 0x50
 80043e0:	4613      	mov	r3, r2
 80043e2:	eb42 0303 	adc.w	r3, r2, r3
 80043e6:	657b      	str	r3, [r7, #84]	; 0x54
 80043e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043f0:	f7fb feea 	bl	80001c8 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4b61      	ldr	r3, [pc, #388]	; (8004580 <UART_SetConfig+0x2d4>)
 80043fa:	fba3 2302 	umull	r2, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	011c      	lsls	r4, r3, #4
 8004402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800440c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004414:	4642      	mov	r2, r8
 8004416:	464b      	mov	r3, r9
 8004418:	1891      	adds	r1, r2, r2
 800441a:	64b9      	str	r1, [r7, #72]	; 0x48
 800441c:	415b      	adcs	r3, r3
 800441e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004424:	4641      	mov	r1, r8
 8004426:	eb12 0a01 	adds.w	sl, r2, r1
 800442a:	4649      	mov	r1, r9
 800442c:	eb43 0b01 	adc.w	fp, r3, r1
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800443c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004444:	4692      	mov	sl, r2
 8004446:	469b      	mov	fp, r3
 8004448:	4643      	mov	r3, r8
 800444a:	eb1a 0303 	adds.w	r3, sl, r3
 800444e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004452:	464b      	mov	r3, r9
 8004454:	eb4b 0303 	adc.w	r3, fp, r3
 8004458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004468:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800446c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004470:	460b      	mov	r3, r1
 8004472:	18db      	adds	r3, r3, r3
 8004474:	643b      	str	r3, [r7, #64]	; 0x40
 8004476:	4613      	mov	r3, r2
 8004478:	eb42 0303 	adc.w	r3, r2, r3
 800447c:	647b      	str	r3, [r7, #68]	; 0x44
 800447e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004486:	f7fb fe9f 	bl	80001c8 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4611      	mov	r1, r2
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <UART_SetConfig+0x2d4>)
 8004492:	fba3 2301 	umull	r2, r3, r3, r1
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2264      	movs	r2, #100	; 0x64
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	1acb      	subs	r3, r1, r3
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <UART_SetConfig+0x2d4>)
 80044a8:	fba3 2302 	umull	r2, r3, r3, r2
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044b4:	441c      	add	r4, r3
 80044b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	1891      	adds	r1, r2, r2
 80044ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80044d0:	415b      	adcs	r3, r3
 80044d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044d8:	4641      	mov	r1, r8
 80044da:	1851      	adds	r1, r2, r1
 80044dc:	6339      	str	r1, [r7, #48]	; 0x30
 80044de:	4649      	mov	r1, r9
 80044e0:	414b      	adcs	r3, r1
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044f0:	4659      	mov	r1, fp
 80044f2:	00cb      	lsls	r3, r1, #3
 80044f4:	4651      	mov	r1, sl
 80044f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fa:	4651      	mov	r1, sl
 80044fc:	00ca      	lsls	r2, r1, #3
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	4603      	mov	r3, r0
 8004504:	4642      	mov	r2, r8
 8004506:	189b      	adds	r3, r3, r2
 8004508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800450c:	464b      	mov	r3, r9
 800450e:	460a      	mov	r2, r1
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004524:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800452c:	460b      	mov	r3, r1
 800452e:	18db      	adds	r3, r3, r3
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
 8004532:	4613      	mov	r3, r2
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800453e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004542:	f7fb fe41 	bl	80001c8 <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <UART_SetConfig+0x2d4>)
 800454c:	fba3 1302 	umull	r1, r3, r3, r2
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	2164      	movs	r1, #100	; 0x64
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	3332      	adds	r3, #50	; 0x32
 800455e:	4a08      	ldr	r2, [pc, #32]	; (8004580 <UART_SetConfig+0x2d4>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	f003 0207 	and.w	r2, r3, #7
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4422      	add	r2, r4
 8004572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004574:	e105      	b.n	8004782 <UART_SetConfig+0x4d6>
 8004576:	bf00      	nop
 8004578:	40011000 	.word	0x40011000
 800457c:	40011400 	.word	0x40011400
 8004580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800458e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004596:	4642      	mov	r2, r8
 8004598:	464b      	mov	r3, r9
 800459a:	1891      	adds	r1, r2, r2
 800459c:	6239      	str	r1, [r7, #32]
 800459e:	415b      	adcs	r3, r3
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045a6:	4641      	mov	r1, r8
 80045a8:	1854      	adds	r4, r2, r1
 80045aa:	4649      	mov	r1, r9
 80045ac:	eb43 0501 	adc.w	r5, r3, r1
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	00eb      	lsls	r3, r5, #3
 80045ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045be:	00e2      	lsls	r2, r4, #3
 80045c0:	4614      	mov	r4, r2
 80045c2:	461d      	mov	r5, r3
 80045c4:	4643      	mov	r3, r8
 80045c6:	18e3      	adds	r3, r4, r3
 80045c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045cc:	464b      	mov	r3, r9
 80045ce:	eb45 0303 	adc.w	r3, r5, r3
 80045d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045f2:	4629      	mov	r1, r5
 80045f4:	008b      	lsls	r3, r1, #2
 80045f6:	4621      	mov	r1, r4
 80045f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fc:	4621      	mov	r1, r4
 80045fe:	008a      	lsls	r2, r1, #2
 8004600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004604:	f7fb fde0 	bl	80001c8 <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4b60      	ldr	r3, [pc, #384]	; (8004790 <UART_SetConfig+0x4e4>)
 800460e:	fba3 2302 	umull	r2, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	011c      	lsls	r4, r3, #4
 8004616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004628:	4642      	mov	r2, r8
 800462a:	464b      	mov	r3, r9
 800462c:	1891      	adds	r1, r2, r2
 800462e:	61b9      	str	r1, [r7, #24]
 8004630:	415b      	adcs	r3, r3
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004638:	4641      	mov	r1, r8
 800463a:	1851      	adds	r1, r2, r1
 800463c:	6139      	str	r1, [r7, #16]
 800463e:	4649      	mov	r1, r9
 8004640:	414b      	adcs	r3, r1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004650:	4659      	mov	r1, fp
 8004652:	00cb      	lsls	r3, r1, #3
 8004654:	4651      	mov	r1, sl
 8004656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465a:	4651      	mov	r1, sl
 800465c:	00ca      	lsls	r2, r1, #3
 800465e:	4610      	mov	r0, r2
 8004660:	4619      	mov	r1, r3
 8004662:	4603      	mov	r3, r0
 8004664:	4642      	mov	r2, r8
 8004666:	189b      	adds	r3, r3, r2
 8004668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800466c:	464b      	mov	r3, r9
 800466e:	460a      	mov	r2, r1
 8004670:	eb42 0303 	adc.w	r3, r2, r3
 8004674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	67bb      	str	r3, [r7, #120]	; 0x78
 8004682:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004690:	4649      	mov	r1, r9
 8004692:	008b      	lsls	r3, r1, #2
 8004694:	4641      	mov	r1, r8
 8004696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469a:	4641      	mov	r1, r8
 800469c:	008a      	lsls	r2, r1, #2
 800469e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046a2:	f7fb fd91 	bl	80001c8 <__aeabi_uldivmod>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4b39      	ldr	r3, [pc, #228]	; (8004790 <UART_SetConfig+0x4e4>)
 80046ac:	fba3 1302 	umull	r1, r3, r3, r2
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	2164      	movs	r1, #100	; 0x64
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	3332      	adds	r3, #50	; 0x32
 80046be:	4a34      	ldr	r2, [pc, #208]	; (8004790 <UART_SetConfig+0x4e4>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ca:	441c      	add	r4, r3
 80046cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d0:	2200      	movs	r2, #0
 80046d2:	673b      	str	r3, [r7, #112]	; 0x70
 80046d4:	677a      	str	r2, [r7, #116]	; 0x74
 80046d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046da:	4642      	mov	r2, r8
 80046dc:	464b      	mov	r3, r9
 80046de:	1891      	adds	r1, r2, r2
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	415b      	adcs	r3, r3
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ea:	4641      	mov	r1, r8
 80046ec:	1851      	adds	r1, r2, r1
 80046ee:	6039      	str	r1, [r7, #0]
 80046f0:	4649      	mov	r1, r9
 80046f2:	414b      	adcs	r3, r1
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004702:	4659      	mov	r1, fp
 8004704:	00cb      	lsls	r3, r1, #3
 8004706:	4651      	mov	r1, sl
 8004708:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800470c:	4651      	mov	r1, sl
 800470e:	00ca      	lsls	r2, r1, #3
 8004710:	4610      	mov	r0, r2
 8004712:	4619      	mov	r1, r3
 8004714:	4603      	mov	r3, r0
 8004716:	4642      	mov	r2, r8
 8004718:	189b      	adds	r3, r3, r2
 800471a:	66bb      	str	r3, [r7, #104]	; 0x68
 800471c:	464b      	mov	r3, r9
 800471e:	460a      	mov	r2, r1
 8004720:	eb42 0303 	adc.w	r3, r2, r3
 8004724:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	663b      	str	r3, [r7, #96]	; 0x60
 8004730:	667a      	str	r2, [r7, #100]	; 0x64
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800473e:	4649      	mov	r1, r9
 8004740:	008b      	lsls	r3, r1, #2
 8004742:	4641      	mov	r1, r8
 8004744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004748:	4641      	mov	r1, r8
 800474a:	008a      	lsls	r2, r1, #2
 800474c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004750:	f7fb fd3a 	bl	80001c8 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <UART_SetConfig+0x4e4>)
 800475a:	fba3 1302 	umull	r1, r3, r3, r2
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2164      	movs	r1, #100	; 0x64
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	3332      	adds	r3, #50	; 0x32
 800476c:	4a08      	ldr	r2, [pc, #32]	; (8004790 <UART_SetConfig+0x4e4>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	f003 020f 	and.w	r2, r3, #15
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4422      	add	r2, r4
 8004780:	609a      	str	r2, [r3, #8]
}
 8004782:	bf00      	nop
 8004784:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004788:	46bd      	mov	sp, r7
 800478a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478e:	bf00      	nop
 8004790:	51eb851f 	.word	0x51eb851f

08004794 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004794:	b084      	sub	sp, #16
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	f107 001c 	add.w	r0, r7, #28
 80047a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d122      	bne.n	80047f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f970 	bl	8004acc <USB_CoreReset>
 80047ec:	4603      	mov	r3, r0
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	e01a      	b.n	8004828 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f964 	bl	8004acc <USB_CoreReset>
 8004804:	4603      	mov	r3, r0
 8004806:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
 800481a:	e005      	b.n	8004828 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	2b01      	cmp	r3, #1
 800482c:	d10b      	bne.n	8004846 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f043 0206 	orr.w	r2, r3, #6
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004846:	7bfb      	ldrb	r3, [r7, #15]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004852:	b004      	add	sp, #16
 8004854:	4770      	bx	lr

08004856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 0201 	bic.w	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d115      	bne.n	80048c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048a6:	2001      	movs	r0, #1
 80048a8:	f7fc fd72 	bl	8001390 <HAL_Delay>
      ms++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3301      	adds	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8fb 	bl	8004aae <USB_GetMode>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d01e      	beq.n	80048fc <USB_SetCurrentMode+0x84>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b31      	cmp	r3, #49	; 0x31
 80048c2:	d9f0      	bls.n	80048a6 <USB_SetCurrentMode+0x2e>
 80048c4:	e01a      	b.n	80048fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d115      	bne.n	80048f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048d8:	2001      	movs	r0, #1
 80048da:	f7fc fd59 	bl	8001390 <HAL_Delay>
      ms++;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3301      	adds	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8e2 	bl	8004aae <USB_GetMode>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <USB_SetCurrentMode+0x84>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b31      	cmp	r3, #49	; 0x31
 80048f4:	d9f0      	bls.n	80048d8 <USB_SetCurrentMode+0x60>
 80048f6:	e001      	b.n	80048fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e005      	b.n	8004908 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b32      	cmp	r3, #50	; 0x32
 8004900:	d101      	bne.n	8004906 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a13      	ldr	r2, [pc, #76]	; (8004974 <USB_FlushTxFifo+0x64>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e01b      	b.n	8004968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	daf2      	bge.n	800491e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	019b      	lsls	r3, r3, #6
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3301      	adds	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a08      	ldr	r2, [pc, #32]	; (8004974 <USB_FlushTxFifo+0x64>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e006      	b.n	8004968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d0f0      	beq.n	8004948 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	00030d40 	.word	0x00030d40

08004978 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <USB_FlushRxFifo+0x5c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e018      	b.n	80049c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	daf2      	bge.n	8004984 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2210      	movs	r2, #16
 80049a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <USB_FlushRxFifo+0x5c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e006      	b.n	80049c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d0f0      	beq.n	80049a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	00030d40 	.word	0x00030d40

080049d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049d8:	b480      	push	{r7}
 80049da:	b08b      	sub	sp, #44	; 0x2c
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	089b      	lsrs	r3, r3, #2
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	e014      	b.n	8004a2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	3301      	adds	r3, #1
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	3301      	adds	r3, #1
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	3301      	adds	r3, #1
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	3301      	adds	r3, #1
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	623b      	str	r3, [r7, #32]
 8004a2e:	6a3a      	ldr	r2, [r7, #32]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d3e6      	bcc.n	8004a04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a36:	8bfb      	ldrh	r3, [r7, #30]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01e      	beq.n	8004a7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a46:	461a      	mov	r2, r3
 8004a48:	f107 0310 	add.w	r3, r7, #16
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	701a      	strb	r2, [r3, #0]
      i++;
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	3301      	adds	r3, #1
 8004a66:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a6e:	8bfb      	ldrh	r3, [r7, #30]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a74:	8bfb      	ldrh	r3, [r7, #30]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1ea      	bne.n	8004a50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	372c      	adds	r7, #44	; 0x2c
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0301 	and.w	r3, r3, #1
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3301      	adds	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <USB_CoreReset+0x64>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e01b      	b.n	8004b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	daf2      	bge.n	8004ad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f043 0201 	orr.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <USB_CoreReset+0x64>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e006      	b.n	8004b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d0f0      	beq.n	8004b02 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	00030d40 	.word	0x00030d40

08004b34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b34:	b084      	sub	sp, #16
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b54:	461a      	mov	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d018      	beq.n	8004bbc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10a      	bne.n	8004ba6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b9e:	f043 0304 	orr.w	r3, r3, #4
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e014      	b.n	8004bd0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e009      	b.n	8004bd0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bca:	f023 0304 	bic.w	r3, r3, #4
 8004bce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bd0:	2110      	movs	r1, #16
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fe9c 	bl	8004910 <USB_FlushTxFifo>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fec8 	bl	8004978 <USB_FlushRxFifo>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	e015      	b.n	8004c24 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c04:	461a      	mov	r2, r3
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3301      	adds	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3e5      	bcc.n	8004bf8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f04f 32ff 	mov.w	r2, #4294967295
 8004c38:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <USB_HostInit+0x16c>)
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <USB_HostInit+0x170>)
 8004c58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c5c:	e009      	b.n	8004c72 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a10      	ldr	r2, [pc, #64]	; (8004ca8 <USB_HostInit+0x174>)
 8004c68:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a0f      	ldr	r2, [pc, #60]	; (8004cac <USB_HostInit+0x178>)
 8004c6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f043 0210 	orr.w	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <USB_HostInit+0x17c>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c9c:	b004      	add	sp, #16
 8004c9e:	4770      	bx	lr
 8004ca0:	01000200 	.word	0x01000200
 8004ca4:	00e00300 	.word	0x00e00300
 8004ca8:	00600080 	.word	0x00600080
 8004cac:	004000e0 	.word	0x004000e0
 8004cb0:	a3200008 	.word	0xa3200008

08004cb4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cec:	4313      	orrs	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d02:	6053      	str	r3, [r2, #4]
 8004d04:	e009      	b.n	8004d1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d106      	bne.n	8004d1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d12:	461a      	mov	r2, r3
 8004d14:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	b29b      	uxth	r3, r3
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b089      	sub	sp, #36	; 0x24
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	0c9b      	lsrs	r3, r3, #18
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	0fdb      	lsrs	r3, r3, #31
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d104      	bne.n	8004da4 <USB_HC_Halt+0x5a>
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e0c8      	b.n	8004f36 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <USB_HC_Halt+0x66>
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d163      	bne.n	8004e78 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dce:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 80ab 	bne.w	8004f34 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d133      	bne.n	8004e52 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	0151      	lsls	r1, r2, #5
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	440a      	add	r2, r1
 8004e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e08:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	0151      	lsls	r1, r2, #5
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	440a      	add	r2, r1
 8004e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e28:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e36:	d81d      	bhi.n	8004e74 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e4e:	d0ec      	beq.n	8004e2a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e50:	e070      	b.n	8004f34 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e72:	e05f      	b.n	8004f34 <USB_HC_Halt+0x1ea>
            break;
 8004e74:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e76:	e05d      	b.n	8004f34 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e96:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d133      	bne.n	8004f10 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ec6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ee6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef4:	d81d      	bhi.n	8004f32 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0c:	d0ec      	beq.n	8004ee8 <USB_HC_Halt+0x19e>
 8004f0e:	e011      	b.n	8004f34 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	e000      	b.n	8004f34 <USB_HC_Halt+0x1ea>
          break;
 8004f32:	bf00      	nop
    }
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3724      	adds	r7, #36	; 0x24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <__libc_init_array>:
 8004f44:	b570      	push	{r4, r5, r6, lr}
 8004f46:	4d0d      	ldr	r5, [pc, #52]	; (8004f7c <__libc_init_array+0x38>)
 8004f48:	4c0d      	ldr	r4, [pc, #52]	; (8004f80 <__libc_init_array+0x3c>)
 8004f4a:	1b64      	subs	r4, r4, r5
 8004f4c:	10a4      	asrs	r4, r4, #2
 8004f4e:	2600      	movs	r6, #0
 8004f50:	42a6      	cmp	r6, r4
 8004f52:	d109      	bne.n	8004f68 <__libc_init_array+0x24>
 8004f54:	4d0b      	ldr	r5, [pc, #44]	; (8004f84 <__libc_init_array+0x40>)
 8004f56:	4c0c      	ldr	r4, [pc, #48]	; (8004f88 <__libc_init_array+0x44>)
 8004f58:	f000 f820 	bl	8004f9c <_init>
 8004f5c:	1b64      	subs	r4, r4, r5
 8004f5e:	10a4      	asrs	r4, r4, #2
 8004f60:	2600      	movs	r6, #0
 8004f62:	42a6      	cmp	r6, r4
 8004f64:	d105      	bne.n	8004f72 <__libc_init_array+0x2e>
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6c:	4798      	blx	r3
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7ee      	b.n	8004f50 <__libc_init_array+0xc>
 8004f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f76:	4798      	blx	r3
 8004f78:	3601      	adds	r6, #1
 8004f7a:	e7f2      	b.n	8004f62 <__libc_init_array+0x1e>
 8004f7c:	08004fd4 	.word	0x08004fd4
 8004f80:	08004fd4 	.word	0x08004fd4
 8004f84:	08004fd4 	.word	0x08004fd4
 8004f88:	08004fd8 	.word	0x08004fd8

08004f8c <memset>:
 8004f8c:	4402      	add	r2, r0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d100      	bne.n	8004f96 <memset+0xa>
 8004f94:	4770      	bx	lr
 8004f96:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9a:	e7f9      	b.n	8004f90 <memset+0x4>

08004f9c <_init>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_fini>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr
