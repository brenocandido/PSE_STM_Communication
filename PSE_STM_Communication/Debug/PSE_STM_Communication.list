
PSE_STM_Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db0  08004db0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db8  08004db8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000488  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000494  20000494  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddc6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd4  00000000  00000000  0002de02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0002fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a70  00000000  00000000  000306f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b10  00000000  00000000  00031160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdb7  00000000  00000000  00051c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c59f7  00000000  00000000  0005ea27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012441e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e88  00000000  00000000  00124470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d80 	.word	0x08004d80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d80 	.word	0x08004d80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MEMS_WriteReg>:
MEMS_Calibration_T calibration;

/* Private functions ---------------------------------------------------------*/

void MEMS_WriteReg(uint8_t addr, uint8_t *data, uint8_t size)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = addr;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	73fb      	strb	r3, [r7, #15]

	MEMS_CS_ENABLE;
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <MEMS_WriteReg+0x4c>)
 80004e6:	f001 f96d 	bl	80017c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_Handle, &spiReg, 1, 10);
 80004ea:	f107 010f 	add.w	r1, r7, #15
 80004ee:	230a      	movs	r3, #10
 80004f0:	2201      	movs	r2, #1
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <MEMS_WriteReg+0x50>)
 80004f4:	f003 f851 	bl	800359a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI_Handle, data, size, 10);
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	230a      	movs	r3, #10
 80004fe:	6839      	ldr	r1, [r7, #0]
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <MEMS_WriteReg+0x50>)
 8000502:	f003 f84a 	bl	800359a <HAL_SPI_Transmit>
	MEMS_CS_DISABLE;
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <MEMS_WriteReg+0x4c>)
 800050c:	f001 f95a 	bl	80017c4 <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000
 800051c:	20000028 	.word	0x20000028

08000520 <MEMS_ReadReg>:

void MEMS_ReadReg(uint8_t addr, uint8_t *data, uint8_t size)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = addr | 0x80;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000536:	b2db      	uxtb	r3, r3
 8000538:	723b      	strb	r3, [r7, #8]

	MEMS_CS_ENABLE;
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	4818      	ldr	r0, [pc, #96]	; (80005a0 <MEMS_ReadReg+0x80>)
 8000540:	f001 f940 	bl	80017c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_Handle, spiBuf, 1, 10);
 8000544:	f107 0108 	add.w	r1, r7, #8
 8000548:	230a      	movs	r3, #10
 800054a:	2201      	movs	r2, #1
 800054c:	4815      	ldr	r0, [pc, #84]	; (80005a4 <MEMS_ReadReg+0x84>)
 800054e:	f003 f824 	bl	800359a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_Handle, spiBuf, size, 10);
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	b29a      	uxth	r2, r3
 8000556:	f107 0108 	add.w	r1, r7, #8
 800055a:	230a      	movs	r3, #10
 800055c:	4811      	ldr	r0, [pc, #68]	; (80005a4 <MEMS_ReadReg+0x84>)
 800055e:	f003 f958 	bl	8003812 <HAL_SPI_Receive>
	MEMS_CS_DISABLE;
 8000562:	2201      	movs	r2, #1
 8000564:	2108      	movs	r1, #8
 8000566:	480e      	ldr	r0, [pc, #56]	; (80005a0 <MEMS_ReadReg+0x80>)
 8000568:	f001 f92c 	bl	80017c4 <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e00b      	b.n	800058a <MEMS_ReadReg+0x6a>
	{
		data[i] = spiBuf[i];
 8000572:	7bfa      	ldrb	r2, [r7, #15]
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	6839      	ldr	r1, [r7, #0]
 8000578:	440b      	add	r3, r1
 800057a:	3210      	adds	r2, #16
 800057c:	443a      	add	r2, r7
 800057e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000582:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	3301      	adds	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	429a      	cmp	r2, r3
 8000594:	dbed      	blt.n	8000572 <MEMS_ReadReg+0x52>
	}
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	20000028 	.word	0x20000028

080005a8 <selectSensitivity>:

void selectSensitivity(uint8_t fullScale)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	switch(fullScale)
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b20      	cmp	r3, #32
 80005b6:	d859      	bhi.n	800066c <selectSensitivity+0xc4>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <selectSensitivity+0x18>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	08000645 	.word	0x08000645
 80005c4:	0800066d 	.word	0x0800066d
 80005c8:	0800066d 	.word	0x0800066d
 80005cc:	0800066d 	.word	0x0800066d
 80005d0:	0800066d 	.word	0x0800066d
 80005d4:	0800066d 	.word	0x0800066d
 80005d8:	0800066d 	.word	0x0800066d
 80005dc:	0800066d 	.word	0x0800066d
 80005e0:	0800064d 	.word	0x0800064d
 80005e4:	0800066d 	.word	0x0800066d
 80005e8:	0800066d 	.word	0x0800066d
 80005ec:	0800066d 	.word	0x0800066d
 80005f0:	0800066d 	.word	0x0800066d
 80005f4:	0800066d 	.word	0x0800066d
 80005f8:	0800066d 	.word	0x0800066d
 80005fc:	0800066d 	.word	0x0800066d
 8000600:	08000655 	.word	0x08000655
 8000604:	0800066d 	.word	0x0800066d
 8000608:	0800066d 	.word	0x0800066d
 800060c:	0800066d 	.word	0x0800066d
 8000610:	0800066d 	.word	0x0800066d
 8000614:	0800066d 	.word	0x0800066d
 8000618:	0800066d 	.word	0x0800066d
 800061c:	0800066d 	.word	0x0800066d
 8000620:	0800065d 	.word	0x0800065d
 8000624:	0800066d 	.word	0x0800066d
 8000628:	0800066d 	.word	0x0800066d
 800062c:	0800066d 	.word	0x0800066d
 8000630:	0800066d 	.word	0x0800066d
 8000634:	0800066d 	.word	0x0800066d
 8000638:	0800066d 	.word	0x0800066d
 800063c:	0800066d 	.word	0x0800066d
 8000640:	08000665 	.word	0x08000665
	{
		case LIS3DSH_FSCALE_2:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <selectSensitivity+0xd0>)
 8000646:	4a0d      	ldr	r2, [pc, #52]	; (800067c <selectSensitivity+0xd4>)
 8000648:	601a      	str	r2, [r3, #0]
			break;
 800064a:	e00f      	b.n	800066c <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_4:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <selectSensitivity+0xd0>)
 800064e:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <selectSensitivity+0xd8>)
 8000650:	601a      	str	r2, [r3, #0]
			break;
 8000652:	e00b      	b.n	800066c <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_6:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <selectSensitivity+0xd0>)
 8000656:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <selectSensitivity+0xdc>)
 8000658:	601a      	str	r2, [r3, #0]
			break;
 800065a:	e007      	b.n	800066c <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_8:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <selectSensitivity+0xd0>)
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <selectSensitivity+0xe0>)
 8000660:	601a      	str	r2, [r3, #0]
			break;
 8000662:	e003      	b.n	800066c <selectSensitivity+0xc4>
		
		case LIS3DSH_FSCALE_16:
			mems_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <selectSensitivity+0xd0>)
 8000666:	4a09      	ldr	r2, [pc, #36]	; (800068c <selectSensitivity+0xe4>)
 8000668:	601a      	str	r2, [r3, #0]
			break;
 800066a:	bf00      	nop
	}
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	20000080 	.word	0x20000080
 800067c:	3d75c28f 	.word	0x3d75c28f
 8000680:	3df5c28f 	.word	0x3df5c28f
 8000684:	3e3851ec 	.word	0x3e3851ec
 8000688:	3e75c28f 	.word	0x3e75c28f
 800068c:	3f3ae148 	.word	0x3f3ae148

08000690 <MEMS_Init>:

void MEMS_Init(SPI_HandleTypeDef *extSPI_Handle, MEMS_Config_T *memsConfig)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	73fb      	strb	r3, [r7, #15]
	
	// Copy Handle from principal application
	memcpy(&SPI_Handle, extSPI_Handle, sizeof(*extSPI_Handle));
 800069e:	2258      	movs	r2, #88	; 0x58
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	482c      	ldr	r0, [pc, #176]	; (8000754 <MEMS_Init+0xc4>)
 80006a4:	f004 fb56 	bl	8004d54 <memcpy>

	// Init Configuration (Control Register 4)
		// Enable Axes
	spiData |= (memsConfig->enableAxes & LIS3DSH_AXES_MASK);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	789b      	ldrb	r3, [r3, #2]
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	b25a      	sxtb	r2, r3
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	73fb      	strb	r3, [r7, #15]
		// Output Data Rate
	spiData |= (memsConfig->dataRate & LIS3DSH_ODR_MASK);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	f023 030f 	bic.w	r3, r3, #15
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
	MEMS_WriteReg(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80006d8:	f107 030f 	add.w	r3, r7, #15
 80006dc:	2201      	movs	r2, #1
 80006de:	4619      	mov	r1, r3
 80006e0:	2020      	movs	r0, #32
 80006e2:	f7ff fef3 	bl	80004cc <MEMS_WriteReg>
	
	// Init Configuration (Control Register 5)
	spiData = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	73fb      	strb	r3, [r7, #15]
		// Full Scale
	spiData |= (memsConfig->fullScale & LIS3DSH_FSCALE_MASK);
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80006f4:	b25a      	sxtb	r2, r3
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
	MEMS_WriteReg(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000702:	f107 030f 	add.w	r3, r7, #15
 8000706:	2201      	movs	r2, #1
 8000708:	4619      	mov	r1, r3
 800070a:	2024      	movs	r0, #36	; 0x24
 800070c:	f7ff fede 	bl	80004cc <MEMS_WriteReg>
		// Select Sensitivity based in Full Scale
	selectSensitivity(memsConfig->fullScale);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff47 	bl	80005a8 <selectSensitivity>

	// Default Calibration
	calibration.x.Scale = 1.0f;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MEMS_Init+0xc8>)
 800071c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000720:	605a      	str	r2, [r3, #4]
	calibration.y.Scale = 1.0f;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MEMS_Init+0xc8>)
 8000724:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000728:	60da      	str	r2, [r3, #12]
	calibration.z.Scale = 1.0f;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MEMS_Init+0xc8>)
 800072c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000730:	615a      	str	r2, [r3, #20]

	calibration.x.Bias = 0.0f;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MEMS_Init+0xc8>)
 8000734:	f04f 0200 	mov.w	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
	calibration.x.Bias = 0.0f;
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MEMS_Init+0xc8>)
 800073c:	f04f 0200 	mov.w	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
	calibration.x.Bias = 0.0f;
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MEMS_Init+0xc8>)
 8000744:	f04f 0200 	mov.w	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000028 	.word	0x20000028
 8000758:	20000084 	.word	0x20000084

0800075c <MEMS_GetAxesData>:

int16_t MEMS_GetAxesData(uint8_t addr)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[2]; // Measure have MSB and LSB
	int16_t DataRaw;

	MEMS_ReadReg(addr, spiBuf, 2);
 8000766:	f107 010c 	add.w	r1, r7, #12
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2202      	movs	r2, #2
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fed6 	bl	8000520 <MEMS_ReadReg>
	DataRaw = ((spiBuf[1] << 8) + spiBuf[0]);
 8000774:	7b7b      	ldrb	r3, [r7, #13]
 8000776:	b29b      	uxth	r3, r3
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	b29a      	uxth	r2, r3
 800077c:	7b3b      	ldrb	r3, [r7, #12]
 800077e:	b29b      	uxth	r3, r3
 8000780:	4413      	add	r3, r2
 8000782:	b29b      	uxth	r3, r3
 8000784:	81fb      	strh	r3, [r7, #14]

	return DataRaw;
 8000786:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <MEMS_GetDataRaw>:

MEMS_DataRaw_T MEMS_GetDataRaw(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
	MEMS_DataRaw_T tempDataRaw;
	
	// Get XYZ data
	tempDataRaw.x = MEMS_GetAxesData(LIS3DSH_OUT_X_L_ADDR);
 800079a:	2028      	movs	r0, #40	; 0x28
 800079c:	f7ff ffde 	bl	800075c <MEMS_GetAxesData>
 80007a0:	4603      	mov	r3, r0
 80007a2:	813b      	strh	r3, [r7, #8]
	tempDataRaw.y = MEMS_GetAxesData(LIS3DSH_OUT_Y_L_ADDR);
 80007a4:	202a      	movs	r0, #42	; 0x2a
 80007a6:	f7ff ffd9 	bl	800075c <MEMS_GetAxesData>
 80007aa:	4603      	mov	r3, r0
 80007ac:	817b      	strh	r3, [r7, #10]
	tempDataRaw.z = MEMS_GetAxesData(LIS3DSH_OUT_Z_L_ADDR);
 80007ae:	202c      	movs	r0, #44	; 0x2c
 80007b0:	f7ff ffd4 	bl	800075c <MEMS_GetAxesData>
 80007b4:	4603      	mov	r3, r0
 80007b6:	81bb      	strh	r3, [r7, #12]

	return tempDataRaw;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	461a      	mov	r2, r3
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	6010      	str	r0, [r2, #0]
 80007c4:	889b      	ldrh	r3, [r3, #4]
 80007c6:	8093      	strh	r3, [r2, #4]
}
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <MEMS_GetDataScaled>:

MEMS_DataScaled_T MEMS_GetDataScaled(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
	// Read raw data
	MEMS_DataRaw_T tempRawData = MEMS_GetDataRaw();
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ffd9 	bl	8000792 <MEMS_GetDataRaw>
	
	// Scale
	MEMS_DataScaled_T tempScaledData;
	tempScaledData.x = (tempRawData.x * mems_Sensitivity * calibration.x.Scale) + 0.0f - calibration.x.Bias;
 80007e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80007e4:	ee07 3a90 	vmov	s15, r3
 80007e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ec:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <MEMS_GetDataScaled+0xe4>)
 80007ee:	edd3 7a00 	vldr	s15, [r3]
 80007f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <MEMS_GetDataScaled+0xe8>)
 80007f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80007fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000800:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80008bc <MEMS_GetDataScaled+0xec>
 8000804:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MEMS_GetDataScaled+0xe8>)
 800080a:	edd3 7a00 	vldr	s15, [r3]
 800080e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000812:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * mems_Sensitivity * calibration.y.Scale) + 0.0f - calibration.y.Bias;
 8000816:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <MEMS_GetDataScaled+0xe4>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MEMS_GetDataScaled+0xe8>)
 800082e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000836:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80008bc <MEMS_GetDataScaled+0xec>
 800083a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MEMS_GetDataScaled+0xe8>)
 8000840:	edd3 7a02 	vldr	s15, [r3, #8]
 8000844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000848:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * mems_Sensitivity * calibration.z.Scale) + 0.0f - calibration.z.Bias;
 800084c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000850:	ee07 3a90 	vmov	s15, r3
 8000854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MEMS_GetDataScaled+0xe4>)
 800085a:	edd3 7a00 	vldr	s15, [r3]
 800085e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MEMS_GetDataScaled+0xe8>)
 8000864:	edd3 7a05 	vldr	s15, [r3, #20]
 8000868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800086c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80008bc <MEMS_GetDataScaled+0xec>
 8000870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MEMS_GetDataScaled+0xe8>)
 8000876:	edd3 7a04 	vldr	s15, [r3, #16]
 800087a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800087e:	edc7 7a06 	vstr	s15, [r7, #24]
	
	return tempScaledData;
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	f107 0210 	add.w	r2, r7, #16
 800088a:	ca07      	ldmia	r2, {r0, r1, r2}
 800088c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000896:	ee06 1a90 	vmov	s13, r1
 800089a:	ee07 2a10 	vmov	s14, r2
 800089e:	ee07 3a90 	vmov	s15, r3
}
 80008a2:	eeb0 0a66 	vmov.f32	s0, s13
 80008a6:	eef0 0a47 	vmov.f32	s1, s14
 80008aa:	eeb0 1a67 	vmov.f32	s2, s15
 80008ae:	3730      	adds	r7, #48	; 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000080 	.word	0x20000080
 80008b8:	20000084 	.word	0x20000084
 80008bc:	00000000 	.word	0x00000000

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fc3a 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f82e 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 f942 	bl	8000b54 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008d0:	f000 f894 	bl	80009fc <MX_SPI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 80008d4:	f000 f91c 	bl	8000b10 <MX_USB_OTG_FS_HCD_Init>
  MX_UART4_Init();
 80008d8:	f000 f8c6 	bl	8000a68 <MX_UART4_Init>
  MX_UART5_Init();
 80008dc:	f000 f8ee 	bl	8000abc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // MEMS Configuration
  MEMSConfig.dataRate   = LIS3DSH_ODR_800;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <main+0x5c>)
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	701a      	strb	r2, [r3, #0]
  MEMSConfig.fullScale  = LIS3DSH_FSCALE_8;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <main+0x5c>)
 80008e8:	2218      	movs	r2, #24
 80008ea:	705a      	strb	r2, [r3, #1]
  MEMSConfig.enableAxes = LIS3DSH_XYZ_ENABLE;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <main+0x5c>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	709a      	strb	r2, [r3, #2]

  // MEMS Init
  MEMS_Init(&hspi1, &MEMSConfig);
 80008f2:	490a      	ldr	r1, [pc, #40]	; (800091c <main+0x5c>)
 80008f4:	480a      	ldr	r0, [pc, #40]	; (8000920 <main+0x60>)
 80008f6:	f7ff fecb 	bl	8000690 <MEMS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get MEMS Data
	  MEMSData = MEMS_GetDataScaled();
 80008fa:	f7ff ff69 	bl	80007d0 <MEMS_GetDataScaled>
 80008fe:	eef0 6a40 	vmov.f32	s13, s0
 8000902:	eeb0 7a60 	vmov.f32	s14, s1
 8000906:	eef0 7a41 	vmov.f32	s15, s2
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <main+0x64>)
 800090c:	edc3 6a00 	vstr	s13, [r3]
 8000910:	ed83 7a01 	vstr	s14, [r3, #4]
 8000914:	edc3 7a02 	vstr	s15, [r3, #8]
 8000918:	e7ef      	b.n	80008fa <main+0x3a>
 800091a:	bf00      	nop
 800091c:	200000a8 	.word	0x200000a8
 8000920:	200000ac 	.word	0x200000ac
 8000924:	2000009c 	.word	0x2000009c

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fa1a 	bl	8004d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a27      	ldr	r2, [pc, #156]	; (80009f4 <SystemClock_Config+0xcc>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <SystemClock_Config+0xd0>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000998:	2308      	movs	r3, #8
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800099c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a6:	2307      	movs	r3, #7
 80009a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 f8d2 	bl	8002b58 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ba:	f000 f9b9 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2105      	movs	r1, #5
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fb33 	bl	8003048 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009e8:	f000 f9a2 	bl	8000d30 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	; 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a4e:	f002 fd1b 	bl	8003488 <HAL_SPI_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a58:	f000 f96a 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000ac 	.word	0x200000ac
 8000a64:	40013000 	.word	0x40013000

08000a68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_UART4_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_UART4_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_UART4_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_UART4_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_UART4_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_UART4_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_UART4_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_UART4_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_UART4_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_UART4_Init+0x4c>)
 8000aa0:	f003 fa9a 	bl	8003fd8 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f941 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000104 	.word	0x20000104
 8000ab8:	40004c00 	.word	0x40004c00

08000abc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_UART5_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000af4:	f003 fa70 	bl	8003fd8 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f917 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000148 	.word	0x20000148
 8000b0c:	40005000 	.word	0x40005000

08000b10 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000b16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b1a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000b1e:	2208      	movs	r2, #8
 8000b20:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000b3c:	f000 fe5b 	bl	80017f6 <HAL_HCD_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000b46:	f000 f8f3 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000018c 	.word	0x2000018c

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	4b6a      	ldr	r3, [pc, #424]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a69      	ldr	r2, [pc, #420]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b67      	ldr	r3, [pc, #412]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0310 	and.w	r3, r3, #16
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	4b63      	ldr	r3, [pc, #396]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a62      	ldr	r2, [pc, #392]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b60      	ldr	r3, [pc, #384]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b5c      	ldr	r3, [pc, #368]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a5b      	ldr	r2, [pc, #364]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b59      	ldr	r3, [pc, #356]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a54      	ldr	r2, [pc, #336]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b52      	ldr	r3, [pc, #328]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a4d      	ldr	r2, [pc, #308]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a46      	ldr	r2, [pc, #280]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <MX_GPIO_Init+0x1c4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2108      	movs	r1, #8
 8000c16:	4841      	ldr	r0, [pc, #260]	; (8000d1c <MX_GPIO_Init+0x1c8>)
 8000c18:	f000 fdd4 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2101      	movs	r1, #1
 8000c20:	483f      	ldr	r0, [pc, #252]	; (8000d20 <MX_GPIO_Init+0x1cc>)
 8000c22:	f000 fdcf 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c2c:	483d      	ldr	r0, [pc, #244]	; (8000d24 <MX_GPIO_Init+0x1d0>)
 8000c2e:	f000 fdc9 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c32:	2308      	movs	r3, #8
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4834      	ldr	r0, [pc, #208]	; (8000d1c <MX_GPIO_Init+0x1c8>)
 8000c4a:	f000 fc1f 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	482e      	ldr	r0, [pc, #184]	; (8000d20 <MX_GPIO_Init+0x1cc>)
 8000c66:	f000 fc11 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c6e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	482a      	ldr	r0, [pc, #168]	; (8000d28 <MX_GPIO_Init+0x1d4>)
 8000c80:	f000 fc04 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c84:	2304      	movs	r3, #4
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4825      	ldr	r0, [pc, #148]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000c98:	f000 fbf8 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481c      	ldr	r0, [pc, #112]	; (8000d2c <MX_GPIO_Init+0x1d8>)
 8000cba:	f000 fbe7 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000cbe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4813      	ldr	r0, [pc, #76]	; (8000d24 <MX_GPIO_Init+0x1d0>)
 8000cd8:	f000 fbd8 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cdc:	2320      	movs	r3, #32
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MX_GPIO_Init+0x1d0>)
 8000cf0:	f000 fbcc 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_GPIO_Init+0x1c8>)
 8000d0a:	f000 fbbf 	bl	800148c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0e:	bf00      	nop
 8000d10:	3730      	adds	r7, #48	; 0x30
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020c00 	.word	0x40020c00
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020400 	.word	0x40020400

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7a:	2007      	movs	r0, #7
 8000d7c:	f000 fb44 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_SPI_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12b      	bne.n	8000e06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000de6:	23e0      	movs	r3, #224	; 0xe0
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df6:	2305      	movs	r3, #5
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_SPI_MspInit+0x8c>)
 8000e02:	f000 fb43 	bl	800148c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40013000 	.word	0x40013000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a51      	ldr	r2, [pc, #324]	; (8000f80 <HAL_UART_MspInit+0x164>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d14b      	bne.n	8000ed6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
 8000e42:	4b50      	ldr	r3, [pc, #320]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a4f      	ldr	r2, [pc, #316]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000e48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e56:	623b      	str	r3, [r7, #32]
 8000e58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	4b49      	ldr	r3, [pc, #292]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	4b42      	ldr	r3, [pc, #264]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a41      	ldr	r2, [pc, #260]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e92:	2302      	movs	r3, #2
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4836      	ldr	r0, [pc, #216]	; (8000f88 <HAL_UART_MspInit+0x16c>)
 8000eae:	f000 faed 	bl	800148c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	482f      	ldr	r0, [pc, #188]	; (8000f8c <HAL_UART_MspInit+0x170>)
 8000ed0:	f000 fadc 	bl	800148c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000ed4:	e04f      	b.n	8000f76 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==UART5)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <HAL_UART_MspInit+0x174>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d14a      	bne.n	8000f76 <HAL_UART_MspInit+0x15a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	6313      	str	r3, [r2, #48]	; 0x30
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_UART_MspInit+0x168>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f46:	2308      	movs	r3, #8
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <HAL_UART_MspInit+0x170>)
 8000f52:	f000 fa9b 	bl	800148c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f56:	2304      	movs	r3, #4
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f66:	2308      	movs	r3, #8
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <HAL_UART_MspInit+0x178>)
 8000f72:	f000 fa8b 	bl	800148c <HAL_GPIO_Init>
}
 8000f76:	bf00      	nop
 8000f78:	3738      	adds	r7, #56	; 0x38
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40004c00 	.word	0x40004c00
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40005000 	.word	0x40005000
 8000f94:	40020c00 	.word	0x40020c00

08000f98 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fb8:	d147      	bne.n	800104a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <HAL_HCD_MspInit+0xc0>)
 8000fec:	f000 fa4e 	bl	800148c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ff0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001002:	230a      	movs	r3, #10
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4812      	ldr	r0, [pc, #72]	; (8001058 <HAL_HCD_MspInit+0xc0>)
 800100e:	f000 fa3d 	bl	800148c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6353      	str	r3, [r2, #52]	; 0x34
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_HCD_MspInit+0xbc>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2043      	movs	r0, #67	; 0x43
 8001040:	f000 f9ed 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001044:	2043      	movs	r0, #67	; 0x43
 8001046:	f000 fa06 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f89a 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <OTG_FS_IRQHandler+0x10>)
 80010b6:	f000 fc00 	bl	80018ba <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000018c 	.word	0x2000018c

080010c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ee:	490e      	ldr	r1, [pc, #56]	; (8001128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001104:	4c0b      	ldr	r4, [pc, #44]	; (8001134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001112:	f7ff ffd7 	bl	80010c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f003 fdf9 	bl	8004d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fbd1 	bl	80008c0 <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800112c:	08004dc0 	.word	0x08004dc0
  ldr r2, =_sbss
 8001130:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001134:	20000494 	.word	0x20000494

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_Init+0x40>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_Init+0x40>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x40>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f94f 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fde4 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f967 	bl	8001472 <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f92f 	bl	800141e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	20000490 	.word	0x20000490

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000490 	.word	0x20000490

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	; (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff3e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff31 	bl	80012cc <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e16b      	b.n	8001780 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f040 815a 	bne.w	800177a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d005      	beq.n	80014de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d130      	bne.n	8001540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 0201 	and.w	r2, r3, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b03      	cmp	r3, #3
 800154a:	d017      	beq.n	800157c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d123      	bne.n	80015d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220f      	movs	r2, #15
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0203 	and.w	r2, r3, #3
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80b4 	beq.w	800177a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b60      	ldr	r3, [pc, #384]	; (8001798 <HAL_GPIO_Init+0x30c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a5f      	ldr	r2, [pc, #380]	; (8001798 <HAL_GPIO_Init+0x30c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <HAL_GPIO_Init+0x30c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162e:	4a5b      	ldr	r2, [pc, #364]	; (800179c <HAL_GPIO_Init+0x310>)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_GPIO_Init+0x314>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d02b      	beq.n	80016b2 <HAL_GPIO_Init+0x226>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a51      	ldr	r2, [pc, #324]	; (80017a4 <HAL_GPIO_Init+0x318>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d025      	beq.n	80016ae <HAL_GPIO_Init+0x222>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a50      	ldr	r2, [pc, #320]	; (80017a8 <HAL_GPIO_Init+0x31c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d01f      	beq.n	80016aa <HAL_GPIO_Init+0x21e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4f      	ldr	r2, [pc, #316]	; (80017ac <HAL_GPIO_Init+0x320>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d019      	beq.n	80016a6 <HAL_GPIO_Init+0x21a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4e      	ldr	r2, [pc, #312]	; (80017b0 <HAL_GPIO_Init+0x324>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0x216>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4d      	ldr	r2, [pc, #308]	; (80017b4 <HAL_GPIO_Init+0x328>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00d      	beq.n	800169e <HAL_GPIO_Init+0x212>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <HAL_GPIO_Init+0x32c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d007      	beq.n	800169a <HAL_GPIO_Init+0x20e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4b      	ldr	r2, [pc, #300]	; (80017bc <HAL_GPIO_Init+0x330>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_GPIO_Init+0x20a>
 8001692:	2307      	movs	r3, #7
 8001694:	e00e      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 8001696:	2308      	movs	r3, #8
 8001698:	e00c      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 800169a:	2306      	movs	r3, #6
 800169c:	e00a      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 800169e:	2305      	movs	r3, #5
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x228>
 80016b2:	2300      	movs	r3, #0
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x310>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_GPIO_Init+0x334>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f6:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <HAL_GPIO_Init+0x334>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_GPIO_Init+0x334>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_GPIO_Init+0x334>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_GPIO_Init+0x334>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174a:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_GPIO_Init+0x334>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_GPIO_Init+0x334>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_GPIO_Init+0x334>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	f67f ae90 	bls.w	80014a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40021400 	.word	0x40021400
 80017b8:	40021800 	.word	0x40021800
 80017bc:	40021c00 	.word	0x40021c00
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f8:	b08f      	sub	sp, #60	; 0x3c
 80017fa:	af0a      	add	r7, sp, #40	; 0x28
 80017fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e054      	b.n	80018b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fbb8 	bl	8000f98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2203      	movs	r2, #3
 800182c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fee9 	bl	800461e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	687e      	ldr	r6, [r7, #4]
 8001854:	466d      	mov	r5, sp
 8001856:	f106 0410 	add.w	r4, r6, #16
 800185a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001862:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001866:	e885 0003 	stmia.w	r5, {r0, r1}
 800186a:	1d33      	adds	r3, r6, #4
 800186c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f002 fe74 	bl	800455c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fee0 	bl	8004640 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	687e      	ldr	r6, [r7, #4]
 8001888:	466d      	mov	r5, sp
 800188a:	f106 0410 	add.w	r4, r6, #16
 800188e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001896:	e894 0003 	ldmia.w	r4, {r0, r1}
 800189a:	e885 0003 	stmia.w	r5, {r0, r1}
 800189e:	1d33      	adds	r3, r6, #4
 80018a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	f003 f82a 	bl	80048fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018ba <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 ffd0 	bl	8004876 <USB_GetMode>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b01      	cmp	r3, #1
 80018da:	f040 80f6 	bne.w	8001aca <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 ffb4 	bl	8004850 <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80ec 	beq.w	8001ac8 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 ffab 	bl	8004850 <USB_ReadInterrupts>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001904:	d104      	bne.n	8001910 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800190e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f002 ff9b 	bl	8004850 <USB_ReadInterrupts>
 800191a:	4603      	mov	r3, r0
 800191c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001924:	d104      	bne.n	8001930 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800192e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f002 ff8b 	bl	8004850 <USB_ReadInterrupts>
 800193a:	4603      	mov	r3, r0
 800193c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001944:	d104      	bne.n	8001950 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800194e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f002 ff7b 	bl	8004850 <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b02      	cmp	r3, #2
 8001962:	d103      	bne.n	800196c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2202      	movs	r2, #2
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 ff6d 	bl	8004850 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800197c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001980:	d11c      	bne.n	80019bc <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800198a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10f      	bne.n	80019bc <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800199c:	2110      	movs	r1, #16
 800199e:	6938      	ldr	r0, [r7, #16]
 80019a0:	f002 fe9a 	bl	80046d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019a4:	6938      	ldr	r0, [r7, #16]
 80019a6:	f002 fecb 	bl	8004740 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 f863 	bl	8004a7c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f89e 	bl	8001af8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 ff45 	bl	8004850 <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d102      	bne.n	80019d8 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f001 f84c 	bl	8002a70 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 ff37 	bl	8004850 <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d106      	bne.n	80019fa <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f86f 	bl	8001ad0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2208      	movs	r2, #8
 80019f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 ff26 	bl	8004850 <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d101      	bne.n	8001a12 <HAL_HCD_IRQHandler+0x158>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_HCD_IRQHandler+0x15a>
 8001a12:	2300      	movs	r3, #0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0210 	bic.w	r2, r2, #16
 8001a26:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 ff4f 	bl	80028cc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699a      	ldr	r2, [r3, #24]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0210 	orr.w	r2, r2, #16
 8001a3c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 ff04 	bl	8004850 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a52:	d13a      	bne.n	8001aca <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 f849 	bl	8004af0 <USB_HC_ReadInterrupt>
 8001a5e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e025      	b.n	8001ab2 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d018      	beq.n	8001aac <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a90:	d106      	bne.n	8001aa0 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f859 	bl	8001b50 <HCD_HC_IN_IRQHandler>
 8001a9e:	e005      	b.n	8001aac <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fba7 	bl	80021fa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3d4      	bcc.n	8001a66 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	e000      	b.n	8001aca <HAL_HCD_IRQHandler+0x210>
      return;
 8001ac8:	bf00      	nop
    }
  }
}
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
 8001b40:	4613      	mov	r3, r2
 8001b42:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d11a      	bne.n	8001bb6 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2304      	movs	r3, #4
 8001b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3361      	adds	r3, #97	; 0x61
 8001ba0:	2206      	movs	r2, #6
 8001ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 ffaf 	bl	8004b12 <USB_HC_Halt>
 8001bb4:	e0af      	b.n	8001d16 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bcc:	d11b      	bne.n	8001c06 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	3361      	adds	r3, #97	; 0x61
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 ff87 	bl	8004b12 <USB_HC_Halt>
 8001c04:	e087      	b.n	8001d16 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d109      	bne.n	8001c30 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	6093      	str	r3, [r2, #8]
 8001c2e:	e072      	b.n	8001d16 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d11a      	bne.n	8001c7c <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	461a      	mov	r2, r3
 8001c54:	2308      	movs	r3, #8
 8001c56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3361      	adds	r3, #97	; 0x61
 8001c66:	2205      	movs	r2, #5
 8001c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 ff4c 	bl	8004b12 <USB_HC_Halt>
 8001c7a:	e04c      	b.n	8001d16 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c92:	d11b      	bne.n	8001ccc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3361      	adds	r3, #97	; 0x61
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 ff24 	bl	8004b12 <USB_HC_Halt>
 8001cca:	e024      	b.n	8001d16 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	2b80      	cmp	r3, #128	; 0x80
 8001ce0:	d119      	bne.n	8001d16 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	212c      	movs	r1, #44	; 0x2c
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	3361      	adds	r3, #97	; 0x61
 8001d02:	2206      	movs	r2, #6
 8001d04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fefe 	bl	8004b12 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2c:	d112      	bne.n	8001d54 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 feea 	bl	8004b12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d50:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d52:	e24e      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	f040 80df 	bne.w	8001f2a <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d019      	beq.n	8001da8 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	212c      	movs	r1, #44	; 0x2c
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3348      	adds	r3, #72	; 0x48
 8001d82:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	0159      	lsls	r1, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001d96:	1ad2      	subs	r2, r2, r3
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	202c      	movs	r0, #44	; 0x2c
 8001d9e:	fb00 f303 	mul.w	r3, r0, r3
 8001da2:	440b      	add	r3, r1
 8001da4:	3350      	adds	r3, #80	; 0x50
 8001da6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	3361      	adds	r3, #97	; 0x61
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	335c      	adds	r3, #92	; 0x5c
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2301      	movs	r3, #1
 8001ddc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	333f      	adds	r3, #63	; 0x3f
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	333f      	adds	r3, #63	; 0x3f
 8001e00:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d111      	bne.n	8001e2a <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 fe7e 	bl	8004b12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	461a      	mov	r2, r3
 8001e24:	2310      	movs	r3, #16
 8001e26:	6093      	str	r3, [r2, #8]
 8001e28:	e03a      	b.n	8001ea0 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	212c      	movs	r1, #44	; 0x2c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	333f      	adds	r3, #63	; 0x3f
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d009      	beq.n	8001e52 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	333f      	adds	r3, #63	; 0x3f
 8001e4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d126      	bne.n	8001ea0 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	0151      	lsls	r1, r2, #5
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	440a      	add	r2, r1
 8001e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e70:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3360      	adds	r3, #96	; 0x60
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	b2d9      	uxtb	r1, r3
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	202c      	movs	r0, #44	; 0x2c
 8001e8e:	fb00 f303 	mul.w	r3, r0, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	3360      	adds	r3, #96	; 0x60
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fe4a 	bl	8001b34 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d12b      	bne.n	8001f00 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	212c      	movs	r1, #44	; 0x2c
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3348      	adds	r3, #72	; 0x48
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	202c      	movs	r0, #44	; 0x2c
 8001ebe:	fb00 f202 	mul.w	r2, r0, r2
 8001ec2:	440a      	add	r2, r1
 8001ec4:	3240      	adds	r2, #64	; 0x40
 8001ec6:	8812      	ldrh	r2, [r2, #0]
 8001ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 818e 	beq.w	80021f2 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	212c      	movs	r1, #44	; 0x2c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3354      	adds	r3, #84	; 0x54
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	f083 0301 	eor.w	r3, r3, #1
 8001eea:	b2d8      	uxtb	r0, r3
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	212c      	movs	r1, #44	; 0x2c
 8001ef2:	fb01 f303 	mul.w	r3, r1, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3354      	adds	r3, #84	; 0x54
 8001efa:	4602      	mov	r2, r0
 8001efc:	701a      	strb	r2, [r3, #0]
}
 8001efe:	e178      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	212c      	movs	r1, #44	; 0x2c
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3354      	adds	r3, #84	; 0x54
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2d8      	uxtb	r0, r3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	212c      	movs	r1, #44	; 0x2c
 8001f1c:	fb01 f303 	mul.w	r3, r1, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	3354      	adds	r3, #84	; 0x54
 8001f24:	4602      	mov	r2, r0
 8001f26:	701a      	strb	r2, [r3, #0]
}
 8001f28:	e163      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	f040 80f6 	bne.w	800212e <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3361      	adds	r3, #97	; 0x61
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d109      	bne.n	8001f6a <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3360      	adds	r3, #96	; 0x60
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e0c9      	b.n	80020fe <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3361      	adds	r3, #97	; 0x61
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d109      	bne.n	8001f92 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3360      	adds	r3, #96	; 0x60
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e0b5      	b.n	80020fe <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3361      	adds	r3, #97	; 0x61
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d009      	beq.n	8001fba <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3361      	adds	r3, #97	; 0x61
 8001fb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d150      	bne.n	800205c <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	335c      	adds	r3, #92	; 0x5c
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	202c      	movs	r0, #44	; 0x2c
 8001fd2:	fb00 f303 	mul.w	r3, r0, r3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	335c      	adds	r3, #92	; 0x5c
 8001fda:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	335c      	adds	r3, #92	; 0x5c
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d912      	bls.n	8002016 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	335c      	adds	r3, #92	; 0x5c
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3360      	adds	r3, #96	; 0x60
 8002010:	2204      	movs	r2, #4
 8002012:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002014:	e073      	b.n	80020fe <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	3360      	adds	r3, #96	; 0x60
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800203e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002046:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800205a:	e050      	b.n	80020fe <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3361      	adds	r3, #97	; 0x61
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d122      	bne.n	80020b6 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	3360      	adds	r3, #96	; 0x60
 800207e:	2202      	movs	r2, #2
 8002080:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002098:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020a0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e023      	b.n	80020fe <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3361      	adds	r3, #97	; 0x61
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	d119      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	335c      	adds	r3, #92	; 0x5c
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	202c      	movs	r0, #44	; 0x2c
 80020e2:	fb00 f303 	mul.w	r3, r0, r3
 80020e6:	440b      	add	r3, r1
 80020e8:	335c      	adds	r3, #92	; 0x5c
 80020ea:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3360      	adds	r3, #96	; 0x60
 80020fa:	2204      	movs	r2, #4
 80020fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	2302      	movs	r3, #2
 800210e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	b2d9      	uxtb	r1, r3
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	202c      	movs	r0, #44	; 0x2c
 800211a:	fb00 f303 	mul.w	r3, r0, r3
 800211e:	4413      	add	r3, r2
 8002120:	3360      	adds	r3, #96	; 0x60
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fd04 	bl	8001b34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800212c:	e061      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b10      	cmp	r3, #16
 8002142:	d156      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	333f      	adds	r3, #63	; 0x3f
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d111      	bne.n	800217c <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	335c      	adds	r3, #92	; 0x5c
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f002 fccc 	bl	8004b12 <USB_HC_Halt>
 800217a:	e031      	b.n	80021e0 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	333f      	adds	r3, #63	; 0x3f
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	333f      	adds	r3, #63	; 0x3f
 800219e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d11d      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d110      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3361      	adds	r3, #97	; 0x61
 80021cc:	2203      	movs	r2, #3
 80021ce:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 fc99 	bl	8004b12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ec:	461a      	mov	r2, r3
 80021ee:	2310      	movs	r3, #16
 80021f0:	6093      	str	r3, [r2, #8]
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b088      	sub	sp, #32
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b04      	cmp	r3, #4
 8002228:	d11a      	bne.n	8002260 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	2304      	movs	r3, #4
 800223a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3361      	adds	r3, #97	; 0x61
 800224a:	2206      	movs	r2, #6
 800224c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fc5a 	bl	8004b12 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800225e:	e331      	b.n	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b20      	cmp	r3, #32
 8002274:	d12e      	bne.n	80022d4 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	461a      	mov	r2, r3
 8002284:	2320      	movs	r3, #32
 8002286:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	333d      	adds	r3, #61	; 0x3d
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	f040 8313 	bne.w	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	333d      	adds	r3, #61	; 0x3d
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3360      	adds	r3, #96	; 0x60
 80022be:	2202      	movs	r2, #2
 80022c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 fc20 	bl	8004b12 <USB_HC_Halt>
}
 80022d2:	e2f7      	b.n	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ea:	d112      	bne.n	8002312 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	461a      	mov	r2, r3
 80022fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fc01 	bl	8004b12 <USB_HC_Halt>
}
 8002310:	e2d8      	b.n	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d140      	bne.n	80023aa <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	335c      	adds	r3, #92	; 0x5c
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d111      	bne.n	8002374 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	333d      	adds	r3, #61	; 0x3d
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	461a      	mov	r2, r3
 8002370:	2340      	movs	r3, #64	; 0x40
 8002372:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2301      	movs	r3, #1
 8002384:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3361      	adds	r3, #97	; 0x61
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fbb5 	bl	8004b12 <USB_HC_Halt>
}
 80023a8:	e28c      	b.n	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d12c      	bne.n	800241a <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3361      	adds	r3, #97	; 0x61
 80023ce:	2204      	movs	r2, #4
 80023d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	333d      	adds	r3, #61	; 0x3d
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	335c      	adds	r3, #92	; 0x5c
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f002 fb86 	bl	8004b12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002412:	461a      	mov	r2, r3
 8002414:	2340      	movs	r3, #64	; 0x40
 8002416:	6093      	str	r3, [r2, #8]
}
 8002418:	e254      	b.n	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b08      	cmp	r3, #8
 800242e:	d11a      	bne.n	8002466 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	4413      	add	r3, r2
 8002438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243c:	461a      	mov	r2, r3
 800243e:	2308      	movs	r3, #8
 8002440:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	3361      	adds	r3, #97	; 0x61
 8002450:	2205      	movs	r2, #5
 8002452:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f002 fb57 	bl	8004b12 <USB_HC_Halt>
}
 8002464:	e22e      	b.n	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b10      	cmp	r3, #16
 800247a:	d140      	bne.n	80024fe <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	335c      	adds	r3, #92	; 0x5c
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3361      	adds	r3, #97	; 0x61
 800249c:	2203      	movs	r2, #3
 800249e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	333d      	adds	r3, #61	; 0x3d
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d112      	bne.n	80024da <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	333c      	adds	r3, #60	; 0x3c
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d108      	bne.n	80024da <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	333d      	adds	r3, #61	; 0x3d
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 fb14 	bl	8004b12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	2310      	movs	r3, #16
 80024fa:	6093      	str	r3, [r2, #8]
}
 80024fc:	e1e2      	b.n	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d164      	bne.n	80025de <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d111      	bne.n	8002540 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3361      	adds	r3, #97	; 0x61
 800252a:	2206      	movs	r2, #6
 800252c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f002 faea 	bl	8004b12 <USB_HC_Halt>
 800253e:	e044      	b.n	80025ca <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	335c      	adds	r3, #92	; 0x5c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	202c      	movs	r0, #44	; 0x2c
 8002558:	fb00 f303 	mul.w	r3, r0, r3
 800255c:	440b      	add	r3, r1
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d920      	bls.n	80025b8 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	335c      	adds	r3, #92	; 0x5c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	2204      	movs	r2, #4
 8002598:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	b2d9      	uxtb	r1, r3
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	202c      	movs	r0, #44	; 0x2c
 80025a4:	fb00 f303 	mul.w	r3, r0, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	3360      	adds	r3, #96	; 0x60
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff fabf 	bl	8001b34 <HAL_HCD_HC_NotifyURBChange_Callback>
 80025b6:	e008      	b.n	80025ca <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3360      	adds	r3, #96	; 0x60
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	461a      	mov	r2, r3
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	6093      	str	r3, [r2, #8]
}
 80025dc:	e172      	b.n	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025f4:	d11b      	bne.n	800262e <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3361      	adds	r3, #97	; 0x61
 8002604:	2208      	movs	r2, #8
 8002606:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fa7d 	bl	8004b12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	461a      	mov	r2, r3
 8002626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262a:	6093      	str	r3, [r2, #8]
}
 800262c:	e14a      	b.n	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b02      	cmp	r3, #2
 8002642:	f040 813f 	bne.w	80028c4 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3361      	adds	r3, #97	; 0x61
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d17d      	bne.n	8002756 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3360      	adds	r3, #96	; 0x60
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	333f      	adds	r3, #63	; 0x3f
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d00a      	beq.n	8002696 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	333f      	adds	r3, #63	; 0x3f
 800268e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002690:	2b03      	cmp	r3, #3
 8002692:	f040 8100 	bne.w	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d113      	bne.n	80026c6 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	3355      	adds	r3, #85	; 0x55
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2d8      	uxtb	r0, r3
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3355      	adds	r3, #85	; 0x55
 80026c2:	4602      	mov	r2, r0
 80026c4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	f040 80e3 	bne.w	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	334c      	adds	r3, #76	; 0x4c
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80d8 	beq.w	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	334c      	adds	r3, #76	; 0x4c
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	202c      	movs	r0, #44	; 0x2c
 80026fc:	fb00 f202 	mul.w	r2, r0, r2
 8002700:	440a      	add	r2, r1
 8002702:	3240      	adds	r2, #64	; 0x40
 8002704:	8812      	ldrh	r2, [r2, #0]
 8002706:	4413      	add	r3, r2
 8002708:	3b01      	subs	r3, #1
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	202c      	movs	r0, #44	; 0x2c
 8002710:	fb00 f202 	mul.w	r2, r0, r2
 8002714:	440a      	add	r2, r1
 8002716:	3240      	adds	r2, #64	; 0x40
 8002718:	8812      	ldrh	r2, [r2, #0]
 800271a:	fbb3 f3f2 	udiv	r3, r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80b5 	beq.w	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3355      	adds	r3, #85	; 0x55
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	f083 0301 	eor.w	r3, r3, #1
 8002740:	b2d8      	uxtb	r0, r3
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3355      	adds	r3, #85	; 0x55
 8002750:	4602      	mov	r2, r0
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e09f      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3361      	adds	r3, #97	; 0x61
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b03      	cmp	r3, #3
 8002768:	d109      	bne.n	800277e <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3360      	adds	r3, #96	; 0x60
 8002778:	2202      	movs	r2, #2
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e08b      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	3361      	adds	r3, #97	; 0x61
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d109      	bne.n	80027a6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3360      	adds	r3, #96	; 0x60
 80027a0:	2202      	movs	r2, #2
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e077      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3361      	adds	r3, #97	; 0x61
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d109      	bne.n	80027ce <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3360      	adds	r3, #96	; 0x60
 80027c8:	2205      	movs	r2, #5
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e063      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3361      	adds	r3, #97	; 0x61
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d009      	beq.n	80027f6 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3361      	adds	r3, #97	; 0x61
 80027f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d14f      	bne.n	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	335c      	adds	r3, #92	; 0x5c
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	202c      	movs	r0, #44	; 0x2c
 800280e:	fb00 f303 	mul.w	r3, r0, r3
 8002812:	440b      	add	r3, r1
 8002814:	335c      	adds	r3, #92	; 0x5c
 8002816:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	335c      	adds	r3, #92	; 0x5c
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d912      	bls.n	8002852 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	335c      	adds	r3, #92	; 0x5c
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3360      	adds	r3, #96	; 0x60
 800284c:	2204      	movs	r2, #4
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e021      	b.n	8002896 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3360      	adds	r3, #96	; 0x60
 8002860:	2202      	movs	r2, #2
 8002862:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800287a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002882:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	2302      	movs	r3, #2
 80028a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	b2d9      	uxtb	r1, r3
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	202c      	movs	r0, #44	; 0x2c
 80028b2:	fb00 f303 	mul.w	r3, r0, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3360      	adds	r3, #96	; 0x60
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff f938 	bl	8001b34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028c4:	bf00      	nop
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	0c5b      	lsrs	r3, r3, #17
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002900:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d004      	beq.n	8002912 <HCD_RXQLVL_IRQHandler+0x46>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b05      	cmp	r3, #5
 800290c:	f000 80a9 	beq.w	8002a62 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002910:	e0aa      	b.n	8002a68 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80a6 	beq.w	8002a66 <HCD_RXQLVL_IRQHandler+0x19a>
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3344      	adds	r3, #68	; 0x44
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 809b 	beq.w	8002a66 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3350      	adds	r3, #80	; 0x50
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	441a      	add	r2, r3
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	440b      	add	r3, r1
 8002950:	334c      	adds	r3, #76	; 0x4c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d87a      	bhi.n	8002a4e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3344      	adds	r3, #68	; 0x44
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	b292      	uxth	r2, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f001 ff15 	bl	80047a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3344      	adds	r3, #68	; 0x44
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	441a      	add	r2, r3
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	202c      	movs	r0, #44	; 0x2c
 8002990:	fb00 f303 	mul.w	r3, r0, r3
 8002994:	440b      	add	r3, r1
 8002996:	3344      	adds	r3, #68	; 0x44
 8002998:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3350      	adds	r3, #80	; 0x50
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	441a      	add	r2, r3
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	202c      	movs	r0, #44	; 0x2c
 80029b4:	fb00 f303 	mul.w	r3, r0, r3
 80029b8:	440b      	add	r3, r1
 80029ba:	3350      	adds	r3, #80	; 0x50
 80029bc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	0cdb      	lsrs	r3, r3, #19
 80029ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3340      	adds	r3, #64	; 0x40
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d13c      	bne.n	8002a66 <HCD_RXQLVL_IRQHandler+0x19a>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d039      	beq.n	8002a66 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a08:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a10:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3354      	adds	r3, #84	; 0x54
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f083 0301 	eor.w	r3, r3, #1
 8002a38:	b2d8      	uxtb	r0, r3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3354      	adds	r3, #84	; 0x54
 8002a48:	4602      	mov	r2, r0
 8002a4a:	701a      	strb	r2, [r3, #0]
      break;
 8002a4c:	e00b      	b.n	8002a66 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3360      	adds	r3, #96	; 0x60
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	701a      	strb	r2, [r3, #0]
      break;
 8002a60:	e001      	b.n	8002a66 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002a66:	bf00      	nop
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3728      	adds	r7, #40	; 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a9c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d10b      	bne.n	8002ac0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff f816 	bl	8001ae4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d132      	bne.n	8002b30 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d126      	bne.n	8002b2a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d113      	bne.n	8002b0c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002aea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aee:	d106      	bne.n	8002afe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2102      	movs	r1, #2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 ffc0 	bl	8004a7c <USB_InitFSLSPClkSel>
 8002afc:	e011      	b.n	8002b22 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 ffb9 	bl	8004a7c <USB_InitFSLSPClkSel>
 8002b0a:	e00a      	b.n	8002b22 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d106      	bne.n	8002b22 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002b20:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe fff2 	bl	8001b0c <HAL_HCD_PortEnabled_Callback>
 8002b28:	e002      	b.n	8002b30 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fff8 	bl	8001b20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d103      	bne.n	8002b42 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f043 0320 	orr.w	r3, r3, #32
 8002b40:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6013      	str	r3, [r2, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e267      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d075      	beq.n	8002c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b76:	4b88      	ldr	r3, [pc, #544]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d00c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b82:	4b85      	ldr	r3, [pc, #532]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d112      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b82      	ldr	r3, [pc, #520]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	4b7e      	ldr	r3, [pc, #504]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d05b      	beq.n	8002c60 <HAL_RCC_OscConfig+0x108>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d157      	bne.n	8002c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e242      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_OscConfig+0x74>
 8002bbe:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a75      	ldr	r2, [pc, #468]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e01d      	b.n	8002c08 <HAL_RCC_OscConfig+0xb0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x98>
 8002bd6:	4b70      	ldr	r3, [pc, #448]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a6f      	ldr	r2, [pc, #444]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b6d      	ldr	r3, [pc, #436]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6c      	ldr	r2, [pc, #432]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0xb0>
 8002bf0:	4b69      	ldr	r3, [pc, #420]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a68      	ldr	r2, [pc, #416]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b66      	ldr	r3, [pc, #408]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a65      	ldr	r2, [pc, #404]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fafa 	bl	8001208 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe faf6 	bl	8001208 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e207      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0xc0>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe fae6 	bl	8001208 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe fae2 	bl	8001208 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1f3      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	4b51      	ldr	r3, [pc, #324]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0xe8>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6e:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d11c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d116      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_RCC_OscConfig+0x152>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1c7      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4937      	ldr	r1, [pc, #220]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	e03a      	b.n	8002d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d020      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc8:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <HAL_RCC_OscConfig+0x244>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe fa9b 	bl	8001208 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fa97 	bl	8001208 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e1a8      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4925      	ldr	r1, [pc, #148]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
 8002d08:	e015      	b.n	8002d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_OscConfig+0x244>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fa7a 	bl	8001208 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d18:	f7fe fa76 	bl	8001208 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e187      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d036      	beq.n	8002db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_RCC_OscConfig+0x248>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fe fa5a 	bl	8001208 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fe fa56 	bl	8001208 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e167      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x200>
 8002d76:	e01b      	b.n	8002db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_OscConfig+0x248>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fa43 	bl	8001208 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	e00e      	b.n	8002da4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d86:	f7fe fa3f 	bl	8001208 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d907      	bls.n	8002da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e150      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	42470000 	.word	0x42470000
 8002da0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da4:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ea      	bne.n	8002d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8097 	beq.w	8002eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc2:	4b81      	ldr	r3, [pc, #516]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	4b7d      	ldr	r3, [pc, #500]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a7c      	ldr	r2, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b7a      	ldr	r3, [pc, #488]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b77      	ldr	r3, [pc, #476]	; (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfa:	4b74      	ldr	r3, [pc, #464]	; (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a73      	ldr	r2, [pc, #460]	; (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe f9ff 	bl	8001208 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fe f9fb 	bl	8001208 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e10c      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <HAL_RCC_OscConfig+0x474>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2ea>
 8002e34:	4b64      	ldr	r3, [pc, #400]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a63      	ldr	r2, [pc, #396]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	e01c      	b.n	8002e7c <HAL_RCC_OscConfig+0x324>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x30c>
 8002e4a:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a5e      	ldr	r2, [pc, #376]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	4b5c      	ldr	r3, [pc, #368]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	4a5b      	ldr	r2, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0x324>
 8002e64:	4b58      	ldr	r3, [pc, #352]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a57      	ldr	r2, [pc, #348]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a54      	ldr	r2, [pc, #336]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 0304 	bic.w	r3, r3, #4
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d015      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe f9c0 	bl	8001208 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe f9bc 	bl	8001208 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0cb      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0ee      	beq.n	8002e8c <HAL_RCC_OscConfig+0x334>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe f9aa 	bl	8001208 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe f9a6 	bl	8001208 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e0b5      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ece:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1ee      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	4a38      	ldr	r2, [pc, #224]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80a1 	beq.w	8003038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d05c      	beq.n	8002fbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d141      	bne.n	8002f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_RCC_OscConfig+0x478>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe f97a 	bl	8001208 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe f976 	bl	8001208 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e087      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	019b      	lsls	r3, r3, #6
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	041b      	lsls	r3, r3, #16
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	491b      	ldr	r1, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_RCC_OscConfig+0x478>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7fe f94f 	bl	8001208 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe f94b 	bl	8001208 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e05c      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x416>
 8002f8c:	e054      	b.n	8003038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_RCC_OscConfig+0x478>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe f938 	bl	8001208 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fe f934 	bl	8001208 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e045      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x444>
 8002fba:	e03d      	b.n	8003038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e038      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x4ec>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d028      	beq.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d121      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d11a      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800300a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300c:	4293      	cmp	r3, r2
 800300e:	d111      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	3b01      	subs	r3, #1
 800301e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d107      	bne.n	8003034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800

08003048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0cc      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800305c:	4b68      	ldr	r3, [pc, #416]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d90c      	bls.n	8003084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b65      	ldr	r3, [pc, #404]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b63      	ldr	r3, [pc, #396]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0b8      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800309c:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b4:	4b53      	ldr	r3, [pc, #332]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c0:	4b50      	ldr	r3, [pc, #320]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	494d      	ldr	r1, [pc, #308]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d044      	beq.n	8003168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	4b47      	ldr	r3, [pc, #284]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d119      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e07f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003102:	2b03      	cmp	r3, #3
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	4b3f      	ldr	r3, [pc, #252]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003116:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e067      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003126:	4b37      	ldr	r3, [pc, #220]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4934      	ldr	r1, [pc, #208]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003138:	f7fe f866 	bl	8001208 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	e00a      	b.n	8003156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f7fe f862 	bl	8001208 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e04f      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 020c 	and.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	429a      	cmp	r2, r3
 8003166:	d1eb      	bne.n	8003140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d20c      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b22      	ldr	r3, [pc, #136]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e032      	b.n	80031f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4916      	ldr	r1, [pc, #88]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	490e      	ldr	r1, [pc, #56]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ce:	f000 f821 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	490a      	ldr	r1, [pc, #40]	; (8003208 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	5ccb      	ldrb	r3, [r1, r3]
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_ClockConfig+0x1c8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd ffc6 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00
 8003204:	40023800 	.word	0x40023800
 8003208:	08004d98 	.word	0x08004d98
 800320c:	20000000 	.word	0x20000000
 8003210:	20000004 	.word	0x20000004

08003214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003218:	b094      	sub	sp, #80	; 0x50
 800321a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	647b      	str	r3, [r7, #68]	; 0x44
 8003220:	2300      	movs	r3, #0
 8003222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003224:	2300      	movs	r3, #0
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800322c:	4b79      	ldr	r3, [pc, #484]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b08      	cmp	r3, #8
 8003236:	d00d      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0x40>
 8003238:	2b08      	cmp	r3, #8
 800323a:	f200 80e1 	bhi.w	8003400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x34>
 8003242:	2b04      	cmp	r3, #4
 8003244:	d003      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0x3a>
 8003246:	e0db      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003248:	4b73      	ldr	r3, [pc, #460]	; (8003418 <HAL_RCC_GetSysClockFreq+0x204>)
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800324c:	e0db      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800324e:	4b73      	ldr	r3, [pc, #460]	; (800341c <HAL_RCC_GetSysClockFreq+0x208>)
 8003250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003252:	e0d8      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003254:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800325c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800325e:	4b6d      	ldr	r3, [pc, #436]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d063      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326a:	4b6a      	ldr	r3, [pc, #424]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	099b      	lsrs	r3, r3, #6
 8003270:	2200      	movs	r2, #0
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
 8003274:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327c:	633b      	str	r3, [r7, #48]	; 0x30
 800327e:	2300      	movs	r3, #0
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
 8003282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	0159      	lsls	r1, r3, #5
 8003294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003298:	0150      	lsls	r0, r2, #5
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4621      	mov	r1, r4
 80032a0:	1a51      	subs	r1, r2, r1
 80032a2:	6139      	str	r1, [r7, #16]
 80032a4:	4629      	mov	r1, r5
 80032a6:	eb63 0301 	sbc.w	r3, r3, r1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b8:	4659      	mov	r1, fp
 80032ba:	018b      	lsls	r3, r1, #6
 80032bc:	4651      	mov	r1, sl
 80032be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c2:	4651      	mov	r1, sl
 80032c4:	018a      	lsls	r2, r1, #6
 80032c6:	4651      	mov	r1, sl
 80032c8:	ebb2 0801 	subs.w	r8, r2, r1
 80032cc:	4659      	mov	r1, fp
 80032ce:	eb63 0901 	sbc.w	r9, r3, r1
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032e6:	4690      	mov	r8, r2
 80032e8:	4699      	mov	r9, r3
 80032ea:	4623      	mov	r3, r4
 80032ec:	eb18 0303 	adds.w	r3, r8, r3
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	462b      	mov	r3, r5
 80032f4:	eb49 0303 	adc.w	r3, r9, r3
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003306:	4629      	mov	r1, r5
 8003308:	024b      	lsls	r3, r1, #9
 800330a:	4621      	mov	r1, r4
 800330c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003310:	4621      	mov	r1, r4
 8003312:	024a      	lsls	r2, r1, #9
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331a:	2200      	movs	r2, #0
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
 800331e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003324:	f7fc ff50 	bl	80001c8 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4613      	mov	r3, r2
 800332e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003330:	e058      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003332:	4b38      	ldr	r3, [pc, #224]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	2200      	movs	r2, #0
 800333a:	4618      	mov	r0, r3
 800333c:	4611      	mov	r1, r2
 800333e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003342:	623b      	str	r3, [r7, #32]
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800334c:	4642      	mov	r2, r8
 800334e:	464b      	mov	r3, r9
 8003350:	f04f 0000 	mov.w	r0, #0
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	0159      	lsls	r1, r3, #5
 800335a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800335e:	0150      	lsls	r0, r2, #5
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4641      	mov	r1, r8
 8003366:	ebb2 0a01 	subs.w	sl, r2, r1
 800336a:	4649      	mov	r1, r9
 800336c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800337c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003384:	ebb2 040a 	subs.w	r4, r2, sl
 8003388:	eb63 050b 	sbc.w	r5, r3, fp
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	00eb      	lsls	r3, r5, #3
 8003396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339a:	00e2      	lsls	r2, r4, #3
 800339c:	4614      	mov	r4, r2
 800339e:	461d      	mov	r5, r3
 80033a0:	4643      	mov	r3, r8
 80033a2:	18e3      	adds	r3, r4, r3
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	464b      	mov	r3, r9
 80033a8:	eb45 0303 	adc.w	r3, r5, r3
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ba:	4629      	mov	r1, r5
 80033bc:	028b      	lsls	r3, r1, #10
 80033be:	4621      	mov	r1, r4
 80033c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c4:	4621      	mov	r1, r4
 80033c6:	028a      	lsls	r2, r1, #10
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ce:	2200      	movs	r2, #0
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	61fa      	str	r2, [r7, #28]
 80033d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d8:	f7fc fef6 	bl	80001c8 <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4613      	mov	r3, r2
 80033e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	3301      	adds	r3, #1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033fe:	e002      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetSysClockFreq+0x204>)
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003408:	4618      	mov	r0, r3
 800340a:	3750      	adds	r7, #80	; 0x50
 800340c:	46bd      	mov	sp, r7
 800340e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	00f42400 	.word	0x00f42400
 800341c:	007a1200 	.word	0x007a1200

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff0 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	08004da8 	.word	0x08004da8

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffdc 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0b5b      	lsrs	r3, r3, #13
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	08004da8 	.word	0x08004da8

08003488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07b      	b.n	8003592 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d009      	beq.n	80034c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
 80034b2:	e005      	b.n	80034c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd fc56 	bl	8000d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	ea42 0103 	orr.w	r1, r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	f003 0104 	and.w	r1, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f003 0210 	and.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b088      	sub	sp, #32
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_SPI_Transmit+0x22>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e126      	b.n	800380a <HAL_SPI_Transmit+0x270>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c4:	f7fd fe20 	bl	8001208 <HAL_GetTick>
 80035c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035da:	2302      	movs	r3, #2
 80035dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035de:	e10b      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_SPI_Transmit+0x52>
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035f0:	e102      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2203      	movs	r2, #3
 80035f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003638:	d10f      	bne.n	800365a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003648:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003658:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d007      	beq.n	8003678 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003680:	d14b      	bne.n	800371a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_SPI_Transmit+0xf6>
 800368a:	8afb      	ldrh	r3, [r7, #22]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d13e      	bne.n	800370e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	881a      	ldrh	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	1c9a      	adds	r2, r3, #2
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b4:	e02b      	b.n	800370e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d112      	bne.n	80036ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	881a      	ldrh	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	1c9a      	adds	r2, r3, #2
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036e8:	e011      	b.n	800370e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ea:	f7fd fd8d 	bl	8001208 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d803      	bhi.n	8003702 <HAL_SPI_Transmit+0x168>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Transmit+0x16e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800370c:	e074      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ce      	bne.n	80036b6 <HAL_SPI_Transmit+0x11c>
 8003718:	e04c      	b.n	80037b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Transmit+0x18e>
 8003722:	8afb      	ldrh	r3, [r7, #22]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d140      	bne.n	80037aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800374e:	e02c      	b.n	80037aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d113      	bne.n	8003786 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	86da      	strh	r2, [r3, #54]	; 0x36
 8003784:	e011      	b.n	80037aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003786:	f7fd fd3f 	bl	8001208 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d803      	bhi.n	800379e <HAL_SPI_Transmit+0x204>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d102      	bne.n	80037a4 <HAL_SPI_Transmit+0x20a>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037a8:	e026      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1cd      	bne.n	8003750 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fbcb 	bl	8003f54 <SPI_EndRxTxTransaction>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e000      	b.n	80037f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80037f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003808:	7ffb      	ldrb	r3, [r7, #31]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b088      	sub	sp, #32
 8003816:	af02      	add	r7, sp, #8
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382e:	d112      	bne.n	8003856 <HAL_SPI_Receive+0x44>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10e      	bne.n	8003856 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2204      	movs	r2, #4
 800383c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f8f1 	bl	8003a34 <HAL_SPI_TransmitReceive>
 8003852:	4603      	mov	r3, r0
 8003854:	e0ea      	b.n	8003a2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_SPI_Receive+0x52>
 8003860:	2302      	movs	r3, #2
 8003862:	e0e3      	b.n	8003a2c <HAL_SPI_Receive+0x21a>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386c:	f7fd fccc 	bl	8001208 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d002      	beq.n	8003884 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800387e:	2302      	movs	r3, #2
 8003880:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003882:	e0ca      	b.n	8003a1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_SPI_Receive+0x7e>
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003894:	e0c1      	b.n	8003a1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2204      	movs	r2, #4
 800389a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038dc:	d10f      	bne.n	80038fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d007      	beq.n	800391c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d162      	bne.n	80039ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003924:	e02e      	b.n	8003984 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d115      	bne.n	8003960 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f103 020c 	add.w	r2, r3, #12
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800395e:	e011      	b.n	8003984 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003960:	f7fd fc52 	bl	8001208 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d803      	bhi.n	8003978 <HAL_SPI_Receive+0x166>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d102      	bne.n	800397e <HAL_SPI_Receive+0x16c>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003982:	e04a      	b.n	8003a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1cb      	bne.n	8003926 <HAL_SPI_Receive+0x114>
 800398e:	e031      	b.n	80039f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d113      	bne.n	80039c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	b292      	uxth	r2, r2
 80039aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039c4:	e011      	b.n	80039ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c6:	f7fd fc1f 	bl	8001208 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d803      	bhi.n	80039de <HAL_SPI_Receive+0x1cc>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d102      	bne.n	80039e4 <HAL_SPI_Receive+0x1d2>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039e8:	e017      	b.n	8003a1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1cd      	bne.n	8003990 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	6839      	ldr	r1, [r7, #0]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fa45 	bl	8003e88 <SPI_EndRxTransaction>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
 8003a16:	e000      	b.n	8003a1a <HAL_SPI_Receive+0x208>
  }

error :
 8003a18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08c      	sub	sp, #48	; 0x30
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a42:	2301      	movs	r3, #1
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x26>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e18a      	b.n	8003d70 <HAL_SPI_TransmitReceive+0x33c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a62:	f7fd fbd1 	bl	8001208 <HAL_GetTick>
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d00f      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x70>
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8a:	d107      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x68>
 8003a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d003      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aa2:	e15b      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x82>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x82>
 8003ab0:	887b      	ldrh	r3, [r7, #2]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003abc:	e14e      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d003      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2205      	movs	r2, #5
 8003ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	887a      	ldrh	r2, [r7, #2]
 8003ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	887a      	ldrh	r2, [r7, #2]
 8003ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	887a      	ldrh	r2, [r7, #2]
 8003afa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d007      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2e:	d178      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_SPI_TransmitReceive+0x10a>
 8003b38:	8b7b      	ldrh	r3, [r7, #26]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d166      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	881a      	ldrh	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	1c9a      	adds	r2, r3, #2
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b62:	e053      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d11b      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x176>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d016      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x176>
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d113      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	1c9a      	adds	r2, r3, #2
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d119      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x1b8>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d014      	beq.n	8003bec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	1c9a      	adds	r2, r3, #2
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003be8:	2301      	movs	r3, #1
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bec:	f7fd fb0c 	bl	8001208 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d807      	bhi.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d003      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c0a:	e0a7      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1a6      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x130>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1a1      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x130>
 8003c20:	e07c      	b.n	8003d1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_TransmitReceive+0x1fc>
 8003c2a:	8b7b      	ldrh	r3, [r7, #26]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d16b      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c56:	e057      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d11c      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x26c>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x26c>
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d114      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d119      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x2ae>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d014      	beq.n	8003ce2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ce2:	f7fd fa91 	bl	8001208 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d803      	bhi.n	8003cfa <HAL_SPI_TransmitReceive+0x2c6>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf8:	d102      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x2cc>
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d06:	e029      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1a2      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x224>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d19d      	bne.n	8003c58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f917 	bl	8003f54 <SPI_EndRxTxTransaction>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d006      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d38:	e010      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	e000      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3730      	adds	r7, #48	; 0x30
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d88:	f7fd fa3e 	bl	8001208 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	4413      	add	r3, r2
 8003d96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d98:	f7fd fa36 	bl	8001208 <HAL_GetTick>
 8003d9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d9e:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	015b      	lsls	r3, r3, #5
 8003da4:	0d1b      	lsrs	r3, r3, #20
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dae:	e054      	b.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d050      	beq.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003db8:	f7fd fa26 	bl	8001208 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d902      	bls.n	8003dce <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d13d      	bne.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de6:	d111      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df0:	d004      	beq.n	8003dfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d107      	bne.n	8003e0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e14:	d10f      	bne.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e017      	b.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d19b      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000000 	.word	0x20000000

08003e88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9c:	d111      	bne.n	8003ec2 <SPI_EndRxTransaction+0x3a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea6:	d004      	beq.n	8003eb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb0:	d107      	bne.n	8003ec2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eca:	d12a      	bne.n	8003f22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d012      	beq.n	8003efc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2180      	movs	r1, #128	; 0x80
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff ff49 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02d      	beq.n	8003f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e026      	b.n	8003f4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2200      	movs	r2, #0
 8003f04:	2101      	movs	r1, #1
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff ff36 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01a      	beq.n	8003f48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e013      	b.n	8003f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7ff ff23 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e000      	b.n	8003f4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <SPI_EndRxTxTransaction+0x7c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1b      	ldr	r2, [pc, #108]	; (8003fd4 <SPI_EndRxTxTransaction+0x80>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	0d5b      	lsrs	r3, r3, #21
 8003f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f70:	fb02 f303 	mul.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7e:	d112      	bne.n	8003fa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff fef4 	bl	8003d78 <SPI_WaitFlagStateUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e00f      	b.n	8003fc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b80      	cmp	r3, #128	; 0x80
 8003fbe:	d0f2      	beq.n	8003fa6 <SPI_EndRxTxTransaction+0x52>
 8003fc0:	e000      	b.n	8003fc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003fc2:	bf00      	nop
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	165e9f81 	.word	0x165e9f81

08003fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e03f      	b.n	800406a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc ff0c 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2224      	movs	r2, #36	; 0x24
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800401a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f829 	bl	8004074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b0c0      	sub	sp, #256	; 0x100
 800407a:	af00      	add	r7, sp, #0
 800407c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	68d9      	ldr	r1, [r3, #12]
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	ea40 0301 	orr.w	r3, r0, r1
 800409c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040cc:	f021 010c 	bic.w	r1, r1, #12
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040da:	430b      	orrs	r3, r1
 80040dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ee:	6999      	ldr	r1, [r3, #24]
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	ea40 0301 	orr.w	r3, r0, r1
 80040fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b8f      	ldr	r3, [pc, #572]	; (8004340 <UART_SetConfig+0x2cc>)
 8004104:	429a      	cmp	r2, r3
 8004106:	d005      	beq.n	8004114 <UART_SetConfig+0xa0>
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b8d      	ldr	r3, [pc, #564]	; (8004344 <UART_SetConfig+0x2d0>)
 8004110:	429a      	cmp	r2, r3
 8004112:	d104      	bne.n	800411e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004114:	f7ff f9a4 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8004118:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800411c:	e003      	b.n	8004126 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800411e:	f7ff f98b 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8004122:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004130:	f040 810c 	bne.w	800434c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800413e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004142:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004146:	4622      	mov	r2, r4
 8004148:	462b      	mov	r3, r5
 800414a:	1891      	adds	r1, r2, r2
 800414c:	65b9      	str	r1, [r7, #88]	; 0x58
 800414e:	415b      	adcs	r3, r3
 8004150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004152:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004156:	4621      	mov	r1, r4
 8004158:	eb12 0801 	adds.w	r8, r2, r1
 800415c:	4629      	mov	r1, r5
 800415e:	eb43 0901 	adc.w	r9, r3, r1
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800416e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004176:	4690      	mov	r8, r2
 8004178:	4699      	mov	r9, r3
 800417a:	4623      	mov	r3, r4
 800417c:	eb18 0303 	adds.w	r3, r8, r3
 8004180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004184:	462b      	mov	r3, r5
 8004186:	eb49 0303 	adc.w	r3, r9, r3
 800418a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800419a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800419e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041a2:	460b      	mov	r3, r1
 80041a4:	18db      	adds	r3, r3, r3
 80041a6:	653b      	str	r3, [r7, #80]	; 0x50
 80041a8:	4613      	mov	r3, r2
 80041aa:	eb42 0303 	adc.w	r3, r2, r3
 80041ae:	657b      	str	r3, [r7, #84]	; 0x54
 80041b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041b8:	f7fc f806 	bl	80001c8 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4b61      	ldr	r3, [pc, #388]	; (8004348 <UART_SetConfig+0x2d4>)
 80041c2:	fba3 2302 	umull	r2, r3, r3, r2
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	011c      	lsls	r4, r3, #4
 80041ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	1891      	adds	r1, r2, r2
 80041e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80041e4:	415b      	adcs	r3, r3
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041ec:	4641      	mov	r1, r8
 80041ee:	eb12 0a01 	adds.w	sl, r2, r1
 80041f2:	4649      	mov	r1, r9
 80041f4:	eb43 0b01 	adc.w	fp, r3, r1
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004204:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004208:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800420c:	4692      	mov	sl, r2
 800420e:	469b      	mov	fp, r3
 8004210:	4643      	mov	r3, r8
 8004212:	eb1a 0303 	adds.w	r3, sl, r3
 8004216:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800421a:	464b      	mov	r3, r9
 800421c:	eb4b 0303 	adc.w	r3, fp, r3
 8004220:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004230:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004234:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004238:	460b      	mov	r3, r1
 800423a:	18db      	adds	r3, r3, r3
 800423c:	643b      	str	r3, [r7, #64]	; 0x40
 800423e:	4613      	mov	r3, r2
 8004240:	eb42 0303 	adc.w	r3, r2, r3
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
 8004246:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800424a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800424e:	f7fb ffbb 	bl	80001c8 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4611      	mov	r1, r2
 8004258:	4b3b      	ldr	r3, [pc, #236]	; (8004348 <UART_SetConfig+0x2d4>)
 800425a:	fba3 2301 	umull	r2, r3, r3, r1
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2264      	movs	r2, #100	; 0x64
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	1acb      	subs	r3, r1, r3
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <UART_SetConfig+0x2d4>)
 8004270:	fba3 2302 	umull	r2, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800427c:	441c      	add	r4, r3
 800427e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004288:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800428c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	1891      	adds	r1, r2, r2
 8004296:	63b9      	str	r1, [r7, #56]	; 0x38
 8004298:	415b      	adcs	r3, r3
 800429a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800429c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042a0:	4641      	mov	r1, r8
 80042a2:	1851      	adds	r1, r2, r1
 80042a4:	6339      	str	r1, [r7, #48]	; 0x30
 80042a6:	4649      	mov	r1, r9
 80042a8:	414b      	adcs	r3, r1
 80042aa:	637b      	str	r3, [r7, #52]	; 0x34
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042b8:	4659      	mov	r1, fp
 80042ba:	00cb      	lsls	r3, r1, #3
 80042bc:	4651      	mov	r1, sl
 80042be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042c2:	4651      	mov	r1, sl
 80042c4:	00ca      	lsls	r2, r1, #3
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	4642      	mov	r2, r8
 80042ce:	189b      	adds	r3, r3, r2
 80042d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042d4:	464b      	mov	r3, r9
 80042d6:	460a      	mov	r2, r1
 80042d8:	eb42 0303 	adc.w	r3, r2, r3
 80042dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042f4:	460b      	mov	r3, r1
 80042f6:	18db      	adds	r3, r3, r3
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fa:	4613      	mov	r3, r2
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004302:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004306:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800430a:	f7fb ff5d 	bl	80001c8 <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <UART_SetConfig+0x2d4>)
 8004314:	fba3 1302 	umull	r1, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2164      	movs	r1, #100	; 0x64
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	3332      	adds	r3, #50	; 0x32
 8004326:	4a08      	ldr	r2, [pc, #32]	; (8004348 <UART_SetConfig+0x2d4>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f003 0207 	and.w	r2, r3, #7
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4422      	add	r2, r4
 800433a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800433c:	e105      	b.n	800454a <UART_SetConfig+0x4d6>
 800433e:	bf00      	nop
 8004340:	40011000 	.word	0x40011000
 8004344:	40011400 	.word	0x40011400
 8004348:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800434c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004350:	2200      	movs	r2, #0
 8004352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004356:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800435a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800435e:	4642      	mov	r2, r8
 8004360:	464b      	mov	r3, r9
 8004362:	1891      	adds	r1, r2, r2
 8004364:	6239      	str	r1, [r7, #32]
 8004366:	415b      	adcs	r3, r3
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
 800436a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800436e:	4641      	mov	r1, r8
 8004370:	1854      	adds	r4, r2, r1
 8004372:	4649      	mov	r1, r9
 8004374:	eb43 0501 	adc.w	r5, r3, r1
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	00eb      	lsls	r3, r5, #3
 8004382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004386:	00e2      	lsls	r2, r4, #3
 8004388:	4614      	mov	r4, r2
 800438a:	461d      	mov	r5, r3
 800438c:	4643      	mov	r3, r8
 800438e:	18e3      	adds	r3, r4, r3
 8004390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004394:	464b      	mov	r3, r9
 8004396:	eb45 0303 	adc.w	r3, r5, r3
 800439a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043ba:	4629      	mov	r1, r5
 80043bc:	008b      	lsls	r3, r1, #2
 80043be:	4621      	mov	r1, r4
 80043c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043c4:	4621      	mov	r1, r4
 80043c6:	008a      	lsls	r2, r1, #2
 80043c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043cc:	f7fb fefc 	bl	80001c8 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4b60      	ldr	r3, [pc, #384]	; (8004558 <UART_SetConfig+0x4e4>)
 80043d6:	fba3 2302 	umull	r2, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	011c      	lsls	r4, r3, #4
 80043de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	1891      	adds	r1, r2, r2
 80043f6:	61b9      	str	r1, [r7, #24]
 80043f8:	415b      	adcs	r3, r3
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004400:	4641      	mov	r1, r8
 8004402:	1851      	adds	r1, r2, r1
 8004404:	6139      	str	r1, [r7, #16]
 8004406:	4649      	mov	r1, r9
 8004408:	414b      	adcs	r3, r1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004418:	4659      	mov	r1, fp
 800441a:	00cb      	lsls	r3, r1, #3
 800441c:	4651      	mov	r1, sl
 800441e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004422:	4651      	mov	r1, sl
 8004424:	00ca      	lsls	r2, r1, #3
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	4603      	mov	r3, r0
 800442c:	4642      	mov	r2, r8
 800442e:	189b      	adds	r3, r3, r2
 8004430:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004434:	464b      	mov	r3, r9
 8004436:	460a      	mov	r2, r1
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	67bb      	str	r3, [r7, #120]	; 0x78
 800444a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004458:	4649      	mov	r1, r9
 800445a:	008b      	lsls	r3, r1, #2
 800445c:	4641      	mov	r1, r8
 800445e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004462:	4641      	mov	r1, r8
 8004464:	008a      	lsls	r2, r1, #2
 8004466:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800446a:	f7fb fead 	bl	80001c8 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4b39      	ldr	r3, [pc, #228]	; (8004558 <UART_SetConfig+0x4e4>)
 8004474:	fba3 1302 	umull	r1, r3, r3, r2
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	2164      	movs	r1, #100	; 0x64
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	3332      	adds	r3, #50	; 0x32
 8004486:	4a34      	ldr	r2, [pc, #208]	; (8004558 <UART_SetConfig+0x4e4>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004492:	441c      	add	r4, r3
 8004494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004498:	2200      	movs	r2, #0
 800449a:	673b      	str	r3, [r7, #112]	; 0x70
 800449c:	677a      	str	r2, [r7, #116]	; 0x74
 800449e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044a2:	4642      	mov	r2, r8
 80044a4:	464b      	mov	r3, r9
 80044a6:	1891      	adds	r1, r2, r2
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	415b      	adcs	r3, r3
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044b2:	4641      	mov	r1, r8
 80044b4:	1851      	adds	r1, r2, r1
 80044b6:	6039      	str	r1, [r7, #0]
 80044b8:	4649      	mov	r1, r9
 80044ba:	414b      	adcs	r3, r1
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044ca:	4659      	mov	r1, fp
 80044cc:	00cb      	lsls	r3, r1, #3
 80044ce:	4651      	mov	r1, sl
 80044d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d4:	4651      	mov	r1, sl
 80044d6:	00ca      	lsls	r2, r1, #3
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	4603      	mov	r3, r0
 80044de:	4642      	mov	r2, r8
 80044e0:	189b      	adds	r3, r3, r2
 80044e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044e4:	464b      	mov	r3, r9
 80044e6:	460a      	mov	r2, r1
 80044e8:	eb42 0303 	adc.w	r3, r2, r3
 80044ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	663b      	str	r3, [r7, #96]	; 0x60
 80044f8:	667a      	str	r2, [r7, #100]	; 0x64
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004506:	4649      	mov	r1, r9
 8004508:	008b      	lsls	r3, r1, #2
 800450a:	4641      	mov	r1, r8
 800450c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004510:	4641      	mov	r1, r8
 8004512:	008a      	lsls	r2, r1, #2
 8004514:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004518:	f7fb fe56 	bl	80001c8 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <UART_SetConfig+0x4e4>)
 8004522:	fba3 1302 	umull	r1, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2164      	movs	r1, #100	; 0x64
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	3332      	adds	r3, #50	; 0x32
 8004534:	4a08      	ldr	r2, [pc, #32]	; (8004558 <UART_SetConfig+0x4e4>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	f003 020f 	and.w	r2, r3, #15
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4422      	add	r2, r4
 8004548:	609a      	str	r2, [r3, #8]
}
 800454a:	bf00      	nop
 800454c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004556:	bf00      	nop
 8004558:	51eb851f 	.word	0x51eb851f

0800455c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800455c:	b084      	sub	sp, #16
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	f107 001c 	add.w	r0, r7, #28
 800456a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2b01      	cmp	r3, #1
 8004572:	d122      	bne.n	80045ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800459c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d105      	bne.n	80045ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f970 	bl	8004894 <USB_CoreReset>
 80045b4:	4603      	mov	r3, r0
 80045b6:	73fb      	strb	r3, [r7, #15]
 80045b8:	e01a      	b.n	80045f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f964 	bl	8004894 <USB_CoreReset>
 80045cc:	4603      	mov	r3, r0
 80045ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
 80045e2:	e005      	b.n	80045f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10b      	bne.n	800460e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f043 0206 	orr.w	r2, r3, #6
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800461a:	b004      	add	sp, #16
 800461c:	4770      	bx	lr

0800461e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f023 0201 	bic.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d115      	bne.n	800468e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800466e:	2001      	movs	r0, #1
 8004670:	f7fc fdd6 	bl	8001220 <HAL_Delay>
      ms++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8fb 	bl	8004876 <USB_GetMode>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d01e      	beq.n	80046c4 <USB_SetCurrentMode+0x84>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b31      	cmp	r3, #49	; 0x31
 800468a:	d9f0      	bls.n	800466e <USB_SetCurrentMode+0x2e>
 800468c:	e01a      	b.n	80046c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d115      	bne.n	80046c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046a0:	2001      	movs	r0, #1
 80046a2:	f7fc fdbd 	bl	8001220 <HAL_Delay>
      ms++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8e2 	bl	8004876 <USB_GetMode>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <USB_SetCurrentMode+0x84>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b31      	cmp	r3, #49	; 0x31
 80046bc:	d9f0      	bls.n	80046a0 <USB_SetCurrentMode+0x60>
 80046be:	e001      	b.n	80046c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e005      	b.n	80046d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b32      	cmp	r3, #50	; 0x32
 80046c8:	d101      	bne.n	80046ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a13      	ldr	r2, [pc, #76]	; (800473c <USB_FlushTxFifo+0x64>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e01b      	b.n	8004730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	daf2      	bge.n	80046e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	019b      	lsls	r3, r3, #6
 8004708:	f043 0220 	orr.w	r2, r3, #32
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a08      	ldr	r2, [pc, #32]	; (800473c <USB_FlushTxFifo+0x64>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e006      	b.n	8004730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b20      	cmp	r3, #32
 800472c:	d0f0      	beq.n	8004710 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	00030d40 	.word	0x00030d40

08004740 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4a11      	ldr	r2, [pc, #68]	; (800479c <USB_FlushRxFifo+0x5c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e018      	b.n	8004790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	daf2      	bge.n	800474c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2210      	movs	r2, #16
 800476e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a08      	ldr	r2, [pc, #32]	; (800479c <USB_FlushRxFifo+0x5c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e006      	b.n	8004790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b10      	cmp	r3, #16
 800478c:	d0f0      	beq.n	8004770 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	00030d40 	.word	0x00030d40

080047a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b08b      	sub	sp, #44	; 0x2c
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	e014      	b.n	80047f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	3301      	adds	r3, #1
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	3301      	adds	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	3301      	adds	r3, #1
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	3301      	adds	r3, #1
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	3301      	adds	r3, #1
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	6a3a      	ldr	r2, [r7, #32]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d3e6      	bcc.n	80047cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047fe:	8bfb      	ldrh	r3, [r7, #30]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01e      	beq.n	8004842 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480e:	461a      	mov	r2, r3
 8004810:	f107 0310 	add.w	r3, r7, #16
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
 8004824:	b2da      	uxtb	r2, r3
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	701a      	strb	r2, [r3, #0]
      i++;
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	3301      	adds	r3, #1
 800482e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	3301      	adds	r3, #1
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004836:	8bfb      	ldrh	r3, [r7, #30]
 8004838:	3b01      	subs	r3, #1
 800483a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800483c:	8bfb      	ldrh	r3, [r7, #30]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ea      	bne.n	8004818 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004844:	4618      	mov	r0, r3
 8004846:	372c      	adds	r7, #44	; 0x2c
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004868:	68fb      	ldr	r3, [r7, #12]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0301 	and.w	r3, r3, #1
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <USB_CoreReset+0x64>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e01b      	b.n	80048ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	daf2      	bge.n	80048a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <USB_CoreReset+0x64>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e006      	b.n	80048ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d0f0      	beq.n	80048ca <USB_CoreReset+0x36>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	00030d40 	.word	0x00030d40

080048fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048fc:	b084      	sub	sp, #16
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800490a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d018      	beq.n	8004984 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d10a      	bne.n	800496e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004966:	f043 0304 	orr.w	r3, r3, #4
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	e014      	b.n	8004998 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800497c:	f023 0304 	bic.w	r3, r3, #4
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e009      	b.n	8004998 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004992:	f023 0304 	bic.w	r3, r3, #4
 8004996:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004998:	2110      	movs	r1, #16
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff fe9c 	bl	80046d8 <USB_FlushTxFifo>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff fec8 	bl	8004740 <USB_FlushRxFifo>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	e015      	b.n	80049ec <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049cc:	461a      	mov	r2, r3
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295
 80049d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e0:	461a      	mov	r2, r3
 80049e2:	2300      	movs	r3, #0
 80049e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	3301      	adds	r3, #1
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d3e5      	bcc.n	80049c0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004a00:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <USB_HostInit+0x16c>)
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <USB_HostInit+0x170>)
 8004a20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a24:	e009      	b.n	8004a3a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a10      	ldr	r2, [pc, #64]	; (8004a70 <USB_HostInit+0x174>)
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a0f      	ldr	r2, [pc, #60]	; (8004a74 <USB_HostInit+0x178>)
 8004a36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f043 0210 	orr.w	r2, r3, #16
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699a      	ldr	r2, [r3, #24]
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <USB_HostInit+0x17c>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a64:	b004      	add	sp, #16
 8004a66:	4770      	bx	lr
 8004a68:	01000200 	.word	0x01000200
 8004a6c:	00e00300 	.word	0x00e00300
 8004a70:	00600080 	.word	0x00600080
 8004a74:	004000e0 	.word	0x004000e0
 8004a78:	a3200008 	.word	0xa3200008

08004a7c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004aca:	6053      	str	r3, [r2, #4]
 8004acc:	e009      	b.n	8004ae2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d106      	bne.n	8004ae2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ada:	461a      	mov	r2, r3
 8004adc:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ae0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	b29b      	uxth	r3, r3
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b089      	sub	sp, #36	; 0x24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0c9b      	lsrs	r3, r3, #18
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	0fdb      	lsrs	r3, r3, #31
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d104      	bne.n	8004b6c <USB_HC_Halt+0x5a>
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e0c8      	b.n	8004cfe <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <USB_HC_Halt+0x66>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d163      	bne.n	8004c40 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f040 80ab 	bne.w	8004cfc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d133      	bne.n	8004c1a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bd0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	0151      	lsls	r1, r2, #5
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	440a      	add	r2, r1
 8004be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bf0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bfe:	d81d      	bhi.n	8004c3c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c16:	d0ec      	beq.n	8004bf2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c18:	e070      	b.n	8004cfc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c38:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c3a:	e05f      	b.n	8004cfc <USB_HC_Halt+0x1ea>
            break;
 8004c3c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c3e:	e05d      	b.n	8004cfc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d133      	bne.n	8004cd8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	0151      	lsls	r1, r2, #5
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	440a      	add	r2, r1
 8004ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cbc:	d81d      	bhi.n	8004cfa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd4:	d0ec      	beq.n	8004cb0 <USB_HC_Halt+0x19e>
 8004cd6:	e011      	b.n	8004cfc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e000      	b.n	8004cfc <USB_HC_Halt+0x1ea>
          break;
 8004cfa:	bf00      	nop
    }
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3724      	adds	r7, #36	; 0x24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <__libc_init_array>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	4d0d      	ldr	r5, [pc, #52]	; (8004d44 <__libc_init_array+0x38>)
 8004d10:	4c0d      	ldr	r4, [pc, #52]	; (8004d48 <__libc_init_array+0x3c>)
 8004d12:	1b64      	subs	r4, r4, r5
 8004d14:	10a4      	asrs	r4, r4, #2
 8004d16:	2600      	movs	r6, #0
 8004d18:	42a6      	cmp	r6, r4
 8004d1a:	d109      	bne.n	8004d30 <__libc_init_array+0x24>
 8004d1c:	4d0b      	ldr	r5, [pc, #44]	; (8004d4c <__libc_init_array+0x40>)
 8004d1e:	4c0c      	ldr	r4, [pc, #48]	; (8004d50 <__libc_init_array+0x44>)
 8004d20:	f000 f82e 	bl	8004d80 <_init>
 8004d24:	1b64      	subs	r4, r4, r5
 8004d26:	10a4      	asrs	r4, r4, #2
 8004d28:	2600      	movs	r6, #0
 8004d2a:	42a6      	cmp	r6, r4
 8004d2c:	d105      	bne.n	8004d3a <__libc_init_array+0x2e>
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
 8004d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d34:	4798      	blx	r3
 8004d36:	3601      	adds	r6, #1
 8004d38:	e7ee      	b.n	8004d18 <__libc_init_array+0xc>
 8004d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3e:	4798      	blx	r3
 8004d40:	3601      	adds	r6, #1
 8004d42:	e7f2      	b.n	8004d2a <__libc_init_array+0x1e>
 8004d44:	08004db8 	.word	0x08004db8
 8004d48:	08004db8 	.word	0x08004db8
 8004d4c:	08004db8 	.word	0x08004db8
 8004d50:	08004dbc 	.word	0x08004dbc

08004d54 <memcpy>:
 8004d54:	440a      	add	r2, r1
 8004d56:	4291      	cmp	r1, r2
 8004d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d5c:	d100      	bne.n	8004d60 <memcpy+0xc>
 8004d5e:	4770      	bx	lr
 8004d60:	b510      	push	{r4, lr}
 8004d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d6a:	4291      	cmp	r1, r2
 8004d6c:	d1f9      	bne.n	8004d62 <memcpy+0xe>
 8004d6e:	bd10      	pop	{r4, pc}

08004d70 <memset>:
 8004d70:	4402      	add	r2, r0
 8004d72:	4603      	mov	r3, r0
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d100      	bne.n	8004d7a <memset+0xa>
 8004d78:	4770      	bx	lr
 8004d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7e:	e7f9      	b.n	8004d74 <memset+0x4>

08004d80 <_init>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	bf00      	nop
 8004d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d86:	bc08      	pop	{r3}
 8004d88:	469e      	mov	lr, r3
 8004d8a:	4770      	bx	lr

08004d8c <_fini>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr
